{"ast":null,"code":"import { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport { useBox } from '../Box/Box.js';\nimport { a as _objectSpread2, _ as _objectWithoutPropertiesLoose } from '../_rollupPluginBabelHelpers-959e870d.js';\nimport { useRef, useState, useEffect, useCallback } from 'react';\nimport { useForkRef } from 'reakit-utils/useForkRef';\nimport { isButton } from 'reakit-utils/isButton';\nimport { warning } from 'reakit-warning';\nimport { useLiveRef } from 'reakit-utils/useLiveRef';\nimport { isFocusable } from 'reakit-utils/tabbable';\nimport { hasFocusWithin } from 'reakit-utils/hasFocusWithin';\n\nfunction isNativeTabbable(element) {\n  return element.tagName === \"BUTTON\" || element.tagName === \"INPUT\" || element.tagName === \"SELECT\" || element.tagName === \"TEXTAREA\" || element.tagName === \"A\" || element.tagName === \"AUDIO\" || element.tagName === \"VIDEO\";\n} // https://twitter.com/diegohaz/status/1176998102139572225\n\n\nfunction isUserAgent(string) {\n  if (typeof window === \"undefined\") return false;\n  return window.navigator.userAgent.indexOf(string) !== -1;\n}\n\nvar isSafariOrFirefoxOnMac = isUserAgent(\"Mac\") && (isUserAgent(\"Safari\") || isUserAgent(\"Firefox\"));\nvar useTabbable = createHook({\n  name: \"Tabbable\",\n  compose: useBox,\n  keys: [\"disabled\", \"focusable\"],\n  useOptions: function useOptions(options, _ref) {\n    var disabled = _ref.disabled;\n    return _objectSpread2({\n      disabled: disabled\n    }, options);\n  },\n  useProps: function useProps(options, _ref2) {\n    var htmlRef = _ref2.ref,\n        htmlTabIndex = _ref2.tabIndex,\n        htmlOnClick = _ref2.onClick,\n        htmlOnMouseDown = _ref2.onMouseDown,\n        htmlStyle = _ref2.style,\n        htmlProps = _objectWithoutPropertiesLoose(_ref2, [\"ref\", \"tabIndex\", \"onClick\", \"onMouseDown\", \"style\"]);\n\n    var ref = useRef(null);\n    var onClickRef = useLiveRef(htmlOnClick);\n    var onMouseDownRef = useLiveRef(htmlOnMouseDown);\n    var trulyDisabled = options.disabled && !options.focusable;\n\n    var _React$useState = useState(true),\n        nativeTabbable = _React$useState[0],\n        setNativeTabbable = _React$useState[1];\n\n    var tabIndex = nativeTabbable ? htmlTabIndex : htmlTabIndex || 0;\n    var style = options.disabled ? _objectSpread2({\n      pointerEvents: \"none\"\n    }, htmlStyle) : htmlStyle;\n    useEffect(function () {\n      var tabbable = ref.current;\n\n      if (!tabbable) {\n        process.env.NODE_ENV !== \"production\" ? warning(true, \"Can't determine if the element is a native tabbable element because `ref` wasn't passed to the component.\", \"See https://reakit.io/docs/tabbable\") : void 0;\n        return;\n      }\n\n      if (!isNativeTabbable(tabbable)) {\n        setNativeTabbable(false);\n      }\n    }, []);\n    var onClick = useCallback(function (event) {\n      var _onClickRef$current;\n\n      if (options.disabled) {\n        event.stopPropagation();\n        event.preventDefault();\n        return;\n      }\n\n      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);\n    }, [options.disabled]);\n    var onMouseDown = useCallback(function (event) {\n      var _onMouseDownRef$curre;\n\n      if (options.disabled) {\n        event.stopPropagation();\n        event.preventDefault();\n        return;\n      }\n\n      (_onMouseDownRef$curre = onMouseDownRef.current) === null || _onMouseDownRef$curre === void 0 ? void 0 : _onMouseDownRef$curre.call(onMouseDownRef, event);\n      if (event.defaultPrevented) return;\n      var self = event.currentTarget;\n      var target = event.target;\n\n      if (isSafariOrFirefoxOnMac && isButton(self) && self.contains(target)) {\n        event.preventDefault();\n        var isFocusControl = isFocusable(target) || target.tagName === \"LABEL\";\n\n        if (!hasFocusWithin(self) || self === target || !isFocusControl) {\n          self.focus();\n        }\n      }\n    }, [options.disabled]);\n    return _objectSpread2({\n      ref: useForkRef(ref, htmlRef),\n      style: style,\n      tabIndex: !trulyDisabled ? tabIndex : undefined,\n      disabled: trulyDisabled && nativeTabbable ? true : undefined,\n      \"aria-disabled\": options.disabled ? true : undefined,\n      onClick: onClick,\n      onMouseDown: onMouseDown\n    }, htmlProps);\n  }\n});\nvar Tabbable = createComponent({\n  as: \"div\",\n  useHook: useTabbable\n});\nexport { Tabbable, useTabbable };","map":null,"metadata":{},"sourceType":"module"}