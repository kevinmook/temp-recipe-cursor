{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n */\n\nfunction convertHexToRGB(color) {\n  // eslint-disable-next-line no-param-reassign\n  color = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(color.length / 3, \"}\"), 'g');\n  var colors = color.match(re);\n  return \"rgb(\".concat(colors.map(function (n) {\n    return parseInt(n, 16);\n  }).join(', '), \")\");\n}\n/**\n * Returns an object with the type and values of a color.\n */\n\n\nfunction decomposeColor(color) {\n  if (color.charAt(0) === '#') return decomposeColor(convertHexToRGB(color));\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n  var values = color.substring(marker + 1, color.length - 1).split(',').map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values\n  };\n}\n\nfunction floatToHex(n) {\n  var hex = parseInt(n, 10).toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\n * Converts a color object with type and values to a string.\n */\n\n\nfunction recomposeColor(_ref) {\n  var values = _ref.values;\n  return \"#\".concat(values.map(floatToHex).join(''));\n}\n\nvar clamp = function clamp(n) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  return n < min ? min : n > max ? max : n;\n};\n\nfunction darken(hexColor, value) {\n  var _decomposeColor = decomposeColor(hexColor),\n      type = _decomposeColor.type,\n      values = _decomposeColor.values;\n\n  for (var i = 0; i < 3; i += 1) {\n    values[i] *= 1 - clamp(value);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: values\n  });\n}\n\nvar _default = darken;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}