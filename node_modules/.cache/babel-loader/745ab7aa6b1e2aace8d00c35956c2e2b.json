{"ast":null,"code":"import { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport '../Box/Box.js';\nimport { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-959e870d.js';\nimport { useRef, useEffect, createContext, useContext, useState, useCallback, useMemo, createElement } from 'react';\nimport { useForkRef } from 'reakit-utils/useForkRef';\nimport { warning, useWarning } from 'reakit-warning';\nimport { useLiveRef } from 'reakit-utils/useLiveRef';\nimport { getFirstTabbableIn, ensureFocus, getLastTabbableIn, isTabbable } from 'reakit-utils/tabbable';\nimport { hasFocusWithin } from 'reakit-utils/hasFocusWithin';\nimport 'reakit-utils/useSealedState';\nimport { useCreateElement } from 'reakit-system/useCreateElement';\nimport { getDocument } from 'reakit-utils/getDocument';\nimport 'reakit-utils/isSelfTarget';\nimport '../Id/IdProvider.js';\nimport '../Id/IdState.js';\nimport { getActiveElement } from 'reakit-utils/getActiveElement';\nimport { useIsomorphicEffect } from 'reakit-utils/useIsomorphicEffect';\nimport '../Disclosure/DisclosureState.js';\nimport { useDisclosureContent } from '../Disclosure/DisclosureContent.js';\nimport 'react-dom';\nimport { Portal } from '../Portal/Portal.js';\nimport { removeItemFromArray } from 'reakit-utils/removeItemFromArray';\nimport { M as MenuContext } from '../MenuContext-eb1aa1c9.js';\nimport { disableBodyScroll, enableBodyScroll } from 'body-scroll-lock';\nimport { useUpdateEffect } from 'reakit-utils/useUpdateEffect';\nimport { closest } from 'reakit-utils/closest';\nimport { contains } from 'reakit-utils/contains';\nimport { useDialogState } from './DialogState.js';\nimport { D as DialogBackdropContext } from '../DialogBackdropContext-2db2c622.js';\n\nfunction useActiveElementRef(dialogRef, options) {\n  var activeElementRef = useRef(null);\n  useIsomorphicEffect(function () {\n    if (options.visible) return undefined;\n    var document = getDocument(dialogRef.current);\n\n    var onFocus = function onFocus(event) {\n      var target = event.target;\n      activeElementRef.current = target;\n    };\n\n    document.addEventListener(\"focus\", onFocus, true);\n    return function () {\n      return document.removeEventListener(\"focus\", onFocus, true);\n    };\n  }, [options.visible, dialogRef]);\n  return activeElementRef;\n}\n\nfunction useDisclosuresRef(dialogRef, options) {\n  var disclosuresRef = useRef([]);\n  var activeElementRef = useActiveElementRef(dialogRef, options);\n  useEffect(function () {\n    if (!options.visible) return;\n    var document = getDocument(dialogRef.current);\n    var selector = \"[aria-controls~=\\\"\" + options.baseId + \"\\\"]\";\n    var disclosures = Array.from(document.querySelectorAll(selector));\n\n    if (activeElementRef.current instanceof HTMLElement) {\n      if (disclosures.indexOf(activeElementRef.current) !== -1) {\n        var withoutActiveElement = disclosures.filter(function (disclosure) {\n          return disclosure !== activeElementRef.current;\n        });\n        disclosuresRef.current = [activeElementRef.current].concat(withoutActiveElement);\n      } else {\n        disclosuresRef.current = [activeElementRef.current].concat(disclosures);\n      }\n    } else {\n      disclosuresRef.current = disclosures;\n    }\n  }, [options.visible, dialogRef, options.baseId]);\n  return disclosuresRef;\n}\n\nfunction usePreventBodyScroll(targetRef, options) {\n  var shouldPrevent = Boolean(options.preventBodyScroll && options.visible);\n  useEffect(function () {\n    var element = targetRef.current;\n    if (!element || !shouldPrevent) return undefined;\n    disableBodyScroll(element, {\n      reserveScrollBarGap: true\n    });\n    return function () {\n      return enableBodyScroll(element);\n    };\n  }, [targetRef, shouldPrevent]);\n}\n\nfunction useFocusOnShow(dialogRef, nestedDialogs, options) {\n  var initialFocusRef = options.unstable_initialFocusRef;\n  var shouldFocus = options.visible && options.unstable_autoFocusOnShow;\n  var animating = !!(options.animated && options.animating);\n  useUpdateEffect(function () {\n    var dialog = dialogRef.current;\n    process.env.NODE_ENV !== \"production\" ? warning(!!shouldFocus && !dialog, \"[reakit/Dialog]\", \"Can't set initial focus on dialog because `ref` wasn't passed to the dialog element.\", \"See https://reakit.io/docs/dialog\") : void 0;\n    if (!shouldFocus) return;\n    if (!dialog) return;\n    if (animating) return; // If there're nested open dialogs, let them handle focus\n\n    if (nestedDialogs.some(function (child) {\n      var _child$current;\n\n      return !((_child$current = child.current) === null || _child$current === void 0 ? void 0 : _child$current.hidden);\n    })) {\n      return;\n    }\n\n    if (initialFocusRef === null || initialFocusRef === void 0 ? void 0 : initialFocusRef.current) {\n      initialFocusRef.current.focus({\n        preventScroll: true\n      });\n    } else {\n      var tabbable = getFirstTabbableIn(dialog, true);\n\n      var isActive = function isActive() {\n        return hasFocusWithin(dialog);\n      };\n\n      if (tabbable) {\n        ensureFocus(tabbable, {\n          preventScroll: true,\n          isActive: isActive\n        });\n      } else {\n        ensureFocus(dialog, {\n          preventScroll: true,\n          isActive: isActive\n        });\n        process.env.NODE_ENV !== \"production\" ? warning(dialog.tabIndex === undefined || dialog.tabIndex < 0, \"It's recommended to have at least one tabbable element inside dialog. The dialog element has been automatically focused.\", \"If this is the intended behavior, pass `tabIndex={0}` to the dialog element to disable this warning.\", \"See https://reakit.io/docs/dialog/#initial-focus\", dialog) : void 0;\n      }\n    }\n  }, [dialogRef, shouldFocus, animating, nestedDialogs, initialFocusRef]);\n}\n\nfunction usePortalRef(dialogRef, options) {\n  var portalRef = useRef(null);\n  useEffect(function () {\n    var dialog = dialogRef.current;\n    if (!dialog || !options.visible) return;\n    portalRef.current = closest(dialog, Portal.__selector);\n  }, [dialogRef, options.visible]);\n  return portalRef;\n}\n\nfunction removeFromDOM(element) {\n  if (element.parentNode == null) return;\n  element.parentNode.removeChild(element);\n}\n\nvar focusTrapClassName = \"__reakit-focus-trap\";\n\nfunction isFocusTrap(element) {\n  var _element$classList;\n\n  return (_element$classList = element.classList) === null || _element$classList === void 0 ? void 0 : _element$classList.contains(focusTrapClassName);\n}\n\nfunction useFocusTrap(dialogRef, visibleModals, options) {\n  var portalRef = usePortalRef(dialogRef, options);\n  var shouldTrap = options.visible && options.modal;\n  var beforeElement = useRef(null);\n  var afterElement = useRef(null); // Create before and after elements\n  // https://github.com/w3c/aria-practices/issues/545\n\n  useEffect(function () {\n    if (!shouldTrap) return undefined;\n    var portal = portalRef.current;\n\n    if (!portal) {\n      process.env.NODE_ENV !== \"production\" ? warning(true, \"Can't trap focus within modal dialog because either `ref` wasn't passed to component or the component wasn't rendered within a portal\", \"See https://reakit.io/docs/dialog\") : void 0;\n      return undefined;\n    }\n\n    if (!beforeElement.current) {\n      var document = getDocument(portal);\n      beforeElement.current = document.createElement(\"div\");\n      beforeElement.current.className = focusTrapClassName;\n      beforeElement.current.tabIndex = 0;\n      beforeElement.current.style.position = \"fixed\";\n      beforeElement.current.setAttribute(\"aria-hidden\", \"true\");\n    }\n\n    if (!afterElement.current) {\n      afterElement.current = beforeElement.current.cloneNode();\n    }\n\n    portal.insertAdjacentElement(\"beforebegin\", beforeElement.current);\n    portal.insertAdjacentElement(\"afterend\", afterElement.current);\n    return function () {\n      if (beforeElement.current) removeFromDOM(beforeElement.current);\n      if (afterElement.current) removeFromDOM(afterElement.current);\n    };\n  }, [portalRef, shouldTrap]); // Focus trap\n\n  useEffect(function () {\n    var before = beforeElement.current;\n    var after = afterElement.current;\n    if (!shouldTrap || !before || !after) return undefined;\n\n    var handleFocus = function handleFocus(event) {\n      var dialog = dialogRef.current;\n      if (!dialog || visibleModals.length) return;\n      event.preventDefault();\n      var isAfter = event.target === after;\n      var tabbable = isAfter ? getFirstTabbableIn(dialog) : getLastTabbableIn(dialog);\n\n      if (tabbable) {\n        tabbable.focus();\n      } else {\n        // fallback to dialog\n        dialog.focus();\n      }\n    };\n\n    before.addEventListener(\"focus\", handleFocus);\n    after.addEventListener(\"focus\", handleFocus);\n    return function () {\n      before.removeEventListener(\"focus\", handleFocus);\n      after.removeEventListener(\"focus\", handleFocus);\n    };\n  }, [dialogRef, visibleModals, shouldTrap]); // Click trap\n\n  useEffect(function () {\n    if (!shouldTrap) return undefined;\n    var document = getDocument(dialogRef.current);\n\n    var handleClick = function handleClick() {\n      var dialog = dialogRef.current;\n      var portal = portalRef.current;\n      if (!dialog || !portal || visibleModals.length) return;\n\n      if (!hasFocusWithin(portal)) {\n        dialog.focus();\n      }\n    };\n\n    document.addEventListener(\"click\", handleClick);\n    return function () {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, [dialogRef, visibleModals, portalRef, shouldTrap]);\n}\n\nfunction hidByFocusingAnotherElement(dialogRef) {\n  var dialog = dialogRef.current;\n  if (!dialog) return false;\n  var activeElement = getActiveElement(dialog);\n  if (!activeElement) return false;\n  if (contains(dialog, activeElement)) return false;\n  if (isTabbable(activeElement)) return true;\n  if (activeElement.getAttribute(\"data-dialog\") === \"true\") return true;\n  return false;\n}\n\nfunction useFocusOnHide(dialogRef, disclosuresRef, options) {\n  var shouldFocus = options.unstable_autoFocusOnHide && !options.visible;\n  var animating = !!(options.animated && options.animating);\n  useUpdateEffect(function () {\n    var _options$unstable_fin, _disclosuresRef$curre;\n\n    if (!shouldFocus) return;\n    if (animating) return; // Hide was triggered by a click/focus on a tabbable element outside\n    // the dialog or on another dialog. We won't change focus then.\n\n    if (hidByFocusingAnotherElement(dialogRef)) {\n      return;\n    }\n\n    var finalFocusEl = ((_options$unstable_fin = options.unstable_finalFocusRef) === null || _options$unstable_fin === void 0 ? void 0 : _options$unstable_fin.current) || ((_disclosuresRef$curre = disclosuresRef.current) === null || _disclosuresRef$curre === void 0 ? void 0 : _disclosuresRef$curre[0]);\n\n    if (finalFocusEl) {\n      ensureFocus(finalFocusEl);\n    } else {\n      process.env.NODE_ENV !== \"production\" ? warning(true, \"Can't return focus after closing dialog. Either render a disclosure component or provide a `unstable_finalFocusRef` prop.\", \"See https://reakit.io/docs/dialog\", dialogRef.current) : void 0;\n    }\n  }, [shouldFocus, animating, dialogRef, disclosuresRef]);\n}\n\nvar DialogContext = createContext({});\n\nfunction useNestedDialogs(dialogRef, options) {\n  var context = useContext(DialogContext);\n\n  var _React$useState = useState([]),\n      dialogs = _React$useState[0],\n      setDialogs = _React$useState[1];\n\n  var _React$useState2 = useState(dialogs),\n      visibleModals = _React$useState2[0],\n      setVisibleModals = _React$useState2[1];\n\n  var addDialog = useCallback(function (ref) {\n    var _context$addDialog;\n\n    (_context$addDialog = context.addDialog) === null || _context$addDialog === void 0 ? void 0 : _context$addDialog.call(context, ref);\n    setDialogs(function (prevDialogs) {\n      return [].concat(prevDialogs, [ref]);\n    });\n  }, [context.addDialog]);\n  var removeDialog = useCallback(function (ref) {\n    var _context$removeDialog;\n\n    (_context$removeDialog = context.removeDialog) === null || _context$removeDialog === void 0 ? void 0 : _context$removeDialog.call(context, ref);\n    setDialogs(function (prevDialogs) {\n      return removeItemFromArray(prevDialogs, ref);\n    });\n  }, [context.removeDialog]);\n  var showDialog = useCallback(function (ref) {\n    var _context$showDialog;\n\n    (_context$showDialog = context.showDialog) === null || _context$showDialog === void 0 ? void 0 : _context$showDialog.call(context, ref);\n    setVisibleModals(function (prevDialogs) {\n      return [].concat(prevDialogs, [ref]);\n    });\n  }, [context.showDialog]);\n  var hideDialog = useCallback(function (ref) {\n    var _context$hideDialog;\n\n    (_context$hideDialog = context.hideDialog) === null || _context$hideDialog === void 0 ? void 0 : _context$hideDialog.call(context, ref);\n    setVisibleModals(function (prevDialogs) {\n      return removeItemFromArray(prevDialogs, ref);\n    });\n  }, [context.hideDialog]); // If it's a nested dialog, add it to context\n\n  useEffect(function () {\n    var _context$addDialog2;\n\n    if (options.unstable_orphan) return undefined;\n    (_context$addDialog2 = context.addDialog) === null || _context$addDialog2 === void 0 ? void 0 : _context$addDialog2.call(context, dialogRef);\n    return function () {\n      var _context$removeDialog2;\n\n      (_context$removeDialog2 = context.removeDialog) === null || _context$removeDialog2 === void 0 ? void 0 : _context$removeDialog2.call(context, dialogRef);\n    };\n  }, [options.unstable_orphan, context.addDialog, dialogRef, context.removeDialog]);\n  useEffect(function () {\n    var _context$showDialog2;\n\n    if (options.unstable_orphan) return undefined;\n    if (!options.modal) return undefined;\n    if (!options.visible) return undefined;\n    (_context$showDialog2 = context.showDialog) === null || _context$showDialog2 === void 0 ? void 0 : _context$showDialog2.call(context, dialogRef);\n    return function () {\n      var _context$hideDialog2;\n\n      (_context$hideDialog2 = context.hideDialog) === null || _context$hideDialog2 === void 0 ? void 0 : _context$hideDialog2.call(context, dialogRef);\n    };\n  }, [options.unstable_orphan, options.modal, options.visible, context.showDialog, dialogRef, context.hideDialog]); // Close all nested dialogs when parent dialog closes\n\n  useEffect(function () {\n    if (context.visible === false && options.visible && !options.unstable_orphan) {\n      var _options$hide;\n\n      (_options$hide = options.hide) === null || _options$hide === void 0 ? void 0 : _options$hide.call(options);\n    }\n  }, [context.visible, options.visible, options.hide, options.unstable_orphan]); // Provider\n\n  var providerValue = useMemo(function () {\n    return {\n      visible: options.visible,\n      addDialog: addDialog,\n      removeDialog: removeDialog,\n      showDialog: showDialog,\n      hideDialog: hideDialog\n    };\n  }, [options.visible, addDialog, removeDialog, showDialog, hideDialog]);\n  var wrap = useCallback(function (element) {\n    return /*#__PURE__*/createElement(DialogContext.Provider, {\n      value: providerValue\n    }, element);\n  }, [providerValue]);\n  return {\n    dialogs: dialogs,\n    visibleModals: visibleModals,\n    wrap: wrap\n  };\n}\n\nfunction dialogContains(target) {\n  return function (dialogRef) {\n    var dialog = dialogRef.current;\n    if (!dialog) return false;\n    if (contains(dialog, target)) return true;\n    var document = getDocument(dialog);\n    var backdrop = document.querySelector(\"[data-dialog-ref=\\\"\" + dialog.id + \"\\\"]\");\n\n    if (backdrop) {\n      return contains(backdrop, target);\n    }\n\n    return false;\n  };\n}\n\nfunction isDisclosure(target) {\n  return function (disclosure) {\n    var _target$getAttribute;\n\n    if (contains(disclosure, target)) return true;\n    return disclosure.id && disclosure.id === ((_target$getAttribute = target.getAttribute) === null || _target$getAttribute === void 0 ? void 0 : _target$getAttribute.call(target, \"aria-activedescendant\"));\n  };\n}\n\nfunction useEventListenerOutside(containerRef, disclosuresRef, nestedDialogs, eventType, listener, shouldListen) {\n  var listenerRef = useLiveRef(listener);\n  useEffect(function () {\n    if (!shouldListen) return undefined;\n\n    var handleEvent = function handleEvent(event) {\n      if (!listenerRef.current) return;\n      var container = containerRef.current;\n      var disclosures = disclosuresRef.current || [];\n      var target = event.target;\n\n      if (!container) {\n        process.env.NODE_ENV !== \"production\" ? warning(true, \"Can't detect events outside dialog because `ref` wasn't passed to component.\", \"See https://reakit.io/docs/dialog\") : void 0;\n        return;\n      } // Click inside dialog\n\n\n      if (contains(container, target)) return; // Click on disclosure\n\n      if (disclosures.length && disclosures.some(isDisclosure(target))) {\n        return;\n      } // Click inside a nested dialog or focus trap\n\n\n      if (isFocusTrap(target) || nestedDialogs.some(dialogContains(target))) {\n        return;\n      }\n\n      listenerRef.current(event);\n    };\n\n    var document = getDocument(containerRef.current);\n    document.addEventListener(eventType, handleEvent, true);\n    return function () {\n      document.removeEventListener(eventType, handleEvent, true);\n    };\n  }, [containerRef, disclosuresRef, nestedDialogs, eventType, shouldListen, listenerRef]);\n}\n\nfunction useMouseDownRef(dialogRef, options) {\n  var mouseDownRef = useRef();\n  useEffect(function () {\n    if (!options.visible || !options.hideOnClickOutside) {\n      return undefined;\n    }\n\n    var document = getDocument(dialogRef.current);\n\n    var onMouseDown = function onMouseDown(event) {\n      mouseDownRef.current = event.target;\n    };\n\n    document.addEventListener(\"mousedown\", onMouseDown);\n    return function () {\n      document.removeEventListener(\"mousedown\", onMouseDown);\n    };\n  }, [options.visible, options.hideOnClickOutside, dialogRef]);\n  return mouseDownRef;\n}\n\nfunction useHideOnClickOutside(dialogRef, disclosuresRef, nestedDialogs, options) {\n  var mouseDownRef = useMouseDownRef(dialogRef, options);\n  useEventListenerOutside(dialogRef, disclosuresRef, nestedDialogs, \"click\", function (event) {\n    // Make sure the element that has been clicked is the same that last\n    // triggered the mousedown event. This prevents the dialog from closing\n    // by dragging the cursor (for example, selecting some text inside the\n    // dialog and releasing the mouse outside of it).\n    if (mouseDownRef.current === event.target) {\n      var _options$hide;\n\n      (_options$hide = options.hide) === null || _options$hide === void 0 ? void 0 : _options$hide.call(options);\n    }\n  }, options.visible && options.hideOnClickOutside);\n  useEventListenerOutside(dialogRef, disclosuresRef, nestedDialogs, \"focus\", function (event) {\n    // Fix for https://github.com/reakit/reakit/issues/619\n    if (event.target !== getDocument(dialogRef.current)) {\n      var _options$hide2;\n\n      (_options$hide2 = options.hide) === null || _options$hide2 === void 0 ? void 0 : _options$hide2.call(options);\n    }\n  }, options.visible && options.hideOnClickOutside);\n}\n\nfunction useDisableHoverOutside(portalRef, nestedDialogs, options) {\n  var useEvent = function useEvent(eventType) {\n    return useEventListenerOutside(portalRef, {\n      current: null\n    }, nestedDialogs, eventType, function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }, options.visible && options.modal);\n  };\n\n  useEvent(\"mouseover\");\n  useEvent(\"mouseout\");\n}\n\nvar useDialog = createHook({\n  name: \"Dialog\",\n  compose: useDisclosureContent,\n  useState: useDialogState,\n  keys: [\"hideOnEsc\", \"hideOnClickOutside\", \"preventBodyScroll\", \"unstable_initialFocusRef\", \"unstable_finalFocusRef\", \"unstable_orphan\", \"unstable_autoFocusOnShow\", \"unstable_autoFocusOnHide\"],\n  useOptions: function useOptions(_ref) {\n    var _ref$modal = _ref.modal,\n        modal = _ref$modal === void 0 ? true : _ref$modal,\n        _ref$hideOnEsc = _ref.hideOnEsc,\n        hideOnEsc = _ref$hideOnEsc === void 0 ? true : _ref$hideOnEsc,\n        _ref$hideOnClickOutsi = _ref.hideOnClickOutside,\n        hideOnClickOutside = _ref$hideOnClickOutsi === void 0 ? true : _ref$hideOnClickOutsi,\n        _ref$preventBodyScrol = _ref.preventBodyScroll,\n        preventBodyScroll = _ref$preventBodyScrol === void 0 ? modal : _ref$preventBodyScrol,\n        _ref$unstable_autoFoc = _ref.unstable_autoFocusOnShow,\n        unstable_autoFocusOnShow = _ref$unstable_autoFoc === void 0 ? true : _ref$unstable_autoFoc,\n        _ref$unstable_autoFoc2 = _ref.unstable_autoFocusOnHide,\n        unstable_autoFocusOnHide = _ref$unstable_autoFoc2 === void 0 ? true : _ref$unstable_autoFoc2,\n        unstable_orphan = _ref.unstable_orphan,\n        unstable_modal = _ref.unstable_modal,\n        setModal = _ref.setModal,\n        options = _objectWithoutPropertiesLoose(_ref, [\"modal\", \"hideOnEsc\", \"hideOnClickOutside\", \"preventBodyScroll\", \"unstable_autoFocusOnShow\", \"unstable_autoFocusOnHide\", \"unstable_orphan\", \"unstable_modal\", \"setModal\"]);\n\n    useEffect(function () {\n      if (setModal && unstable_modal !== modal) {\n        process.env.NODE_ENV !== \"production\" ? warning(true, \"Setting `modal` prop on `Dialog` is deprecated. Set it on `useDialogState` instead.\", \"See https://github.com/reakit/reakit/pull/535\") : void 0;\n        setModal(modal);\n      }\n    }, [setModal, unstable_modal, modal]);\n    return _objectSpread2({\n      modal: modal,\n      hideOnEsc: hideOnEsc,\n      hideOnClickOutside: hideOnClickOutside,\n      preventBodyScroll: modal && preventBodyScroll,\n      unstable_autoFocusOnShow: unstable_autoFocusOnShow,\n      unstable_autoFocusOnHide: unstable_autoFocusOnHide,\n      unstable_orphan: modal && unstable_orphan\n    }, options);\n  },\n  useProps: function useProps(options, _ref2) {\n    var htmlRef = _ref2.ref,\n        htmlOnKeyDown = _ref2.onKeyDown,\n        htmlWrapElement = _ref2.wrapElement,\n        htmlProps = _objectWithoutPropertiesLoose(_ref2, [\"ref\", \"onKeyDown\", \"wrapElement\"]);\n\n    var dialog = useRef(null);\n    var backdrop = useContext(DialogBackdropContext);\n    var hasBackdrop = backdrop && backdrop === options.baseId;\n    var disclosures = useDisclosuresRef(dialog, options);\n    var onKeyDownRef = useLiveRef(htmlOnKeyDown);\n\n    var _useNestedDialogs = useNestedDialogs(dialog, options),\n        dialogs = _useNestedDialogs.dialogs,\n        visibleModals = _useNestedDialogs.visibleModals,\n        wrap = _useNestedDialogs.wrap; // VoiceOver/Safari accepts only one `aria-modal` container, so if there\n    // are visible child modals, then we don't want to set aria-modal on the\n    // parent modal (this component).\n\n\n    var modal = options.modal && !visibleModals.length ? true : undefined;\n    usePreventBodyScroll(dialog, options);\n    useFocusTrap(dialog, visibleModals, options);\n    useFocusOnShow(dialog, dialogs, options);\n    useFocusOnHide(dialog, disclosures, options);\n    useHideOnClickOutside(dialog, disclosures, dialogs, options);\n    useDisableHoverOutside(dialog, dialogs, options);\n    var onKeyDown = useCallback(function (event) {\n      var _onKeyDownRef$current;\n\n      (_onKeyDownRef$current = onKeyDownRef.current) === null || _onKeyDownRef$current === void 0 ? void 0 : _onKeyDownRef$current.call(onKeyDownRef, event);\n      if (event.defaultPrevented) return;\n      if (event.key !== \"Escape\") return;\n      if (!options.hideOnEsc) return;\n\n      if (!options.hide) {\n        process.env.NODE_ENV !== \"production\" ? warning(true, \"`hideOnEsc` prop is truthy, but `hide` prop wasn't provided.\", \"See https://reakit.io/docs/dialog\", dialog.current) : void 0;\n        return;\n      }\n\n      event.stopPropagation();\n      options.hide();\n    }, [options.hideOnEsc, options.hide]);\n    var wrapElement = useCallback(function (element) {\n      element = wrap(element);\n\n      if (options.modal && !hasBackdrop) {\n        element = /*#__PURE__*/createElement(Portal, null, element);\n      }\n\n      if (htmlWrapElement) {\n        element = htmlWrapElement(element);\n      }\n\n      return (\n        /*#__PURE__*/\n        // Prevents Menu > Dialog > Menu to behave as a sub menu\n        createElement(MenuContext.Provider, {\n          value: null\n        }, element)\n      );\n    }, [wrap, options.modal, hasBackdrop, htmlWrapElement]);\n    return _objectSpread2({\n      ref: useForkRef(dialog, htmlRef),\n      role: \"dialog\",\n      tabIndex: -1,\n      \"aria-modal\": modal,\n      \"data-dialog\": true,\n      onKeyDown: onKeyDown,\n      wrapElement: wrapElement\n    }, htmlProps);\n  }\n});\nvar Dialog = createComponent({\n  as: \"div\",\n  useHook: useDialog,\n  useCreateElement: function useCreateElement$1(type, props, children) {\n    process.env.NODE_ENV !== \"production\" ? useWarning(!props[\"aria-label\"] && !props[\"aria-labelledby\"], \"You should provide either `aria-label` or `aria-labelledby` props.\", \"See https://reakit.io/docs/dialog\") : void 0;\n    return useCreateElement(type, props, children);\n  }\n});\nexport { Dialog, useDialog };","map":null,"metadata":{},"sourceType":"module"}