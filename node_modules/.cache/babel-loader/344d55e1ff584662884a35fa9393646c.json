{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _EzField = require(\"./EzField.styles\");\n\nvar _EzLabel = _interopRequireDefault(require(\"../EzLabel\"));\n\nvar _Icons = require(\"../Icons\");\n\nvar _hooks = require(\"../../utils/hooks\");\n\nvar _utils = require(\"../../utils\");\n\nvar _EzChoice = _interopRequireDefault(require(\"./EzChoice\"));\n\nvar _EzDateInput = _interopRequireDefault(require(\"./EzDateInput\"));\n\nvar _EzTimeInput = _interopRequireDefault(require(\"./EzTimeInput\"));\n\nvar _EzTextArea = _interopRequireDefault(require(\"./EzTextArea\"));\n\nvar _EzSelect = _interopRequireDefault(require(\"./EzSelect\"));\n\nvar _EzTextInput = _interopRequireDefault(require(\"./EzTextInput\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar inputElements = ['text', 'number'];\nvar choiceElements = ['radio', 'checkbox'];\nvar inlineElements = [].concat(inputElements);\n\nvar ErrorIcon = function ErrorIcon() {\n  return _react[\"default\"].createElement(_Icons.InsetIcon, {\n    insetY0: true,\n    right0: true,\n    pr2: true\n  }, _react[\"default\"].createElement(_EzField.ErrorTriangle, null));\n};\n\nvar EzCustomInput = (0, _react.forwardRef)(function (_ref, ref) {\n  var Input = _ref.type,\n      props = (0, _objectWithoutProperties2[\"default\"])(_ref, [\"type\"]);\n  return _react[\"default\"].createElement(_EzField.CustomInputWrapper, props, _react[\"default\"].createElement(Input, (0, _extends2[\"default\"])({\n    ref: ref\n  }, (0, _utils.filterValidProps)(props))));\n});\n\nvar resolveInputFromType = function resolveInputFromType(type) {\n  if (choiceElements.includes(type)) return _EzChoice[\"default\"];\n  if (type === 'date') return _EzDateInput[\"default\"];\n  if (type === 'select') return _EzSelect[\"default\"];\n  if (type === 'time') return _EzTimeInput[\"default\"];\n  if (type === 'textarea') return _EzTextArea[\"default\"];\n  if (inputElements.includes(type)) return _EzTextInput[\"default\"];\n  return EzCustomInput;\n};\n/**\n * Form fields provide inputs for form data, such as text, dates, emails and other data types.\n */\n\n\nvar EzField = (0, _react.forwardRef)(function (props, ref) {\n  var id = (0, _hooks.useUniqueId)();\n  var labelId = (0, _hooks.useUniqueId)();\n  var Input = resolveInputFromType(props.type);\n  var helperText = props.helperText,\n      label = props.label,\n      touched = props.touched,\n      error = props.error,\n      type = props.type,\n      maxLength = props.maxLength,\n      labelHidden = props.labelHidden;\n  var showInlineError = inlineElements.includes(type);\n  var isChoiceElement = choiceElements.includes(type);\n\n  var _useFocus = (0, _hooks.useFocus)(),\n      _useFocus2 = (0, _slicedToArray2[\"default\"])(_useFocus, 2),\n      focused = _useFocus2[0],\n      _useFocus2$ = _useFocus2[1],\n      onBlur = _useFocus2$.onBlur,\n      onFocus = _useFocus2$.onFocus;\n\n  var _useHover = (0, _hooks.useHover)(),\n      _useHover2 = (0, _slicedToArray2[\"default\"])(_useHover, 2),\n      hovered = _useHover2[0],\n      mouseEvents = _useHover2[1];\n\n  var _useInput = (0, _hooks.useInput)(props.value || ''),\n      value = _useInput.value,\n      onChange = _useInput.onChange;\n\n  var active = focused || hovered;\n  var showError = Boolean(touched && error);\n  var fieldType = isChoiceElement ? 'fieldset' : undefined;\n  var labelType = isChoiceElement ? 'legend' : 'label';\n\n  var errorMessage = _react[\"default\"].createElement(_EzField.InlineError, {\n    active: active,\n    showInlineError: showInlineError\n  }, _react[\"default\"].createElement(\"span\", null, error));\n\n  var relative = {\n    position: 'relative'\n  };\n  return _react[\"default\"].createElement(_EzField.Field, (0, _extends2[\"default\"])({\n    as: fieldType\n  }, mouseEvents), !labelHidden && _react[\"default\"].createElement(\"div\", null, _react[\"default\"].createElement(\"div\", {\n    style: relative\n  }, _react[\"default\"].createElement(_EzLabel[\"default\"], {\n    id: labelId,\n    htmlFor: id,\n    as: labelType,\n    error: showError\n  }, label), !showInlineError && showError && _react[\"default\"].createElement(ErrorIcon, null)), !showInlineError && showError && errorMessage), helperText && _react[\"default\"].createElement(_EzField.Helper, null, helperText), _react[\"default\"].createElement(\"div\", null, _react[\"default\"].createElement(\"div\", {\n    style: relative\n  }, _react[\"default\"].createElement(Input, _objectSpread({}, props, {}, (0, _utils.wrapEvents)(props, {\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onChange: onChange\n  }), {\n    id: id,\n    name: props.name || id,\n    'aria-labelledby': labelId,\n    ref: ref,\n    showInlineError: showInlineError && showError || undefined\n  })), showInlineError && showError && _react[\"default\"].createElement(ErrorIcon, null)), showInlineError && showError && errorMessage), 'maxLength' in props && typeof value === 'string' && _react[\"default\"].createElement(_EzField.CharacterLimit, null, value.length, \"/\", maxLength), labelHidden && _react[\"default\"].createElement(_EzField.ScreenReaderOnly, {\n    id: labelId\n  }, label));\n});\n/**\n * defaultProps\n * @property {FieldTypes} type - uses 'text' by default.\n */\n\nEzField.defaultProps = {\n  type: 'text'\n};\n/**\n * @component\n */\n\nvar _default = EzField;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}