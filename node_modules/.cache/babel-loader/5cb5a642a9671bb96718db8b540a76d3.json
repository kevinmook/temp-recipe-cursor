{"ast":null,"code":"import { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport '../Box/Box.js';\nimport { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-959e870d.js';\nimport { useState, useCallback } from 'react';\nimport 'reakit-utils/useForkRef';\nimport { isButton } from 'reakit-utils/isButton';\nimport 'reakit-warning';\nimport { useLiveRef } from 'reakit-utils/useLiveRef';\nimport 'reakit-utils/tabbable';\nimport 'reakit-utils/hasFocusWithin';\nimport { useTabbable } from '../Tabbable/Tabbable.js';\n\nfunction isNativeClick(event) {\n  var self = event.currentTarget;\n  if (!event.isTrusted) return false; // istanbul ignore next: can't test trusted events yet\n\n  return isButton(self) || self.tagName === \"INPUT\" || self.tagName === \"TEXTAREA\" || self.tagName === \"A\" || self.tagName === \"SELECT\";\n}\n\nvar useClickable = createHook({\n  name: \"Clickable\",\n  compose: useTabbable,\n  keys: [\"unstable_clickOnEnter\", \"unstable_clickOnSpace\"],\n  useOptions: function useOptions(_ref) {\n    var _ref$unstable_clickOn = _ref.unstable_clickOnEnter,\n        unstable_clickOnEnter = _ref$unstable_clickOn === void 0 ? true : _ref$unstable_clickOn,\n        _ref$unstable_clickOn2 = _ref.unstable_clickOnSpace,\n        unstable_clickOnSpace = _ref$unstable_clickOn2 === void 0 ? true : _ref$unstable_clickOn2,\n        options = _objectWithoutPropertiesLoose(_ref, [\"unstable_clickOnEnter\", \"unstable_clickOnSpace\"]);\n\n    return _objectSpread2({\n      unstable_clickOnEnter: unstable_clickOnEnter,\n      unstable_clickOnSpace: unstable_clickOnSpace\n    }, options);\n  },\n  useProps: function useProps(options, _ref2) {\n    var htmlOnKeyDown = _ref2.onKeyDown,\n        htmlOnKeyUp = _ref2.onKeyUp,\n        htmlProps = _objectWithoutPropertiesLoose(_ref2, [\"onKeyDown\", \"onKeyUp\"]);\n\n    var _React$useState = useState(false),\n        active = _React$useState[0],\n        setActive = _React$useState[1];\n\n    var onKeyDownRef = useLiveRef(htmlOnKeyDown);\n    var onKeyUpRef = useLiveRef(htmlOnKeyUp);\n    var onKeyDown = useCallback(function (event) {\n      var _onKeyDownRef$current;\n\n      (_onKeyDownRef$current = onKeyDownRef.current) === null || _onKeyDownRef$current === void 0 ? void 0 : _onKeyDownRef$current.call(onKeyDownRef, event);\n      if (event.defaultPrevented) return;\n      if (options.disabled) return;\n      if (event.metaKey) return;\n      var isEnter = options.unstable_clickOnEnter && event.key === \"Enter\";\n      var isSpace = options.unstable_clickOnSpace && event.key === \" \";\n\n      if (isEnter || isSpace) {\n        if (isNativeClick(event)) return;\n        event.preventDefault();\n\n        if (isEnter) {\n          event.currentTarget.click();\n        } else if (isSpace) {\n          setActive(true);\n        }\n      }\n    }, [options.disabled, options.unstable_clickOnEnter, options.unstable_clickOnSpace]);\n    var onKeyUp = useCallback(function (event) {\n      var _onKeyUpRef$current;\n\n      (_onKeyUpRef$current = onKeyUpRef.current) === null || _onKeyUpRef$current === void 0 ? void 0 : _onKeyUpRef$current.call(onKeyUpRef, event);\n      if (event.defaultPrevented) return;\n      if (options.disabled) return;\n      if (event.metaKey) return;\n      var isSpace = options.unstable_clickOnSpace && event.key === \" \";\n\n      if (active && isSpace) {\n        setActive(false);\n        event.currentTarget.click();\n      }\n    }, [options.disabled, options.unstable_clickOnSpace, active]);\n    return _objectSpread2({\n      \"data-active\": active || undefined,\n      onKeyDown: onKeyDown,\n      onKeyUp: onKeyUp\n    }, htmlProps);\n  }\n});\nvar Clickable = createComponent({\n  as: \"button\",\n  memo: true,\n  useHook: useClickable\n});\nexport { Clickable, useClickable };","map":null,"metadata":{},"sourceType":"module"}