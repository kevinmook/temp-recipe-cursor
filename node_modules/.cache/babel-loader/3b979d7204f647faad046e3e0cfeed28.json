{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _dayjs = _interopRequireDefault(require(\"dayjs\"));\n\nvar _EzCalendar = require(\"./EzCalendar.styles\");\n\nvar _en = _interopRequireDefault(require(\"./en\"));\n\nvar _hooks = require(\"../../utils/hooks\");\n\nvar weekDayCount = 7;\nvar maxDaysInMonth = 31;\n\nvar repeat = function repeat(n) {\n  return new Array(n).fill(null);\n};\n\nvar populateMonth = function populateMonth(date) {\n  var daysInMonth = date.endOf('month').date();\n  var monthDayStartOffset = date.set('date', 1).day() + 1;\n  var weeksInMonth = Math.ceil((monthDayStartOffset + daysInMonth) / weekDayCount);\n  var tempMonthDayStartOffset = monthDayStartOffset;\n  var daysLeftInMonth = date.endOf('month').date();\n  return repeat(weeksInMonth).map(function () {\n    return repeat(weekDayCount).map(function () {\n      if (--tempMonthDayStartOffset > 0) return null;\n      var day = daysInMonth - --daysLeftInMonth;\n      if (day <= daysInMonth) return day;\n      return null;\n    });\n  });\n};\n\nvar EzCalendar = function EzCalendar(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      minDate = _ref.minDate,\n      maxDate = _ref.maxDate,\n      filterDate = _ref.filterDate;\n\n  var _useTranslation = (0, _hooks.useTranslation)(_en[\"default\"]),\n      t = _useTranslation.t;\n\n  var calendarRef = (0, _react.useRef)(null);\n  var refs = (0, _react.useRef)(repeat(maxDaysInMonth).map(function () {\n    return (0, _react.createRef)();\n  })).current;\n  var selectedDate = (0, _dayjs[\"default\"])(value).isValid() ? (0, _dayjs[\"default\"])(value) : (0, _dayjs[\"default\"])();\n\n  var _useState = (0, _react.useState)(selectedDate),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      focusedDate = _useState2[0],\n      setFocusedDate = _useState2[1];\n\n  (0, _react.useEffect)(function () {\n    var _calendarRef$current$ = calendarRef.current.ownerDocument,\n        activeElement = _calendarRef$current$.activeElement,\n        body = _calendarRef$current$.body;\n    var bodyFocused = activeElement && activeElement === body;\n    var current = refs[focusedDate.date() - 1].current;\n    var dateFocused = refs.some(function (el) {\n      return el.current === activeElement;\n    });\n    var canFocus = current && (bodyFocused || dateFocused);\n    if (canFocus) current.focus();\n  }, [refs, focusedDate, value]);\n  (0, _react.useEffect)(function () {\n    if ((0, _dayjs[\"default\"])(value).isValid()) setFocusedDate((0, _dayjs[\"default\"])(value));\n  }, [value]);\n\n  var handleKeyInput = function handleKeyInput(selectFocusedDate, disabled) {\n    return function (e) {\n      switch (e.key) {\n        case 'ArrowLeft':\n          e.preventDefault();\n          setFocusedDate(focusedDate.subtract(1, 'day'));\n          break;\n\n        case 'ArrowRight':\n          e.preventDefault();\n          setFocusedDate(focusedDate.add(1, 'day'));\n          break;\n\n        case 'ArrowUp':\n          e.preventDefault();\n          setFocusedDate(focusedDate.subtract(1, 'week'));\n          break;\n\n        case 'ArrowDown':\n          e.preventDefault();\n          setFocusedDate(focusedDate.add(1, 'week'));\n          break;\n\n        case 'Space':\n        case 'Enter':\n          e.preventDefault();\n          if (!disabled) selectFocusedDate();\n          break;\n\n        default:\n          break;\n      }\n    };\n  };\n\n  var isEnabled = function isEnabled(day) {\n    var isSameOrAfterMinDate = minDate !== undefined ? day.isSame(minDate) || day.isAfter(minDate) : true;\n    var isSameOrBeforeMaxDate = maxDate !== undefined ? day.isSame(maxDate) || day.isBefore(maxDate) : true;\n    var isFilterMatch = filterDate !== undefined ? filterDate(day.format(t('DATE_FORMAT'))) : true;\n    return isSameOrAfterMinDate && isSameOrBeforeMaxDate && isFilterMatch;\n  };\n\n  return _react[\"default\"].createElement(\"div\", null, _react[\"default\"].createElement(_EzCalendar.CalendarTable, {\n    ref: calendarRef\n  }, _react[\"default\"].createElement(_EzCalendar.Row, null, _react[\"default\"].createElement(_EzCalendar.MonthNavigation, null, _react[\"default\"].createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return setFocusedDate(focusedDate.subtract(1, 'month').set('date', 1));\n    }\n  }, \"\\u2190 \", t('Prev'))), _react[\"default\"].createElement(_EzCalendar.MonthName, null, focusedDate.format('MMMM YYYY')), _react[\"default\"].createElement(_EzCalendar.MonthNavigation, null, _react[\"default\"].createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return setFocusedDate(focusedDate.add(1, 'month').set('date', 1));\n    }\n  }, t('Next'), \" \\u2192\"))), _react[\"default\"].createElement(_EzCalendar.Row, null, repeat(weekDayCount).map(function (_, dayIndex) {\n    return _react[\"default\"].createElement(_EzCalendar.WeekdayName, {\n      key: dayIndex\n    }, focusedDate.set('day', dayIndex).format('dd'));\n  })), _react[\"default\"].createElement(\"div\", null, populateMonth(focusedDate).map(function (week, weekIndex) {\n    return _react[\"default\"].createElement(_EzCalendar.Row, {\n      key: weekIndex\n    }, week.map(function (day, dayIndex) {\n      var currentDay = focusedDate.set('date', day);\n\n      var selectDate = function selectDate() {\n        return onChange(currentDay.format(t('DATE_FORMAT')));\n      };\n\n      var disabled = !isEnabled(currentDay);\n\n      var ifEnabled = function ifEnabled(fn) {\n        return function (e) {\n          if (!disabled) fn(e);\n        };\n      };\n\n      return _react[\"default\"].createElement(_EzCalendar.Day, {\n        key: dayIndex,\n        isSelected: currentDay.isSame(selectedDate)\n      }, day && _react[\"default\"].createElement(\"button\", {\n        ref: refs[day - 1],\n        type: \"button\",\n        onClick: ifEnabled(selectDate),\n        \"aria-disabled\": disabled,\n        onKeyDown: handleKeyInput(selectDate, disabled),\n        \"aria-label\": currentDay.format('dddd, MMMM D, YYYY').toString(),\n        tabIndex: day === focusedDate.date() ? 0 : -1\n      }, day));\n    }));\n  }))));\n};\n\nvar _default = EzCalendar;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}