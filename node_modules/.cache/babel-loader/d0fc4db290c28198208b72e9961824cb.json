{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _EzSelect = require(\"./EzSelect.styles\");\n\nvar _hooks = require(\"../../utils/hooks\");\n\nvar _EzCombobox = require(\"./EzCombobox\");\n\nvar _EzTextInput = _interopRequireDefault(require(\"./EzTextInput\"));\n\nvar _EzPopover = _interopRequireDefault(require(\"../EzPopover\"));\n\nvar _Icons = require(\"../Icons\");\n\nvar flatten = function flatten(options) {\n  var grouped = new Map();\n  options.forEach(function (item) {\n    var group = item.group;\n    var values = grouped.get(group) || [];\n    values.push(item);\n    grouped.set(group, values);\n  });\n  return (0, _toConsumableArray2[\"default\"])(grouped);\n};\n\nvar ListboxPopover = _react[\"default\"].forwardRef(function (_ref, ref) {\n  var targetRef = _ref.targetRef,\n      props = (0, _objectWithoutProperties2[\"default\"])(_ref, [\"targetRef\"]);\n  return _react[\"default\"].createElement(_EzPopover[\"default\"], {\n    targetRef: targetRef,\n    placement: \"bottom-start\",\n    modifiers: [{\n      name: 'matchWidth',\n      enabled: true,\n      fn: function fn(_ref2) {\n        var state = _ref2.state; // eslint-disable-next-line no-param-reassign\n\n        state.styles.popper.width = \"\".concat(state.rects.reference.width, \"px\");\n      },\n      phase: 'beforeWrite',\n      requires: ['computeStyles']\n    }, {\n      name: 'offset',\n      options: {\n        offset: [0, 5]\n      }\n    }]\n  }, _react[\"default\"].createElement(_EzSelect.Listbox, (0, _extends2[\"default\"])({\n    role: \"listbox\",\n    ref: ref\n  }, props)));\n});\n\nvar Option = function Option(_ref3) {\n  var activeOption = _ref3.activeOption,\n      activeOptionRef = _ref3.activeOptionRef,\n      setActiveOption = _ref3.setActiveOption,\n      option = _ref3.option,\n      selected = _ref3.selected,\n      onClick = _ref3.onClick;\n  /* eslint-disable jsx-a11y/click-events-have-key-events */\n\n  /* eslint-disable jsx-a11y/mouse-events-have-key-events */\n\n  /* Note: lint doesn't detect the keyboard handler is on the input element, not the list */\n\n  var id = (0, _hooks.useUniqueId)();\n  var activeValue = activeOption && activeOption.value;\n  return _react[\"default\"].createElement(\"li\", {\n    role: \"option\",\n    \"aria-current\": selected && option.value === selected.value || undefined,\n    \"aria-selected\": activeValue === option.value,\n    ref: activeValue === option.value ? activeOptionRef : undefined,\n    onMouseOver: function onMouseOver() {\n      return setActiveOption(option);\n    },\n    onClick: onClick,\n    onMouseDown: function onMouseDown(e) {\n      return e.preventDefault();\n    } // used to prevent a focus event from bubbling up to the body in ie11\n    ,\n    id: id\n  }, option.label);\n};\n\nvar OptGroup = function OptGroup(props) {\n  var id = (0, _hooks.useUniqueId)();\n\n  var _props$group = (0, _slicedToArray2[\"default\"])(props.group, 2),\n      name = _props$group[0],\n      options = _props$group[1];\n\n  return _react[\"default\"].createElement(\"li\", null, _react[\"default\"].createElement(\"ul\", {\n    role: \"group\",\n    \"aria-describedby\": id\n  }, _react[\"default\"].createElement(\"li\", {\n    id: id,\n    role: \"presentation\"\n  }, name), options.map(function (o) {\n    return _react[\"default\"].createElement(Option, (0, _extends2[\"default\"])({}, props, {\n      option: o,\n      key: o.label,\n      onClick: function onClick() {\n        return props.selectItem(o.value);\n      }\n    }));\n  })));\n};\n\nvar hasGroupedOptions = function hasGroupedOptions(options) {\n  return options.some(function (o) {\n    return o.group;\n  });\n};\n\nvar EzSelect = function EzSelect(props) {\n  var options = props.options,\n      value = props.value,\n      onChange = props.onChange;\n  var ariaLabelledBy = props['aria-labelledby'];\n  var timeout = (0, _react.useRef)(null);\n  var activeOptionRef = (0, _react.useRef)(null);\n  var selected = options.find(function (o) {\n    return o.value === value;\n  });\n\n  var _useState = (0, _react.useState)(selected),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      activeOption = _useState2[0],\n      setActiveOption = _useState2[1];\n\n  var setActiveIndex = function setActiveIndex(i) {\n    return setActiveOption(i === -1 ? null : options[i]);\n  };\n\n  var listbox = {\n    activeOption: activeOption,\n    activeOptionRef: activeOptionRef,\n    setActiveOption: setActiveOption,\n    selected: selected\n  };\n  (0, _react.useEffect)(function () {\n    return function () {\n      return clearTimeout(timeout.current);\n    };\n  }, []);\n  var comboboxState = (0, _EzCombobox.useComboboxState)();\n  var hide = comboboxState.hide,\n      visible = comboboxState.visible;\n\n  var _useCombobox = (0, _EzCombobox.useCombobox)(comboboxState, {\n    'aria-haspopup': 'listbox',\n    className: props.className,\n    disabled: props.disabled,\n    error: props.error,\n    touched: props.touched,\n    opened: comboboxState.visible\n  }),\n      containerRef = _useCombobox.ref,\n      optionsRef = _useCombobox.optionsRef,\n      combobox = (0, _objectWithoutProperties2[\"default\"])(_useCombobox, [\"ref\", \"optionsRef\"]);\n\n  var handleKeyDown = function handleKeyDown(e) {\n    var key = e.key;\n    var activeIndex = options.indexOf(activeOption);\n\n    var select = function select() {\n      return selectItem(activeOption ? activeOption.value : null);\n    };\n\n    var prev = activeIndex <= 0 ? options.length - 1 : activeIndex - 1;\n    var next = activeIndex === -1 || activeIndex >= options.length - 1 ? 0 : activeIndex + 1;\n    var keyMap = {\n      Escape: function Escape() {\n        return setActiveIndex(-1);\n      },\n      ArrowUp: !e.defaultPrevented && function () {\n        return setActiveIndex(prev);\n      },\n      ArrowDown: !e.defaultPrevented && function () {\n        return setActiveIndex(next);\n      },\n      ' ': visible && select,\n      Enter: visible && select\n    };\n    var action = keyMap[key];\n\n    if (action) {\n      e.preventDefault();\n      action(e);\n    }\n  };\n\n  (0, _hooks.useScrollIntoView)({\n    containerRef: optionsRef,\n    targetRef: activeOptionRef\n  }, [activeOption, visible]);\n  var comboboxInput = (0, _EzCombobox.useComboboxInput)(comboboxState, {\n    'aria-autocomplete': 'list',\n    'aria-labelledby': ariaLabelledBy,\n    value: selected ? selected.label : '',\n    'aria-activedescendant': !activeOptionRef.current ? '' : activeOptionRef.current.id,\n    onKeyDown: handleKeyDown,\n    onSelect: function onSelect(e) {\n      return e.target.setSelectionRange(0, 0);\n    },\n    id: props.id,\n    name: props.name,\n    disabled: props.disabled,\n    placeholder: props.placeholder,\n    error: props.error,\n    touched: props.touched,\n    readOnly: true\n  });\n  var changeEvent = (0, _react.useCallback)(function (optionValue) {\n    var event = new Event('change');\n    containerRef.current.value = optionValue;\n    containerRef.current.dispatchEvent(event);\n    return event;\n  }, [containerRef]);\n\n  function selectItem(optionValue) {\n    onChange(changeEvent(optionValue));\n    timeout.current = setTimeout(hide, 100);\n  }\n\n  var comboboxFlyout = (0, _EzCombobox.useComboboxFlyout)(comboboxState);\n  var move = (0, _react.useCallback)(function (option) {\n    setActiveOption(option);\n    if (visible) return;\n    onChange(changeEvent(option.value));\n  }, [visible, onChange, changeEvent]);\n  (0, _hooks.useJumpToOption)(comboboxInput.ref, {\n    options: options,\n    move: move\n  });\n  return _react[\"default\"].createElement(_EzSelect.Container, {\n    ref: containerRef,\n    hasError: props.touched && props.error,\n    opened: visible\n  }, _react[\"default\"].createElement(_EzSelect.Combobox, combobox, _react[\"default\"].createElement(_EzTextInput[\"default\"], comboboxInput), _react[\"default\"].createElement(_Icons.InsetIcon, {\n    insetY0: true,\n    right0: true,\n    pr2: true\n  }, _react[\"default\"].createElement(_Icons.ChevronIcon, {\n    flip: visible\n  }))), visible && _react[\"default\"].createElement(ListboxPopover, (0, _extends2[\"default\"])({\n    \"aria-labelledby\": ariaLabelledBy,\n    targetRef: comboboxInput.ref\n  }, comboboxFlyout, {\n    ref: optionsRef,\n    onClick: function onClick() {\n      return comboboxInput.ref.current.focus();\n    }\n  }), hasGroupedOptions(options) ? _react[\"default\"].createElement(_react[\"default\"].Fragment, null, flatten(options).map(function (group) {\n    return _react[\"default\"].createElement(OptGroup, (0, _extends2[\"default\"])({}, listbox, {\n      group: group,\n      key: group[0],\n      selectItem: selectItem\n    }));\n  })) : options.map(function (o) {\n    return _react[\"default\"].createElement(Option, (0, _extends2[\"default\"])({}, listbox, {\n      option: o,\n      key: o.label,\n      onClick: function onClick() {\n        return selectItem(o.value);\n      }\n    }));\n  })));\n};\n\nvar _default = EzSelect;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}