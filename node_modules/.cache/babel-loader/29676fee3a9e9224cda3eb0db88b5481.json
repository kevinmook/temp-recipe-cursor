{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.PortalContext = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactDom = require(\"react-dom\");\n\nvar PortalContext = _react[\"default\"].createContext({\n  current: null\n});\n\nexports.PortalContext = PortalContext;\nvar Provider = PortalContext.Provider;\n\nvar EzPortal = function EzPortal(_ref) {\n  var children = _ref.children;\n  var mountNode = (0, _react.useRef)(null);\n\n  var _useContext = (0, _react.useContext)(PortalContext),\n      contextValue = _useContext.current;\n\n  var contextRef = (0, _react.useRef)(contextValue);\n\n  var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      hostNode = _useState2[0],\n      setHostNode = _useState2[1]; // because it's possible to render portals within iframes, we need to ensure that we can\n  // mount the portal to the correct document element. To do this, we initially mount any\n  // DOM element and derive it's ownerDocument. This document represents the iframe the\n  // mounted DOM element resides within. We can then render the portal inside this document.\n  //\n  // Because we can also nest portals, we also need to nest the portalled children within\n  // portalled parent.\n\n\n  (0, _react.useLayoutEffect)(function () {\n    // if the context element and the currently mounted element have the same document (i.e.\n    // they're in the same iframe or parent window), we can use the context element to\n    // nest our new content. Otherwise, we have to use the mounted element to determine\n    // the current ownerDocument (iframed content) to ensure the portal renders to the\n    // correct document.\n    var context = contextRef.current;\n    var parentElement = mountNode.current.ownerDocument === (context === null || context === void 0 ? void 0 : context.ownerDocument) ? context : mountNode.current.ownerDocument.body;\n    var ownerDocument = parentElement.ownerDocument;\n    var portalNode = ownerDocument.createElement('div'); // insert the new container for the portalled content\n\n    parentElement.appendChild(portalNode);\n    setHostNode(portalNode);\n    return function () {\n      if (!parentElement.parentElement || !parentElement.contains(portalNode)) return;\n      parentElement.removeChild(portalNode);\n    };\n  }, []);\n  if (!hostNode) return _react[\"default\"].createElement(\"div\", {\n    ref: mountNode\n  });\n  return _react[\"default\"].createElement(Provider, {\n    value: {\n      current: hostNode\n    }\n  }, (0, _reactDom.createPortal)(children, hostNode));\n};\n\nvar _default = EzPortal;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}