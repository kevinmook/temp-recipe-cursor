{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _EzSegmentedControl = require(\"./EzSegmentedControl.styles\");\n\nvar _EzLabel = _interopRequireDefault(require(\"../EzLabel\"));\n\nvar getId = function getId(name, _ref) {\n  var value = _ref.value;\n  return \"\".concat(name, \"-\").concat(value);\n};\n/**\n * EzSegmentedControls present mutually exclusive options as buttons.\n */\n\n\nvar EzSegmentedControl = function EzSegmentedControl(_ref2) {\n  var active = _ref2.active,\n      className = _ref2.className,\n      label = _ref2.label,\n      labelPosition = _ref2.labelPosition,\n      name = _ref2.name,\n      _onChange = _ref2.onChange,\n      options = _ref2.options;\n  return _react[\"default\"].createElement(_EzSegmentedControl.Fieldset, {\n    className: className,\n    role: \"radiogroup\",\n    \"aria-labelledby\": \"radiogroup-\".concat(name)\n  }, _react[\"default\"].createElement(_EzLabel[\"default\"], {\n    id: \"radiogroup-\".concat(name),\n    position: labelPosition\n  }, label), options.map(function (option) {\n    return _react[\"default\"].createElement(_react.Fragment, {\n      key: option.value\n    }, _react[\"default\"].createElement(\"input\", (0, _extends2[\"default\"])({\n      id: getId(name, option),\n      type: \"radio\",\n      name: name\n    }, _onChange ? {\n      checked: option.value === active\n    } : {\n      defaultChecked: option.value === active\n    }, {\n      onChange: function onChange() {\n        return _onChange && _onChange(option.value);\n      },\n      disabled: option.disabled\n    })), _react[\"default\"].createElement(_EzSegmentedControl.Option, {\n      key: option.value,\n      htmlFor: getId(name, option)\n    }, option.label));\n  }));\n};\n/**\n * defaultProps\n * @property {bool} active - No option is selected by default.\n * @property {string} labelPosition - The label is positioned on the left of the control by default.\n */\n\n\nEzSegmentedControl.defaultProps = {\n  labelPosition: 'left'\n};\n/**\n * @component\n */\n\nvar _default = EzSegmentedControl;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}