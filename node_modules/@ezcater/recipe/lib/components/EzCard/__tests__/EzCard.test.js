"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _jestAxe = require("jest-axe");

var _sosia = require("sosia");

var _server = require("react-dom/server");

var _react2 = require("@testing-library/react");

var _ = require("..");

var _jestGlobals = require("../../../jest-globals");

var _EzCardTest = _interopRequireDefault(require("./EzCard.test.md"));

var _EzCard = _interopRequireDefault(require("../EzCard.md"));

var _index = require("../../index");

var Open = function Open(_ref) {
  var children = _ref.children,
      containerRef = _ref.containerRef;

  _react["default"].useEffect(function () {
    var input = containerRef.current.querySelector('input');

    _react2.fireEvent.mouseDown(input);
  }, [containerRef]);

  return children;
};

var scope = {
  EzButton: _index.EzButton,
  EzCard: _.EzCard,
  EzCardSection: _.EzCardSection,
  EzCardExpandable: _.EzCardExpandable,
  EzLayout: _index.EzLayout,
  EzPage: _index.EzPage,
  EzPageSection: _index.EzPageSection,
  EzField: _index.EzField,
  Open: Open
};
describe('EzCard', function () {
  (0, _sosia.visualSnapshots)({
    markdown: _EzCard["default"],
    scope: scope
  });
  (0, _sosia.visualSnapshots)({
    markdown: _EzCardTest["default"],
    scope: scope
  });
  it('should NOT throw if no ThemeProvider is configured', function () {
    var actual = (0, _server.renderToStaticMarkup)(_react["default"].createElement(_.EzCard, null, _react["default"].createElement("p", null, "Lorem ipsum dolor")));
    expect(actual).toContain('Lorem ipsum dolor');
  }); // Blowing up when empty breaks the live-reload dev experience

  it('should NOT throw if empty', function () {
    expect(function () {
      (0, _jestGlobals.renderToHtml)(_react["default"].createElement(_.EzCard, {}));
    }).not.toThrow();
  });
  it('should NOT throw for simple text content', function () {
    expect(function () {
      (0, _jestGlobals.renderToHtml)(_react["default"].createElement(_.EzCard, null, "hello"));
    }).not.toThrow();
  });
  it('should meet accessibility guidelines',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee() {
    var wrapper, actual;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            wrapper = (0, _jestGlobals.renderToHtml)(_react["default"].createElement(_.EzCard, {
              title: "Card Heading"
            }, _react["default"].createElement(_.EzCardSection, null, "Lorem ipsum dolor"), _react["default"].createElement(_.EzCardSection, null, "sit amet, consectetur adipiscing")));
            _context.next = 3;
            return (0, _jestAxe.axe)(wrapper);

          case 3:
            actual = _context.sent;
            expect(actual).toHaveNoViolations();

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  describe('data-* props', function () {
    var actual;
    beforeEach(function () {
      actual = (0, _jestGlobals.renderToHtml)(_react["default"].createElement(_.EzCard, {
        "data-test": "my-test-selector"
      }, _react["default"].createElement(_.EzCardSection, null, "content")));
    });
    it('renders valid props for html elements', function () {
      expect(actual).toContain('data-test="my-test-selector"');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0V6Q2FyZC9fX3Rlc3RzX18vRXpDYXJkLnRlc3QudHN4Il0sIm5hbWVzIjpbIk9wZW4iLCJjaGlsZHJlbiIsImNvbnRhaW5lclJlZiIsIlJlYWN0IiwidXNlRWZmZWN0IiwiaW5wdXQiLCJjdXJyZW50IiwicXVlcnlTZWxlY3RvciIsImZpcmVFdmVudCIsIm1vdXNlRG93biIsInNjb3BlIiwiRXpCdXR0b24iLCJFekNhcmQiLCJFekNhcmRTZWN0aW9uIiwiRXpDYXJkRXhwYW5kYWJsZSIsIkV6TGF5b3V0IiwiRXpQYWdlIiwiRXpQYWdlU2VjdGlvbiIsIkV6RmllbGQiLCJkZXNjcmliZSIsIm1hcmtkb3duIiwicmVncmVzc2lvblRlc3RzIiwiaXQiLCJhY3R1YWwiLCJleHBlY3QiLCJ0b0NvbnRhaW4iLCJjcmVhdGVFbGVtZW50Iiwibm90IiwidG9UaHJvdyIsIndyYXBwZXIiLCJ0b0hhdmVOb1Zpb2xhdGlvbnMiLCJiZWZvcmVFYWNoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLElBQU1BLElBQUksR0FBRyxTQUFQQSxJQUFPLE9BQThCO0FBQUEsTUFBNUJDLFFBQTRCLFFBQTVCQSxRQUE0QjtBQUFBLE1BQWxCQyxZQUFrQixRQUFsQkEsWUFBa0I7O0FBQ3pDQyxvQkFBTUMsU0FBTixDQUFnQixZQUFNO0FBQ3BCLFFBQU1DLEtBQUssR0FBR0gsWUFBWSxDQUFDSSxPQUFiLENBQXFCQyxhQUFyQixDQUFtQyxPQUFuQyxDQUFkOztBQUNBQyxzQkFBVUMsU0FBVixDQUFvQkosS0FBcEI7QUFDRCxHQUhELEVBR0csQ0FBQ0gsWUFBRCxDQUhIOztBQUlBLFNBQU9ELFFBQVA7QUFDRCxDQU5EOztBQVFBLElBQU1TLEtBQUssR0FBRztBQUNaQyxFQUFBQSxRQUFRLEVBQVJBLGVBRFk7QUFFWkMsRUFBQUEsTUFBTSxFQUFOQSxRQUZZO0FBR1pDLEVBQUFBLGFBQWEsRUFBYkEsZUFIWTtBQUlaQyxFQUFBQSxnQkFBZ0IsRUFBaEJBLGtCQUpZO0FBS1pDLEVBQUFBLFFBQVEsRUFBUkEsZUFMWTtBQU1aQyxFQUFBQSxNQUFNLEVBQU5BLGFBTlk7QUFPWkMsRUFBQUEsYUFBYSxFQUFiQSxvQkFQWTtBQVFaQyxFQUFBQSxPQUFPLEVBQVBBLGNBUlk7QUFTWmxCLEVBQUFBLElBQUksRUFBSkE7QUFUWSxDQUFkO0FBWUFtQixRQUFRLENBQUMsUUFBRCxFQUFXLFlBQU07QUFDdkIsOEJBQWdCO0FBQUNDLElBQUFBLFFBQVEsRUFBUkEsa0JBQUQ7QUFBV1YsSUFBQUEsS0FBSyxFQUFMQTtBQUFYLEdBQWhCO0FBQ0EsOEJBQWdCO0FBQUNVLElBQUFBLFFBQVEsRUFBRUMsc0JBQVg7QUFBNEJYLElBQUFBLEtBQUssRUFBTEE7QUFBNUIsR0FBaEI7QUFFQVksRUFBQUEsRUFBRSxDQUFDLG9EQUFELEVBQXVELFlBQU07QUFDN0QsUUFBTUMsTUFBTSxHQUFHLGtDQUNiLGdDQUFDLFFBQUQsUUFDRSwrREFERixDQURhLENBQWY7QUFLQUMsSUFBQUEsTUFBTSxDQUFDRCxNQUFELENBQU4sQ0FBZUUsU0FBZixDQUF5QixtQkFBekI7QUFDRCxHQVBDLENBQUYsQ0FKdUIsQ0FhdkI7O0FBQ0FILEVBQUFBLEVBQUUsQ0FBQywyQkFBRCxFQUE4QixZQUFNO0FBQ3BDRSxJQUFBQSxNQUFNLENBQUMsWUFBTTtBQUNYLHFDQUFhckIsa0JBQU11QixhQUFOLENBQW9CZCxRQUFwQixFQUE0QixFQUE1QixDQUFiO0FBQ0QsS0FGSyxDQUFOLENBRUdlLEdBRkgsQ0FFT0MsT0FGUDtBQUdELEdBSkMsQ0FBRjtBQU1BTixFQUFBQSxFQUFFLENBQUMsMENBQUQsRUFBNkMsWUFBTTtBQUNuREUsSUFBQUEsTUFBTSxDQUFDLFlBQU07QUFDWCxxQ0FBYSxnQ0FBQyxRQUFELGdCQUFiO0FBQ0QsS0FGSyxDQUFOLENBRUdHLEdBRkgsQ0FFT0MsT0FGUDtBQUdELEdBSkMsQ0FBRjtBQU1BTixFQUFBQSxFQUFFLENBQUMsc0NBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQSwrQkFBeUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ25DTyxZQUFBQSxPQURtQyxHQUN6QiwrQkFDZCxnQ0FBQyxRQUFEO0FBQVEsY0FBQSxLQUFLLEVBQUM7QUFBZCxlQUNFLGdDQUFDLGVBQUQsNEJBREYsRUFFRSxnQ0FBQyxlQUFELDJDQUZGLENBRGMsQ0FEeUI7QUFBQTtBQUFBLG1CQU9wQixrQkFBSUEsT0FBSixDQVBvQjs7QUFBQTtBQU9uQ04sWUFBQUEsTUFQbUM7QUFRekNDLFlBQUFBLE1BQU0sQ0FBQ0QsTUFBRCxDQUFOLENBQWVPLGtCQUFmOztBQVJ5QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUF6QyxHQUFGO0FBV0FYLEVBQUFBLFFBQVEsQ0FBQyxjQUFELEVBQWlCLFlBQU07QUFDN0IsUUFBSUksTUFBSjtBQUNBUSxJQUFBQSxVQUFVLENBQUMsWUFBTTtBQUNmUixNQUFBQSxNQUFNLEdBQUcsK0JBQ1AsZ0NBQUMsUUFBRDtBQUFRLHFCQUFVO0FBQWxCLFNBQ0UsZ0NBQUMsZUFBRCxrQkFERixDQURPLENBQVQ7QUFLRCxLQU5TLENBQVY7QUFPQUQsSUFBQUEsRUFBRSxDQUFDLHVDQUFELEVBQTBDLFlBQU07QUFDaERFLE1BQUFBLE1BQU0sQ0FBQ0QsTUFBRCxDQUFOLENBQWVFLFNBQWYsQ0FBeUIsOEJBQXpCO0FBQ0QsS0FGQyxDQUFGO0FBR0QsR0FaTyxDQUFSO0FBYUQsQ0FsRE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2F4ZX0gZnJvbSAnamVzdC1heGUnO1xuaW1wb3J0IHt2aXN1YWxTbmFwc2hvdHN9IGZyb20gJ3Nvc2lhJztcbmltcG9ydCB7cmVuZGVyVG9TdGF0aWNNYXJrdXB9IGZyb20gJ3JlYWN0LWRvbS9zZXJ2ZXInO1xuaW1wb3J0IHtmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IHtFekNhcmQsIEV6Q2FyZFNlY3Rpb24sIEV6Q2FyZEV4cGFuZGFibGV9IGZyb20gJy4uJztcbmltcG9ydCB7cmVuZGVyVG9IdG1sfSBmcm9tICcuLi8uLi8uLi9qZXN0LWdsb2JhbHMnO1xuaW1wb3J0IHJlZ3Jlc3Npb25UZXN0cyBmcm9tICcuL0V6Q2FyZC50ZXN0Lm1kJztcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLi9FekNhcmQubWQnO1xuaW1wb3J0IHtFelBhZ2UsIEV6UGFnZVNlY3Rpb24sIEV6TGF5b3V0LCBFekJ1dHRvbiwgRXpGaWVsZH0gZnJvbSAnLi4vLi4vaW5kZXgnO1xuXG5jb25zdCBPcGVuID0gKHtjaGlsZHJlbiwgY29udGFpbmVyUmVmfSkgPT4ge1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGlucHV0ID0gY29udGFpbmVyUmVmLmN1cnJlbnQucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgICBmaXJlRXZlbnQubW91c2VEb3duKGlucHV0KTtcbiAgfSwgW2NvbnRhaW5lclJlZl0pO1xuICByZXR1cm4gY2hpbGRyZW47XG59O1xuXG5jb25zdCBzY29wZSA9IHtcbiAgRXpCdXR0b24sXG4gIEV6Q2FyZCxcbiAgRXpDYXJkU2VjdGlvbixcbiAgRXpDYXJkRXhwYW5kYWJsZSxcbiAgRXpMYXlvdXQsXG4gIEV6UGFnZSxcbiAgRXpQYWdlU2VjdGlvbixcbiAgRXpGaWVsZCxcbiAgT3Blbixcbn07XG5cbmRlc2NyaWJlKCdFekNhcmQnLCAoKSA9PiB7XG4gIHZpc3VhbFNuYXBzaG90cyh7bWFya2Rvd24sIHNjb3BlfSk7XG4gIHZpc3VhbFNuYXBzaG90cyh7bWFya2Rvd246IHJlZ3Jlc3Npb25UZXN0cywgc2NvcGV9KTtcblxuICBpdCgnc2hvdWxkIE5PVCB0aHJvdyBpZiBubyBUaGVtZVByb3ZpZGVyIGlzIGNvbmZpZ3VyZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgYWN0dWFsID0gcmVuZGVyVG9TdGF0aWNNYXJrdXAoXG4gICAgICA8RXpDYXJkPlxuICAgICAgICA8cD5Mb3JlbSBpcHN1bSBkb2xvcjwvcD5cbiAgICAgIDwvRXpDYXJkPlxuICAgICk7XG4gICAgZXhwZWN0KGFjdHVhbCkudG9Db250YWluKCdMb3JlbSBpcHN1bSBkb2xvcicpO1xuICB9KTtcblxuICAvLyBCbG93aW5nIHVwIHdoZW4gZW1wdHkgYnJlYWtzIHRoZSBsaXZlLXJlbG9hZCBkZXYgZXhwZXJpZW5jZVxuICBpdCgnc2hvdWxkIE5PVCB0aHJvdyBpZiBlbXB0eScsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgcmVuZGVyVG9IdG1sKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRXpDYXJkLCB7fSBhcyBhbnkpKTtcbiAgICB9KS5ub3QudG9UaHJvdygpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIE5PVCB0aHJvdyBmb3Igc2ltcGxlIHRleHQgY29udGVudCcsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgcmVuZGVyVG9IdG1sKDxFekNhcmQ+aGVsbG88L0V6Q2FyZD4pO1xuICAgIH0pLm5vdC50b1Rocm93KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbWVldCBhY2Nlc3NpYmlsaXR5IGd1aWRlbGluZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlciA9IHJlbmRlclRvSHRtbChcbiAgICAgIDxFekNhcmQgdGl0bGU9XCJDYXJkIEhlYWRpbmdcIj5cbiAgICAgICAgPEV6Q2FyZFNlY3Rpb24+TG9yZW0gaXBzdW0gZG9sb3I8L0V6Q2FyZFNlY3Rpb24+XG4gICAgICAgIDxFekNhcmRTZWN0aW9uPnNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nPC9FekNhcmRTZWN0aW9uPlxuICAgICAgPC9FekNhcmQ+XG4gICAgKTtcbiAgICBjb25zdCBhY3R1YWwgPSBhd2FpdCBheGUod3JhcHBlcik7XG4gICAgZXhwZWN0KGFjdHVhbCkudG9IYXZlTm9WaW9sYXRpb25zKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdkYXRhLSogcHJvcHMnLCAoKSA9PiB7XG4gICAgbGV0IGFjdHVhbDtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGFjdHVhbCA9IHJlbmRlclRvSHRtbChcbiAgICAgICAgPEV6Q2FyZCBkYXRhLXRlc3Q9XCJteS10ZXN0LXNlbGVjdG9yXCI+XG4gICAgICAgICAgPEV6Q2FyZFNlY3Rpb24+Y29udGVudDwvRXpDYXJkU2VjdGlvbj5cbiAgICAgICAgPC9FekNhcmQ+XG4gICAgICApO1xuICAgIH0pO1xuICAgIGl0KCdyZW5kZXJzIHZhbGlkIHByb3BzIGZvciBodG1sIGVsZW1lbnRzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGFjdHVhbCkudG9Db250YWluKCdkYXRhLXRlc3Q9XCJteS10ZXN0LXNlbGVjdG9yXCInKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==