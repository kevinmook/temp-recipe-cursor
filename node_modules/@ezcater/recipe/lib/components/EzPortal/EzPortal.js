"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.PortalContext = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var PortalContext = _react["default"].createContext({
  current: null
});

exports.PortalContext = PortalContext;
var Provider = PortalContext.Provider;

var EzPortal = function EzPortal(_ref) {
  var children = _ref.children;
  var mountNode = (0, _react.useRef)(null);

  var _useContext = (0, _react.useContext)(PortalContext),
      contextValue = _useContext.current;

  var contextRef = (0, _react.useRef)(contextValue);

  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      hostNode = _useState2[0],
      setHostNode = _useState2[1]; // because it's possible to render portals within iframes, we need to ensure that we can
  // mount the portal to the correct document element. To do this, we initially mount any
  // DOM element and derive it's ownerDocument. This document represents the iframe the
  // mounted DOM element resides within. We can then render the portal inside this document.
  //
  // Because we can also nest portals, we also need to nest the portalled children within
  // portalled parent.


  (0, _react.useLayoutEffect)(function () {
    // if the context element and the currently mounted element have the same document (i.e.
    // they're in the same iframe or parent window), we can use the context element to
    // nest our new content. Otherwise, we have to use the mounted element to determine
    // the current ownerDocument (iframed content) to ensure the portal renders to the
    // correct document.
    var context = contextRef.current;
    var parentElement = mountNode.current.ownerDocument === (context === null || context === void 0 ? void 0 : context.ownerDocument) ? context : mountNode.current.ownerDocument.body;
    var ownerDocument = parentElement.ownerDocument;
    var portalNode = ownerDocument.createElement('div'); // insert the new container for the portalled content

    parentElement.appendChild(portalNode);
    setHostNode(portalNode);
    return function () {
      if (!parentElement.parentElement || !parentElement.contains(portalNode)) return;
      parentElement.removeChild(portalNode);
    };
  }, []);
  if (!hostNode) return _react["default"].createElement("div", {
    ref: mountNode
  });
  return _react["default"].createElement(Provider, {
    value: {
      current: hostNode
    }
  }, (0, _reactDom.createPortal)(children, hostNode));
};

var _default = EzPortal;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0V6UG9ydGFsL0V6UG9ydGFsLnRzeCJdLCJuYW1lcyI6WyJQb3J0YWxDb250ZXh0IiwiUmVhY3QiLCJjcmVhdGVDb250ZXh0IiwiY3VycmVudCIsIlByb3ZpZGVyIiwiRXpQb3J0YWwiLCJjaGlsZHJlbiIsIm1vdW50Tm9kZSIsImNvbnRleHRWYWx1ZSIsImNvbnRleHRSZWYiLCJob3N0Tm9kZSIsInNldEhvc3ROb2RlIiwiY29udGV4dCIsInBhcmVudEVsZW1lbnQiLCJvd25lckRvY3VtZW50IiwiYm9keSIsInBvcnRhbE5vZGUiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJjb250YWlucyIsInJlbW92ZUNoaWxkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRU8sSUFBTUEsYUFBYSxHQUFHQyxrQkFBTUMsYUFBTixDQUFnRTtBQUMzRkMsRUFBQUEsT0FBTyxFQUFFO0FBRGtGLENBQWhFLENBQXRCOzs7SUFJQUMsUSxHQUFZSixhLENBQVpJLFE7O0FBRVAsSUFBTUMsUUFBK0IsR0FBRyxTQUFsQ0EsUUFBa0MsT0FBZ0I7QUFBQSxNQUFkQyxRQUFjLFFBQWRBLFFBQWM7QUFDdEQsTUFBTUMsU0FBUyxHQUFHLG1CQUE4QixJQUE5QixDQUFsQjs7QUFEc0Qsb0JBRXRCLHVCQUFXUCxhQUFYLENBRnNCO0FBQUEsTUFFdENRLFlBRnNDLGVBRS9DTCxPQUYrQzs7QUFHdEQsTUFBTU0sVUFBVSxHQUFHLG1CQUEyQkQsWUFBM0IsQ0FBbkI7O0FBSHNELGtCQUl0QixxQkFBUyxJQUFULENBSnNCO0FBQUE7QUFBQSxNQUkvQ0UsUUFKK0M7QUFBQSxNQUlyQ0MsV0FKcUMsa0JBTXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSw4QkFBZ0IsWUFBTTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTG9CLFFBTUpDLE9BTkksR0FNT0gsVUFOUCxDQU1iTixPQU5hO0FBT3BCLFFBQU1VLGFBQWEsR0FDakJOLFNBQVMsQ0FBQ0osT0FBVixDQUFrQlcsYUFBbEIsTUFBb0NGLE9BQXBDLGFBQW9DQSxPQUFwQyx1QkFBb0NBLE9BQU8sQ0FBRUUsYUFBN0MsSUFDSUYsT0FESixHQUVJTCxTQUFTLENBQUNKLE9BQVYsQ0FBa0JXLGFBQWxCLENBQWdDQyxJQUh0QztBQVBvQixRQVliRCxhQVphLEdBWUlELGFBWkosQ0FZYkMsYUFaYTtBQWFwQixRQUFNRSxVQUFVLEdBQUdGLGFBQWEsQ0FBQ0csYUFBZCxDQUE0QixLQUE1QixDQUFuQixDQWJvQixDQWVwQjs7QUFDQUosSUFBQUEsYUFBYSxDQUFDSyxXQUFkLENBQTBCRixVQUExQjtBQUNBTCxJQUFBQSxXQUFXLENBQUNLLFVBQUQsQ0FBWDtBQUVBLFdBQU8sWUFBTTtBQUNYLFVBQUksQ0FBQ0gsYUFBYSxDQUFDQSxhQUFmLElBQWdDLENBQUNBLGFBQWEsQ0FBQ00sUUFBZCxDQUF1QkgsVUFBdkIsQ0FBckMsRUFBeUU7QUFDekVILE1BQUFBLGFBQWEsQ0FBQ08sV0FBZCxDQUEwQkosVUFBMUI7QUFDRCxLQUhEO0FBSUQsR0F2QkQsRUF1QkcsRUF2Qkg7QUF5QkEsTUFBSSxDQUFDTixRQUFMLEVBQWUsT0FBTztBQUFLLElBQUEsR0FBRyxFQUFFSDtBQUFWLElBQVA7QUFFZixTQUFPLGdDQUFDLFFBQUQ7QUFBVSxJQUFBLEtBQUssRUFBRTtBQUFDSixNQUFBQSxPQUFPLEVBQUVPO0FBQVY7QUFBakIsS0FBdUMsNEJBQWFKLFFBQWIsRUFBdUJJLFFBQXZCLENBQXZDLENBQVA7QUFDRCxDQXpDRDs7ZUErQ2VMLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHt1c2VMYXlvdXRFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUsIHVzZUNvbnRleHR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Y3JlYXRlUG9ydGFsfSBmcm9tICdyZWFjdC1kb20nO1xuXG5leHBvcnQgY29uc3QgUG9ydGFsQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8UmVhY3QuTXV0YWJsZVJlZk9iamVjdDxIVE1MRWxlbWVudCB8IG51bGw+Pih7XG4gIGN1cnJlbnQ6IG51bGwsXG59KTtcblxuY29uc3Qge1Byb3ZpZGVyfSA9IFBvcnRhbENvbnRleHQ7XG5cbmNvbnN0IEV6UG9ydGFsOiBSZWFjdC5GQzxQb3J0YWxQcm9wcz4gPSAoe2NoaWxkcmVufSkgPT4ge1xuICBjb25zdCBtb3VudE5vZGUgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQgfCBudWxsPihudWxsKTtcbiAgY29uc3Qge2N1cnJlbnQ6IGNvbnRleHRWYWx1ZX0gPSB1c2VDb250ZXh0KFBvcnRhbENvbnRleHQpO1xuICBjb25zdCBjb250ZXh0UmVmID0gdXNlUmVmPEhUTUxFbGVtZW50IHwgbnVsbD4oY29udGV4dFZhbHVlKTtcbiAgY29uc3QgW2hvc3ROb2RlLCBzZXRIb3N0Tm9kZV0gPSB1c2VTdGF0ZShudWxsKTtcblxuICAvLyBiZWNhdXNlIGl0J3MgcG9zc2libGUgdG8gcmVuZGVyIHBvcnRhbHMgd2l0aGluIGlmcmFtZXMsIHdlIG5lZWQgdG8gZW5zdXJlIHRoYXQgd2UgY2FuXG4gIC8vIG1vdW50IHRoZSBwb3J0YWwgdG8gdGhlIGNvcnJlY3QgZG9jdW1lbnQgZWxlbWVudC4gVG8gZG8gdGhpcywgd2UgaW5pdGlhbGx5IG1vdW50IGFueVxuICAvLyBET00gZWxlbWVudCBhbmQgZGVyaXZlIGl0J3Mgb3duZXJEb2N1bWVudC4gVGhpcyBkb2N1bWVudCByZXByZXNlbnRzIHRoZSBpZnJhbWUgdGhlXG4gIC8vIG1vdW50ZWQgRE9NIGVsZW1lbnQgcmVzaWRlcyB3aXRoaW4uIFdlIGNhbiB0aGVuIHJlbmRlciB0aGUgcG9ydGFsIGluc2lkZSB0aGlzIGRvY3VtZW50LlxuICAvL1xuICAvLyBCZWNhdXNlIHdlIGNhbiBhbHNvIG5lc3QgcG9ydGFscywgd2UgYWxzbyBuZWVkIHRvIG5lc3QgdGhlIHBvcnRhbGxlZCBjaGlsZHJlbiB3aXRoaW5cbiAgLy8gcG9ydGFsbGVkIHBhcmVudC5cbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAvLyBpZiB0aGUgY29udGV4dCBlbGVtZW50IGFuZCB0aGUgY3VycmVudGx5IG1vdW50ZWQgZWxlbWVudCBoYXZlIHRoZSBzYW1lIGRvY3VtZW50IChpLmUuXG4gICAgLy8gdGhleSdyZSBpbiB0aGUgc2FtZSBpZnJhbWUgb3IgcGFyZW50IHdpbmRvdyksIHdlIGNhbiB1c2UgdGhlIGNvbnRleHQgZWxlbWVudCB0b1xuICAgIC8vIG5lc3Qgb3VyIG5ldyBjb250ZW50LiBPdGhlcndpc2UsIHdlIGhhdmUgdG8gdXNlIHRoZSBtb3VudGVkIGVsZW1lbnQgdG8gZGV0ZXJtaW5lXG4gICAgLy8gdGhlIGN1cnJlbnQgb3duZXJEb2N1bWVudCAoaWZyYW1lZCBjb250ZW50KSB0byBlbnN1cmUgdGhlIHBvcnRhbCByZW5kZXJzIHRvIHRoZVxuICAgIC8vIGNvcnJlY3QgZG9jdW1lbnQuXG4gICAgY29uc3Qge2N1cnJlbnQ6IGNvbnRleHR9ID0gY29udGV4dFJlZjtcbiAgICBjb25zdCBwYXJlbnRFbGVtZW50ID1cbiAgICAgIG1vdW50Tm9kZS5jdXJyZW50Lm93bmVyRG9jdW1lbnQgPT09IGNvbnRleHQ/Lm93bmVyRG9jdW1lbnRcbiAgICAgICAgPyBjb250ZXh0XG4gICAgICAgIDogbW91bnROb2RlLmN1cnJlbnQub3duZXJEb2N1bWVudC5ib2R5O1xuXG4gICAgY29uc3Qge293bmVyRG9jdW1lbnR9ID0gcGFyZW50RWxlbWVudDtcbiAgICBjb25zdCBwb3J0YWxOb2RlID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIC8vIGluc2VydCB0aGUgbmV3IGNvbnRhaW5lciBmb3IgdGhlIHBvcnRhbGxlZCBjb250ZW50XG4gICAgcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChwb3J0YWxOb2RlKTtcbiAgICBzZXRIb3N0Tm9kZShwb3J0YWxOb2RlKTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoIXBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudCB8fCAhcGFyZW50RWxlbWVudC5jb250YWlucyhwb3J0YWxOb2RlKSkgcmV0dXJuO1xuICAgICAgcGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChwb3J0YWxOb2RlKTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgaWYgKCFob3N0Tm9kZSkgcmV0dXJuIDxkaXYgcmVmPXttb3VudE5vZGV9IC8+O1xuXG4gIHJldHVybiA8UHJvdmlkZXIgdmFsdWU9e3tjdXJyZW50OiBob3N0Tm9kZX19PntjcmVhdGVQb3J0YWwoY2hpbGRyZW4sIGhvc3ROb2RlKX08L1Byb3ZpZGVyPjtcbn07XG5cbnR5cGUgUG9ydGFsUHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBFelBvcnRhbDtcbiJdfQ==