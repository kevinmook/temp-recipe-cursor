"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _LinkButton = _interopRequireDefault(require("./LinkButton"));

var _ = require("..");

var _Tabs = require("./Tabs");

var _EzPageHeader = require("./EzPageHeader.styles");

var _EzAppLayout = require("../EzAppLayout/EzAppLayout");

var _styled = _interopRequireDefault(require("../../themes/styled"));

var _utils = require("../../utils");

var StyledHeading =
/*#__PURE__*/
(0, _styled["default"])("div", {
  target: "e2x45wq0"
})(_EzPageHeader.base);
var StyledActions =
/*#__PURE__*/
(0, _styled["default"])("div", {
  target: "e2x45wq1"
})(_EzPageHeader.actions);

var handleKeyDown = function handleKeyDown(refs, _ref) {
  var tabs = _ref.tabs,
      selected = _ref.selected;
  return function (event) {
    var selectedIndex = selected ? tabs.findIndex(function (link) {
      return link === selected;
    }) : 0;
    var count = tabs.length;
    var nextIndex;

    switch (event.key) {
      case 'ArrowDown':
      case 'ArrowRight':
        {
          nextIndex = (selectedIndex + 1) % count;
          break;
        }

      case 'ArrowUp':
      case 'ArrowLeft':
        {
          nextIndex = (selectedIndex - 1 + count) % count;
          break;
        }

      default:
        break;
    }

    if (nextIndex === undefined) return;
    var el = refs[nextIndex];
    el.current.click();
    el.current.focus();
  };
};
/**
 * EzPageHeader is used to build the outer structure of a page including the page title and associated actions.
 */


var EzPageHeader = function EzPageHeader(_ref2) {
  var actions = _ref2.actions,
      breadcrumb = _ref2.breadcrumb,
      status = _ref2.status,
      title = _ref2.title,
      subnav = _ref2.subnav;
  var refs = (0, _react.useRef)(subnav && subnav.tabs.map(function () {
    return (0, _react.createRef)();
  })).current;
  var selected = subnav && subnav.selected;
  return _react["default"].createElement(StyledHeading, {
    subnav: subnav
  }, _react["default"].createElement(_EzAppLayout.MaxWidth, null, _react["default"].createElement(_.EzLayout, {
    layout: {
      base: 'stack',
      medium: 'equal'
    }
  }, _react["default"].createElement("div", null, breadcrumb && _react["default"].createElement(_LinkButton["default"], (0, _extends2["default"])({}, breadcrumb, {
    label: "\u2190 ".concat(breadcrumb.label)
  })), _react["default"].createElement(_.EzLayout, {
    layout: {
      base: 'stack',
      medium: 'basic'
    }
  }, _react["default"].createElement(_.EzHeading, {
    size: "1"
  }, title), _react["default"].createElement("div", null, status))), actions && _react["default"].createElement(StyledActions, null, actions))), subnav && _react["default"].createElement(_EzAppLayout.MaxWidth, null, _react["default"].createElement(_Tabs.TabList, {
    onKeyDown: handleKeyDown(refs, subnav)
  }, subnav.tabs.map(function (tab, i) {
    return _react["default"].createElement(_Tabs.Tab, (0, _extends2["default"])({
      ref: refs[i],
      key: tab.label,
      tabIndex: !selected && i === 0 || selected === tab ? 0 : -1,
      active: selected === tab
    }, tab, {
      onClick: (0, _utils.wrapEvent)(tab.onClick, function () {
        return subnav.onChange && subnav.onChange(tab);
      })
    }));
  }))));
};
/**
 * @component
 */


var _default = EzPageHeader;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,