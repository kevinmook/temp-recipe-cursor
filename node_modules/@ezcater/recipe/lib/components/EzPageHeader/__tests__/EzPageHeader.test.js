"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireDefault(require("react"));

var _jestAxe = require("jest-axe");

var _sosia = require("sosia");

var _reactRouterDom = require("react-router-dom");

var _react2 = require("@testing-library/react");

var _EzPageHeader = _interopRequireDefault(require("../EzPageHeader.md"));

var _EzPageHeader2 = _interopRequireDefault(require("../EzPageHeader"));

var _index = require("../../index");

var _jestGlobals = require("../../../jest-globals");

afterEach(_react2.cleanup);

var mockRequire = function mockRequire() {
  return {
    Link: _reactRouterDom.Link,
    BrowserRouter: function BrowserRouter(_ref) {
      var children = _ref.children;
      return _react["default"].createElement(_reactRouterDom.StaticRouter, {
        context: {},
        location: "/components/ez-page-header/"
      }, children);
    },
    Route: _reactRouterDom.Route
  };
};

var scope = {
  EzPageHeader: _EzPageHeader2["default"],
  EzStatus: _index.EzStatus,
  EzButton: _index.EzButton,
  EzCard: _index.EzCard,
  EzLayout: _index.EzLayout,
  EzPage: _index.EzPage,
  require: mockRequire
};
describe('EzPageHeader', function () {
  (0, _sosia.visualSnapshots)({
    markdown: _EzPageHeader["default"],
    scope: scope
  });
  it('should cycle through the tabs', function () {
    var tabs = [{
      label: 'All'
    }, {
      label: 'Accepted'
    }, {
      label: 'Draft'
    }];
    var onChange = jest.fn();

    var _fullRender = (0, _jestGlobals.fullRender)(_react["default"].createElement(function () {
      var _React$useState = _react["default"].useState(tabs[1]),
          _React$useState2 = (0, _slicedToArray2["default"])(_React$useState, 2),
          selected = _React$useState2[0],
          setSelected = _React$useState2[1];

      onChange.mockImplementation(setSelected);
      return _react["default"].createElement(_EzPageHeader2["default"], {
        title: "Order # XYZ-123",
        subnav: {
          tabs: tabs,
          selected: selected,
          onChange: onChange
        }
      });
    })),
        getByText = _fullRender.getByText;

    var allTab = getByText('Accepted'); // test arrow left selects previous tab

    _react2.fireEvent.keyDown(allTab, {
      key: 'ArrowLeft',
      code: 27
    });

    expect(onChange).toHaveBeenLastCalledWith(tabs[0]);
    onChange.mockClear(); // test arrow left cycles back to last tab in the list

    _react2.fireEvent.keyDown(allTab, {
      key: 'ArrowLeft',
      code: 27
    });

    expect(onChange).toHaveBeenLastCalledWith(tabs[2]); // test arrow up also selects previous tab

    _react2.fireEvent.keyDown(allTab, {
      key: 'ArrowUp',
      code: 24
    });

    expect(onChange).toHaveBeenLastCalledWith(tabs[1]); // test arrow right selects next tab

    _react2.fireEvent.keyDown(allTab, {
      key: 'ArrowRight',
      code: 26
    });

    expect(onChange).toHaveBeenLastCalledWith(tabs[2]); // test arrow right cycles back to first tab in the list

    _react2.fireEvent.keyDown(allTab, {
      key: 'ArrowRight',
      code: 26
    });

    expect(onChange).toHaveBeenLastCalledWith(tabs[0]); // test arrow down also selects next tab

    _react2.fireEvent.keyDown(allTab, {
      key: 'ArrowDown',
      code: 25
    });

    expect(onChange).toHaveBeenLastCalledWith(tabs[1]); // test that other key presses don't change the current tab

    onChange.mockClear();

    _react2.fireEvent.keyDown(allTab, {
      key: 'Enter',
      code: 13
    });

    expect(onChange).not.toHaveBeenCalled();
  });
  it('should cycle from the focused tab to the next tab if no tab is currently selected', function () {
    var tabs = [{
      label: 'All'
    }, {
      label: 'Accepted'
    }, {
      label: 'Draft'
    }];
    var onChange = jest.fn();

    var _fullRender2 = (0, _jestGlobals.fullRender)(_react["default"].createElement(function () {
      var _React$useState3 = _react["default"].useState(null),
          _React$useState4 = (0, _slicedToArray2["default"])(_React$useState3, 2),
          selected = _React$useState4[0],
          setSelected = _React$useState4[1];

      onChange.mockImplementation(setSelected);
      return _react["default"].createElement(_EzPageHeader2["default"], {
        title: "Order # XYZ-123",
        subnav: {
          tabs: tabs,
          selected: selected,
          onChange: onChange
        }
      });
    })),
        getByText = _fullRender2.getByText;

    var allTab = getByText('All');
    allTab.focus();

    _react2.fireEvent.keyDown(allTab, {
      key: 'ArrowRight',
      code: 26
    });

    expect(onChange).toHaveBeenLastCalledWith(tabs[1]);
  });
  it('should meet accessibility guidelines',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee() {
    var tabs, wrapper, actual;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            tabs = [{
              label: 'All'
            }, {
              label: 'Accepted'
            }, {
              label: 'Draft'
            }];
            wrapper = (0, _jestGlobals.renderToHtml)(_react["default"].createElement(_EzPageHeader2["default"], {
              title: "Order # XYZ-123",
              breadcrumb: {
                label: 'Back to Orders',
                onClick: function onClick() {}
              },
              status: _react["default"].createElement(_index.EzStatus, {
                text: "Verified",
                use: "success"
              }),
              subnav: {
                tabs: tabs,
                selected: tabs[0],
                onChange: function onChange() {}
              },
              actions: _react["default"].createElement(_index.EzButton, {
                use: "primary"
              }, "Accept Order")
            }));
            _context.next = 4;
            return (0, _jestAxe.axe)(wrapper);

          case 4:
            actual = _context.sent;
            expect(actual).toHaveNoViolations();

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,