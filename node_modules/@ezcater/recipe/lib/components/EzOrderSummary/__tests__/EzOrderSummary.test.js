"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _jestAxe = require("jest-axe");

var _sosia = require("sosia");

var _EzOrderSummary = _interopRequireDefault(require("../EzOrderSummary.md"));

var _EzOrderSummary2 = _interopRequireDefault(require("../EzOrderSummary"));

var _index = require("../../index");

var _jestGlobals = require("../../../jest-globals");

var scope = {
  EzButton: _index.EzButton,
  EzPage: _index.EzPage,
  EzOrderSummary: _EzOrderSummary2["default"]
};
describe('EzOrderSummary', function () {
  (0, _sosia.visualSnapshots)({
    markdown: _EzOrderSummary["default"],
    scope: scope
  });
  it('should meet accessibility guidelines',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee() {
    var wrapper, actual;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            wrapper = (0, _jestGlobals.renderToHtml)(_react["default"].createElement(_EzOrderSummary2["default"], {
              title: "Required heading",
              subtitle: "Optional subtitle",
              items: [{
                name: 'Build-Your-Own Chicken Hot Buffet',
                price: '$10.29',
                quantity: 54,
                total: '$178.92',
                options: [{
                  label: 'Chicken Type',
                  value: 'Original Rotisserie'
                }, {
                  label: 'Sides',
                  value: 'Mac & Cheese, Mashed Potatoes & Gravy'
                }, {
                  label: 'Add',
                  value: '14 x Green Beans @ $2.49'
                }]
              }, {
                name: 'Make-Your-Own Bowl',
                price: '$120.00',
                quantity: 2,
                total: '$240.00',
                options: [{
                  label: 'Base',
                  value: 'Vermicelli Noodles'
                }, {
                  label: 'Proteins',
                  value: 'Ginger-Curry Chicken, Ginger-Curry Tofu'
                }, {
                  label: 'Dressings',
                  value: 'Ginger Miso Dressing'
                }, {
                  label: 'This group includes',
                  value: '4 Vegetarians'
                }]
              }, {
                name: 'Caesar Salad w/ Chicken',
                price: '$34.99',
                quantity: 1,
                total: '$34.99',
                specialInstructions: 'Salad dressing and croutons on the side please!'
              }, {
                name: 'Chocolate Chunk Cookies',
                price: '$1.29',
                quantity: 14,
                total: '$18.06'
              }],
              tableware: {
                options: [{
                  label: 'Include',
                  value: 'Cups, Napkins, Plates, Utensils'
                }]
              },
              summary: {
                lineItems: [{
                  label: 'Subtotal',
                  value: '$471.97'
                }, {
                  label: 'Delivery Fee',
                  value: '$20.00'
                }, {
                  label: 'ezRewards Promo',
                  value: '-$15.00'
                }, {
                  label: '7.0% Sales Tax',
                  value: '$33.04'
                }],
                total: '$510.01'
              }
            }));
            _context.next = 3;
            return (0, _jestAxe.axe)(wrapper);

          case 3:
            actual = _context.sent;
            expect(actual).toHaveNoViolations();

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0V6T3JkZXJTdW1tYXJ5L19fdGVzdHNfXy9Fek9yZGVyU3VtbWFyeS50ZXN0LnRzeCJdLCJuYW1lcyI6WyJzY29wZSIsIkV6QnV0dG9uIiwiRXpQYWdlIiwiRXpPcmRlclN1bW1hcnkiLCJkZXNjcmliZSIsIm1hcmtkb3duIiwiaXQiLCJ3cmFwcGVyIiwibmFtZSIsInByaWNlIiwicXVhbnRpdHkiLCJ0b3RhbCIsIm9wdGlvbnMiLCJsYWJlbCIsInZhbHVlIiwic3BlY2lhbEluc3RydWN0aW9ucyIsImxpbmVJdGVtcyIsImFjdHVhbCIsImV4cGVjdCIsInRvSGF2ZU5vVmlvbGF0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFNQSxLQUFLLEdBQUc7QUFBQ0MsRUFBQUEsUUFBUSxFQUFSQSxlQUFEO0FBQVdDLEVBQUFBLE1BQU0sRUFBTkEsYUFBWDtBQUFtQkMsRUFBQUEsY0FBYyxFQUFkQTtBQUFuQixDQUFkO0FBRUFDLFFBQVEsQ0FBQyxnQkFBRCxFQUFtQixZQUFNO0FBQy9CLDhCQUFnQjtBQUFDQyxJQUFBQSxRQUFRLEVBQVJBLDBCQUFEO0FBQVdMLElBQUFBLEtBQUssRUFBTEE7QUFBWCxHQUFoQjtBQUVBTSxFQUFBQSxFQUFFLENBQUMsc0NBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQSwrQkFBeUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ25DQyxZQUFBQSxPQURtQyxHQUN6QiwrQkFDZCxnQ0FBQywyQkFBRDtBQUNFLGNBQUEsS0FBSyxFQUFDLGtCQURSO0FBRUUsY0FBQSxRQUFRLEVBQUMsbUJBRlg7QUFHRSxjQUFBLEtBQUssRUFBRSxDQUNMO0FBQ0VDLGdCQUFBQSxJQUFJLEVBQUUsbUNBRFI7QUFFRUMsZ0JBQUFBLEtBQUssRUFBRSxRQUZUO0FBR0VDLGdCQUFBQSxRQUFRLEVBQUUsRUFIWjtBQUlFQyxnQkFBQUEsS0FBSyxFQUFFLFNBSlQ7QUFLRUMsZ0JBQUFBLE9BQU8sRUFBRSxDQUNQO0FBQUNDLGtCQUFBQSxLQUFLLEVBQUUsY0FBUjtBQUF3QkMsa0JBQUFBLEtBQUssRUFBRTtBQUEvQixpQkFETyxFQUVQO0FBQUNELGtCQUFBQSxLQUFLLEVBQUUsT0FBUjtBQUFpQkMsa0JBQUFBLEtBQUssRUFBRTtBQUF4QixpQkFGTyxFQUdQO0FBQUNELGtCQUFBQSxLQUFLLEVBQUUsS0FBUjtBQUFlQyxrQkFBQUEsS0FBSyxFQUFFO0FBQXRCLGlCQUhPO0FBTFgsZUFESyxFQVlMO0FBQ0VOLGdCQUFBQSxJQUFJLEVBQUUsb0JBRFI7QUFFRUMsZ0JBQUFBLEtBQUssRUFBRSxTQUZUO0FBR0VDLGdCQUFBQSxRQUFRLEVBQUUsQ0FIWjtBQUlFQyxnQkFBQUEsS0FBSyxFQUFFLFNBSlQ7QUFLRUMsZ0JBQUFBLE9BQU8sRUFBRSxDQUNQO0FBQUNDLGtCQUFBQSxLQUFLLEVBQUUsTUFBUjtBQUFnQkMsa0JBQUFBLEtBQUssRUFBRTtBQUF2QixpQkFETyxFQUVQO0FBQUNELGtCQUFBQSxLQUFLLEVBQUUsVUFBUjtBQUFvQkMsa0JBQUFBLEtBQUssRUFBRTtBQUEzQixpQkFGTyxFQUdQO0FBQUNELGtCQUFBQSxLQUFLLEVBQUUsV0FBUjtBQUFxQkMsa0JBQUFBLEtBQUssRUFBRTtBQUE1QixpQkFITyxFQUlQO0FBQUNELGtCQUFBQSxLQUFLLEVBQUUscUJBQVI7QUFBK0JDLGtCQUFBQSxLQUFLLEVBQUU7QUFBdEMsaUJBSk87QUFMWCxlQVpLLEVBd0JMO0FBQ0VOLGdCQUFBQSxJQUFJLEVBQUUseUJBRFI7QUFFRUMsZ0JBQUFBLEtBQUssRUFBRSxRQUZUO0FBR0VDLGdCQUFBQSxRQUFRLEVBQUUsQ0FIWjtBQUlFQyxnQkFBQUEsS0FBSyxFQUFFLFFBSlQ7QUFLRUksZ0JBQUFBLG1CQUFtQixFQUFFO0FBTHZCLGVBeEJLLEVBK0JMO0FBQ0VQLGdCQUFBQSxJQUFJLEVBQUUseUJBRFI7QUFFRUMsZ0JBQUFBLEtBQUssRUFBRSxPQUZUO0FBR0VDLGdCQUFBQSxRQUFRLEVBQUUsRUFIWjtBQUlFQyxnQkFBQUEsS0FBSyxFQUFFO0FBSlQsZUEvQkssQ0FIVDtBQXlDRSxjQUFBLFNBQVMsRUFBRTtBQUNUQyxnQkFBQUEsT0FBTyxFQUFFLENBQUM7QUFBQ0Msa0JBQUFBLEtBQUssRUFBRSxTQUFSO0FBQW1CQyxrQkFBQUEsS0FBSyxFQUFFO0FBQTFCLGlCQUFEO0FBREEsZUF6Q2I7QUE0Q0UsY0FBQSxPQUFPLEVBQUU7QUFDUEUsZ0JBQUFBLFNBQVMsRUFBRSxDQUNUO0FBQUNILGtCQUFBQSxLQUFLLEVBQUUsVUFBUjtBQUFvQkMsa0JBQUFBLEtBQUssRUFBRTtBQUEzQixpQkFEUyxFQUVUO0FBQUNELGtCQUFBQSxLQUFLLEVBQUUsY0FBUjtBQUF3QkMsa0JBQUFBLEtBQUssRUFBRTtBQUEvQixpQkFGUyxFQUdUO0FBQUNELGtCQUFBQSxLQUFLLEVBQUUsaUJBQVI7QUFBMkJDLGtCQUFBQSxLQUFLLEVBQUU7QUFBbEMsaUJBSFMsRUFJVDtBQUFDRCxrQkFBQUEsS0FBSyxFQUFFLGdCQUFSO0FBQTBCQyxrQkFBQUEsS0FBSyxFQUFFO0FBQWpDLGlCQUpTLENBREo7QUFPUEgsZ0JBQUFBLEtBQUssRUFBRTtBQVBBO0FBNUNYLGNBRGMsQ0FEeUI7QUFBQTtBQUFBLG1CQXlEcEIsa0JBQUlKLE9BQUosQ0F6RG9COztBQUFBO0FBeURuQ1UsWUFBQUEsTUF6RG1DO0FBMER6Q0MsWUFBQUEsTUFBTSxDQUFDRCxNQUFELENBQU4sQ0FBZUUsa0JBQWY7O0FBMUR5QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUF6QyxHQUFGO0FBNERELENBL0RPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtheGV9IGZyb20gJ2plc3QtYXhlJztcbmltcG9ydCB7dmlzdWFsU25hcHNob3RzfSBmcm9tICdzb3NpYSc7XG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi4vRXpPcmRlclN1bW1hcnkubWQnO1xuaW1wb3J0IEV6T3JkZXJTdW1tYXJ5IGZyb20gJy4uL0V6T3JkZXJTdW1tYXJ5JztcbmltcG9ydCB7RXpCdXR0b24sIEV6UGFnZX0gZnJvbSAnLi4vLi4vaW5kZXgnO1xuaW1wb3J0IHtyZW5kZXJUb0h0bWx9IGZyb20gJy4uLy4uLy4uL2plc3QtZ2xvYmFscyc7XG5cbmNvbnN0IHNjb3BlID0ge0V6QnV0dG9uLCBFelBhZ2UsIEV6T3JkZXJTdW1tYXJ5fTtcblxuZGVzY3JpYmUoJ0V6T3JkZXJTdW1tYXJ5JywgKCkgPT4ge1xuICB2aXN1YWxTbmFwc2hvdHMoe21hcmtkb3duLCBzY29wZX0pO1xuXG4gIGl0KCdzaG91bGQgbWVldCBhY2Nlc3NpYmlsaXR5IGd1aWRlbGluZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlciA9IHJlbmRlclRvSHRtbChcbiAgICAgIDxFek9yZGVyU3VtbWFyeVxuICAgICAgICB0aXRsZT1cIlJlcXVpcmVkIGhlYWRpbmdcIlxuICAgICAgICBzdWJ0aXRsZT1cIk9wdGlvbmFsIHN1YnRpdGxlXCJcbiAgICAgICAgaXRlbXM9e1tcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnQnVpbGQtWW91ci1Pd24gQ2hpY2tlbiBIb3QgQnVmZmV0JyxcbiAgICAgICAgICAgIHByaWNlOiAnJDEwLjI5JyxcbiAgICAgICAgICAgIHF1YW50aXR5OiA1NCxcbiAgICAgICAgICAgIHRvdGFsOiAnJDE3OC45MicsXG4gICAgICAgICAgICBvcHRpb25zOiBbXG4gICAgICAgICAgICAgIHtsYWJlbDogJ0NoaWNrZW4gVHlwZScsIHZhbHVlOiAnT3JpZ2luYWwgUm90aXNzZXJpZSd9LFxuICAgICAgICAgICAgICB7bGFiZWw6ICdTaWRlcycsIHZhbHVlOiAnTWFjICYgQ2hlZXNlLCBNYXNoZWQgUG90YXRvZXMgJiBHcmF2eSd9LFxuICAgICAgICAgICAgICB7bGFiZWw6ICdBZGQnLCB2YWx1ZTogJzE0IHggR3JlZW4gQmVhbnMgQCAkMi40OSd9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdNYWtlLVlvdXItT3duIEJvd2wnLFxuICAgICAgICAgICAgcHJpY2U6ICckMTIwLjAwJyxcbiAgICAgICAgICAgIHF1YW50aXR5OiAyLFxuICAgICAgICAgICAgdG90YWw6ICckMjQwLjAwJyxcbiAgICAgICAgICAgIG9wdGlvbnM6IFtcbiAgICAgICAgICAgICAge2xhYmVsOiAnQmFzZScsIHZhbHVlOiAnVmVybWljZWxsaSBOb29kbGVzJ30sXG4gICAgICAgICAgICAgIHtsYWJlbDogJ1Byb3RlaW5zJywgdmFsdWU6ICdHaW5nZXItQ3VycnkgQ2hpY2tlbiwgR2luZ2VyLUN1cnJ5IFRvZnUnfSxcbiAgICAgICAgICAgICAge2xhYmVsOiAnRHJlc3NpbmdzJywgdmFsdWU6ICdHaW5nZXIgTWlzbyBEcmVzc2luZyd9LFxuICAgICAgICAgICAgICB7bGFiZWw6ICdUaGlzIGdyb3VwIGluY2x1ZGVzJywgdmFsdWU6ICc0IFZlZ2V0YXJpYW5zJ30sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ0NhZXNhciBTYWxhZCB3LyBDaGlja2VuJyxcbiAgICAgICAgICAgIHByaWNlOiAnJDM0Ljk5JyxcbiAgICAgICAgICAgIHF1YW50aXR5OiAxLFxuICAgICAgICAgICAgdG90YWw6ICckMzQuOTknLFxuICAgICAgICAgICAgc3BlY2lhbEluc3RydWN0aW9uczogJ1NhbGFkIGRyZXNzaW5nIGFuZCBjcm91dG9ucyBvbiB0aGUgc2lkZSBwbGVhc2UhJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdDaG9jb2xhdGUgQ2h1bmsgQ29va2llcycsXG4gICAgICAgICAgICBwcmljZTogJyQxLjI5JyxcbiAgICAgICAgICAgIHF1YW50aXR5OiAxNCxcbiAgICAgICAgICAgIHRvdGFsOiAnJDE4LjA2JyxcbiAgICAgICAgICB9LFxuICAgICAgICBdfVxuICAgICAgICB0YWJsZXdhcmU9e3tcbiAgICAgICAgICBvcHRpb25zOiBbe2xhYmVsOiAnSW5jbHVkZScsIHZhbHVlOiAnQ3VwcywgTmFwa2lucywgUGxhdGVzLCBVdGVuc2lscyd9XSxcbiAgICAgICAgfX1cbiAgICAgICAgc3VtbWFyeT17e1xuICAgICAgICAgIGxpbmVJdGVtczogW1xuICAgICAgICAgICAge2xhYmVsOiAnU3VidG90YWwnLCB2YWx1ZTogJyQ0NzEuOTcnfSxcbiAgICAgICAgICAgIHtsYWJlbDogJ0RlbGl2ZXJ5IEZlZScsIHZhbHVlOiAnJDIwLjAwJ30sXG4gICAgICAgICAgICB7bGFiZWw6ICdlelJld2FyZHMgUHJvbW8nLCB2YWx1ZTogJy0kMTUuMDAnfSxcbiAgICAgICAgICAgIHtsYWJlbDogJzcuMCUgU2FsZXMgVGF4JywgdmFsdWU6ICckMzMuMDQnfSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIHRvdGFsOiAnJDUxMC4wMScsXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgICk7XG4gICAgY29uc3QgYWN0dWFsID0gYXdhaXQgYXhlKHdyYXBwZXIpO1xuICAgIGV4cGVjdChhY3R1YWwpLnRvSGF2ZU5vVmlvbGF0aW9ucygpO1xuICB9KTtcbn0pO1xuIl19