"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _jestAxe = require("jest-axe");

var _sosia = require("sosia");

var _EzModalTest = _interopRequireDefault(require("./EzModal.test.md"));

var _EzModal = _interopRequireDefault(require("../EzModal"));

var _jestGlobals = require("../../../jest-globals");

afterEach(_react2.cleanup);
var scope = {
  EzModal: _EzModal["default"]
};
describe('EzModal', function () {
  (0, _sosia.visualSnapshots)({
    markdown: _EzModalTest["default"],
    scope: scope
  });
  it('does not render the children if not open', function () {
    var _fullRender = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzModal["default"], {
      isOpen: false,
      dismissLabel: "dismiss",
      headerText: "header"
    }, _react["default"].createElement("div", null, "foo"))),
        queryByText = _fullRender.queryByText;

    expect(queryByText('foo')).toBeNull();
  });
  it('calls submit handler when submit button is clicked', function () {
    var clickSpy = jest.fn();
    var submitLabel = 'submit';

    var _fullRender2 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzModal["default"], {
      isOpen: true,
      submitLabel: submitLabel,
      onSubmit: clickSpy,
      dismissLabel: "dismiss",
      headerText: "header"
    }, "Test")),
        getByText = _fullRender2.getByText;

    _react2.fireEvent.click(getByText(submitLabel));

    expect(clickSpy).toHaveBeenCalled();
  });
  it('calls dismiss handler when dismiss button is clicked', function () {
    var clickSpy = jest.fn();
    var dismissLabel = 'dismiss';

    var _fullRender3 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzModal["default"], {
      isOpen: true,
      dismissLabel: dismissLabel,
      submitLabel: "submit",
      onDismiss: clickSpy,
      headerText: "header"
    }, "Test")),
        getByText = _fullRender3.getByText;

    _react2.fireEvent.click(getByText(dismissLabel));

    expect(clickSpy).toHaveBeenCalled();
  });
  it('disables the submit button when the form is submitting', function () {
    var submitLabel = 'submit';

    var _fullRender4 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzModal["default"], {
      isOpen: true,
      isSubmitting: true,
      submitLabel: submitLabel,
      dismissLabel: "dismiss",
      headerText: "header"
    }, "test")),
        getByText = _fullRender4.getByText;

    var submitButton = getByText(submitLabel);
    expect(submitButton).toHaveAttribute('disabled');
  });
  it('sets the disabled prop on dismiss button when isSubmitting is true', function () {
    var dismissLabel = 'dismiss';

    var _fullRender5 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzModal["default"], {
      isOpen: true,
      isSubmitting: true,
      dismissLabel: dismissLabel,
      headerText: "header"
    }, "test")),
        getByText = _fullRender5.getByText;

    var dismissButton = getByText(dismissLabel);
    expect(dismissButton).toHaveAttribute('disabled');
  });
  /**
   * Accessibility tests.
   */

  describe('Accessibility tests', function () {
    it('should meet accessibility guidelines when required labels / text are given',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee() {
      var _fullRender6, baseElement, unmount, actual;

      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _fullRender6 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzModal["default"], {
                isOpen: true,
                dismissLabel: "dismiss",
                headerText: "header"
              }, "test")), baseElement = _fullRender6.baseElement, unmount = _fullRender6.unmount;
              unmount();
              _context.next = 4;
              return (0, _jestAxe.axe)(baseElement.innerHTML);

            case 4:
              actual = _context.sent;
              expect(actual).toHaveNoViolations();

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    it('should meet accessibility guidelines when all labels / text are given',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee2() {
      var _fullRender7, baseElement, unmount, actual;

      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _fullRender7 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzModal["default"], {
                isOpen: true,
                headerText: "Header",
                submitLabel: "submit",
                dismissLabel: "dismiss"
              }, "test")), baseElement = _fullRender7.baseElement, unmount = _fullRender7.unmount;
              unmount();
              _context2.next = 4;
              return (0, _jestAxe.axe)(baseElement.innerHTML);

            case 4:
              actual = _context2.sent;
              expect(actual).toHaveNoViolations();

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,