"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _core = require("@emotion/core");

var _jestAxe = require("jest-axe");

var _sosia = require("sosia");

var _react2 = require("@testing-library/react");

var _EzButtonTest = _interopRequireDefault(require("./EzButton.test.md"));

var _EzButton = _interopRequireDefault(require("../EzButton"));

var _EzButton2 = _interopRequireDefault(require("../EzButton.md"));

var _index = require("../../index");

var _jestGlobals = require("../../../jest-globals");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var scope = {
  EzButton: _EzButton["default"],
  EzLayout: _index.EzLayout,
  Global: _core.Global,
  css: _core.css
};
describe('EzButton', function () {
  (0, _sosia.visualSnapshots)({
    markdown: _EzButton2["default"],
    scope: scope
  });
  (0, _sosia.visualSnapshots)({
    markdown: _EzButtonTest["default"],
    scope: _objectSpread({}, scope, {
      fireEvent: _react2.fireEvent
    })
  });
  it('renders a button element by default', function () {
    var _fullRender = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzButton["default"], {
      use: "primary"
    }, "Click Me")),
        getByText = _fullRender.getByText;

    expect(getByText('Click Me').tagName).toEqual('BUTTON');
  });
  describe('disabled', function () {
    it('it disables the button element', function () {
      var _fullRender2 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzButton["default"], {
        use: "primary",
        disabled: true
      }, "Click Me")),
          getByText = _fullRender2.getByText;

      expect(getByText('Click Me')).toHaveAttribute('disabled');
    });
  });
  describe('disabledMessage', function () {
    var tooltipText = 'Invalid form';
    it('wraps the button in a tooltip if a value is provided and the button is disabled', function () {
      var _fullRender3 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzButton["default"], {
        use: "primary",
        disabled: true,
        disabledMessage: tooltipText
      }, "Submit")),
          container = _fullRender3.container,
          getByText = _fullRender3.getByText,
          getByRole = _fullRender3.getByRole;

      _react2.fireEvent.focus(container.querySelector('button'));

      var tooltip = getByRole('tooltip');
      expect(tooltip).toBeVisible();
      expect(getByText(tooltipText)).toBeDefined();
    });
    it('does not wrap the button in a tooltip if a value is provided and the button is not disabled', function () {
      var _fullRender4 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzButton["default"], {
        use: "primary",
        disabledMessage: tooltipText
      }, "Submit")),
          container = _fullRender4.container,
          queryByRole = _fullRender4.queryByRole;

      _react2.fireEvent.focus(container.querySelector('button'));

      var tooltip = queryByRole('tooltip');
      expect(tooltip).toBeNull();
    });
  });
  describe('loading', function () {
    it('is applies the disabled attribute to the button element', function () {
      var _fullRender5 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzButton["default"], {
        use: "primary",
        loading: true
      }, "Click Me")),
          getByText = _fullRender5.getByText;

      expect(getByText('Click Me')).toHaveAttribute('disabled');
    });
  });
  describe('data-* props', function () {
    var actual;
    beforeEach(function () {
      actual = (0, _jestGlobals.renderToHtml)(_react["default"].createElement(_EzButton["default"], {
        use: "primary",
        "data-test": "my-test-selector"
      }, "Click Me"));
    });
    it('renders valid props for html elements', function () {
      expect(actual).toContain('data-test="my-test-selector"');
    });
  });
  it('should meet accessibility guidelines for buttons',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee() {
    var wrapper, html;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            wrapper = (0, _jestGlobals.renderToHtml)(_react["default"].createElement(_EzButton["default"], {
              use: "primary"
            }, "Click Me"));
            _context.next = 3;
            return (0, _jestAxe.axe)(wrapper);

          case 3:
            html = _context.sent;
            expect(html).toHaveNoViolations();

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,