"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _dayjs = _interopRequireDefault(require("dayjs"));

var _EzCalendar = require("./EzCalendar.styles");

var _en = _interopRequireDefault(require("./en"));

var _hooks = require("../../utils/hooks");

var weekDayCount = 7;
var maxDaysInMonth = 31;

var repeat = function repeat(n) {
  return new Array(n).fill(null);
};

var populateMonth = function populateMonth(date) {
  var daysInMonth = date.endOf('month').date();
  var monthDayStartOffset = date.set('date', 1).day() + 1;
  var weeksInMonth = Math.ceil((monthDayStartOffset + daysInMonth) / weekDayCount);
  var tempMonthDayStartOffset = monthDayStartOffset;
  var daysLeftInMonth = date.endOf('month').date();
  return repeat(weeksInMonth).map(function () {
    return repeat(weekDayCount).map(function () {
      if (--tempMonthDayStartOffset > 0) return null;
      var day = daysInMonth - --daysLeftInMonth;
      if (day <= daysInMonth) return day;
      return null;
    });
  });
};

var EzCalendar = function EzCalendar(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange,
      minDate = _ref.minDate,
      maxDate = _ref.maxDate,
      filterDate = _ref.filterDate;

  var _useTranslation = (0, _hooks.useTranslation)(_en["default"]),
      t = _useTranslation.t;

  var calendarRef = (0, _react.useRef)(null);
  var refs = (0, _react.useRef)(repeat(maxDaysInMonth).map(function () {
    return (0, _react.createRef)();
  })).current;
  var selectedDate = (0, _dayjs["default"])(value).isValid() ? (0, _dayjs["default"])(value) : (0, _dayjs["default"])();

  var _useState = (0, _react.useState)(selectedDate),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      focusedDate = _useState2[0],
      setFocusedDate = _useState2[1];

  (0, _react.useEffect)(function () {
    var _calendarRef$current$ = calendarRef.current.ownerDocument,
        activeElement = _calendarRef$current$.activeElement,
        body = _calendarRef$current$.body;
    var bodyFocused = activeElement && activeElement === body;
    var current = refs[focusedDate.date() - 1].current;
    var dateFocused = refs.some(function (el) {
      return el.current === activeElement;
    });
    var canFocus = current && (bodyFocused || dateFocused);
    if (canFocus) current.focus();
  }, [refs, focusedDate, value]);
  (0, _react.useEffect)(function () {
    if ((0, _dayjs["default"])(value).isValid()) setFocusedDate((0, _dayjs["default"])(value));
  }, [value]);

  var handleKeyInput = function handleKeyInput(selectFocusedDate, disabled) {
    return function (e) {
      switch (e.key) {
        case 'ArrowLeft':
          e.preventDefault();
          setFocusedDate(focusedDate.subtract(1, 'day'));
          break;

        case 'ArrowRight':
          e.preventDefault();
          setFocusedDate(focusedDate.add(1, 'day'));
          break;

        case 'ArrowUp':
          e.preventDefault();
          setFocusedDate(focusedDate.subtract(1, 'week'));
          break;

        case 'ArrowDown':
          e.preventDefault();
          setFocusedDate(focusedDate.add(1, 'week'));
          break;

        case 'Space':
        case 'Enter':
          e.preventDefault();
          if (!disabled) selectFocusedDate();
          break;

        default:
          break;
      }
    };
  };

  var isEnabled = function isEnabled(day) {
    var isSameOrAfterMinDate = minDate !== undefined ? day.isSame(minDate) || day.isAfter(minDate) : true;
    var isSameOrBeforeMaxDate = maxDate !== undefined ? day.isSame(maxDate) || day.isBefore(maxDate) : true;
    var isFilterMatch = filterDate !== undefined ? filterDate(day.format(t('DATE_FORMAT'))) : true;
    return isSameOrAfterMinDate && isSameOrBeforeMaxDate && isFilterMatch;
  };

  return _react["default"].createElement("div", null, _react["default"].createElement(_EzCalendar.CalendarTable, {
    ref: calendarRef
  }, _react["default"].createElement(_EzCalendar.Row, null, _react["default"].createElement(_EzCalendar.MonthNavigation, null, _react["default"].createElement("button", {
    type: "button",
    onClick: function onClick() {
      return setFocusedDate(focusedDate.subtract(1, 'month').set('date', 1));
    }
  }, "\u2190 ", t('Prev'))), _react["default"].createElement(_EzCalendar.MonthName, null, focusedDate.format('MMMM YYYY')), _react["default"].createElement(_EzCalendar.MonthNavigation, null, _react["default"].createElement("button", {
    type: "button",
    onClick: function onClick() {
      return setFocusedDate(focusedDate.add(1, 'month').set('date', 1));
    }
  }, t('Next'), " \u2192"))), _react["default"].createElement(_EzCalendar.Row, null, repeat(weekDayCount).map(function (_, dayIndex) {
    return _react["default"].createElement(_EzCalendar.WeekdayName, {
      key: dayIndex
    }, focusedDate.set('day', dayIndex).format('dd'));
  })), _react["default"].createElement("div", null, populateMonth(focusedDate).map(function (week, weekIndex) {
    return _react["default"].createElement(_EzCalendar.Row, {
      key: weekIndex
    }, week.map(function (day, dayIndex) {
      var currentDay = focusedDate.set('date', day);

      var selectDate = function selectDate() {
        return onChange(currentDay.format(t('DATE_FORMAT')));
      };

      var disabled = !isEnabled(currentDay);

      var ifEnabled = function ifEnabled(fn) {
        return function (e) {
          if (!disabled) fn(e);
        };
      };

      return _react["default"].createElement(_EzCalendar.Day, {
        key: dayIndex,
        isSelected: currentDay.isSame(selectedDate)
      }, day && _react["default"].createElement("button", {
        ref: refs[day - 1],
        type: "button",
        onClick: ifEnabled(selectDate),
        "aria-disabled": disabled,
        onKeyDown: handleKeyInput(selectDate, disabled),
        "aria-label": currentDay.format('dddd, MMMM D, YYYY').toString(),
        tabIndex: day === focusedDate.date() ? 0 : -1
      }, day));
    }));
  }))));
};

var _default = EzCalendar;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,