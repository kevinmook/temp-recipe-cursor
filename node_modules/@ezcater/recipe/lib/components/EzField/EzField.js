"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _EzField = require("./EzField.styles");

var _EzLabel = _interopRequireDefault(require("../EzLabel"));

var _Icons = require("../Icons");

var _hooks = require("../../utils/hooks");

var _utils = require("../../utils");

var _EzChoice = _interopRequireDefault(require("./EzChoice"));

var _EzDateInput = _interopRequireDefault(require("./EzDateInput"));

var _EzTimeInput = _interopRequireDefault(require("./EzTimeInput"));

var _EzTextArea = _interopRequireDefault(require("./EzTextArea"));

var _EzSelect = _interopRequireDefault(require("./EzSelect"));

var _EzTextInput = _interopRequireDefault(require("./EzTextInput"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var inputElements = ['text', 'number'];
var choiceElements = ['radio', 'checkbox'];
var inlineElements = [].concat(inputElements);

var ErrorIcon = function ErrorIcon() {
  return _react["default"].createElement(_Icons.InsetIcon, {
    insetY0: true,
    right0: true,
    pr2: true
  }, _react["default"].createElement(_EzField.ErrorTriangle, null));
};

var EzCustomInput = (0, _react.forwardRef)(function (_ref, ref) {
  var Input = _ref.type,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["type"]);
  return _react["default"].createElement(_EzField.CustomInputWrapper, props, _react["default"].createElement(Input, (0, _extends2["default"])({
    ref: ref
  }, (0, _utils.filterValidProps)(props))));
});

var resolveInputFromType = function resolveInputFromType(type) {
  if (choiceElements.includes(type)) return _EzChoice["default"];
  if (type === 'date') return _EzDateInput["default"];
  if (type === 'select') return _EzSelect["default"];
  if (type === 'time') return _EzTimeInput["default"];
  if (type === 'textarea') return _EzTextArea["default"];
  if (inputElements.includes(type)) return _EzTextInput["default"];
  return EzCustomInput;
};
/**
 * Form fields provide inputs for form data, such as text, dates, emails and other data types.
 */


var EzField = (0, _react.forwardRef)(function (props, ref) {
  var id = (0, _hooks.useUniqueId)();
  var labelId = (0, _hooks.useUniqueId)();
  var Input = resolveInputFromType(props.type);
  var helperText = props.helperText,
      label = props.label,
      touched = props.touched,
      error = props.error,
      type = props.type,
      maxLength = props.maxLength,
      labelHidden = props.labelHidden;
  var showInlineError = inlineElements.includes(type);
  var isChoiceElement = choiceElements.includes(type);

  var _useFocus = (0, _hooks.useFocus)(),
      _useFocus2 = (0, _slicedToArray2["default"])(_useFocus, 2),
      focused = _useFocus2[0],
      _useFocus2$ = _useFocus2[1],
      onBlur = _useFocus2$.onBlur,
      onFocus = _useFocus2$.onFocus;

  var _useHover = (0, _hooks.useHover)(),
      _useHover2 = (0, _slicedToArray2["default"])(_useHover, 2),
      hovered = _useHover2[0],
      mouseEvents = _useHover2[1];

  var _useInput = (0, _hooks.useInput)(props.value || ''),
      value = _useInput.value,
      onChange = _useInput.onChange;

  var active = focused || hovered;
  var showError = Boolean(touched && error);
  var fieldType = isChoiceElement ? 'fieldset' : undefined;
  var labelType = isChoiceElement ? 'legend' : 'label';

  var errorMessage = _react["default"].createElement(_EzField.InlineError, {
    active: active,
    showInlineError: showInlineError
  }, _react["default"].createElement("span", null, error));

  var relative = {
    position: 'relative'
  };
  return _react["default"].createElement(_EzField.Field, (0, _extends2["default"])({
    as: fieldType
  }, mouseEvents), !labelHidden && _react["default"].createElement("div", null, _react["default"].createElement("div", {
    style: relative
  }, _react["default"].createElement(_EzLabel["default"], {
    id: labelId,
    htmlFor: id,
    as: labelType,
    error: showError
  }, label), !showInlineError && showError && _react["default"].createElement(ErrorIcon, null)), !showInlineError && showError && errorMessage), helperText && _react["default"].createElement(_EzField.Helper, null, helperText), _react["default"].createElement("div", null, _react["default"].createElement("div", {
    style: relative
  }, _react["default"].createElement(Input, _objectSpread({}, props, {}, (0, _utils.wrapEvents)(props, {
    onBlur: onBlur,
    onFocus: onFocus,
    onChange: onChange
  }), {
    id: id,
    name: props.name || id,
    'aria-labelledby': labelId,
    ref: ref,
    showInlineError: showInlineError && showError || undefined
  })), showInlineError && showError && _react["default"].createElement(ErrorIcon, null)), showInlineError && showError && errorMessage), 'maxLength' in props && typeof value === 'string' && _react["default"].createElement(_EzField.CharacterLimit, null, value.length, "/", maxLength), labelHidden && _react["default"].createElement(_EzField.ScreenReaderOnly, {
    id: labelId
  }, label));
});
/**
 * defaultProps
 * @property {FieldTypes} type - uses 'text' by default.
 */

EzField.defaultProps = {
  type: 'text'
};
/**
 * @component
 */

var _default = EzField;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,