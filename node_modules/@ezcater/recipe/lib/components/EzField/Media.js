"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _core = require("@emotion/core");

var _cache = _interopRequireDefault(require("@emotion/cache"));

var _index = require("../index");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var sizes = {
  small: {
    width: 750,
    height: 1334
  },
  // phone e.g. iphone 6
  medium: {
    width: 1280,
    height: 800
  },
  // tablet e.g. amazon fire hd
  large: {
    width: 1920,
    height: 1080
  } // laptop e.g. dell xps 13

};

var Media = function Media(_ref) {
  var size = _ref.size,
      children = _ref.children;
  var iframeEl = (0, _react.useRef)(null);
  var linkRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      container = _useState2[0],
      setContainer = _useState2[1];

  var _useState3 = (0, _react.useState)(undefined),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      src = _useState4[0],
      setSrc = _useState4[1];

  var createStylesCache = (0, _react.useCallback)(function () {
    return (0, _cache["default"])({
      container: container.ownerDocument.head,
      key: 'frame'
    });
  }, [container]);
  (0, _react.useEffect)(function () {
    setContainer(iframeEl.current);
  }, [container]);
  return _react["default"].createElement("iframe", {
    title: size,
    frameBorder: "0",
    allowFullScreen: true,
    ref: iframeEl,
    style: _objectSpread({
      border: 'none',
      margin: 0
    }, sizes[size]),
    scrolling: "no",
    src: src
  }, iframeEl.current && !src && (0, _reactDom.createPortal)(_react["default"].createElement(_core.CacheProvider, {
    value: createStylesCache()
  }, _react["default"].createElement("link", {
    href: "https://fonts.googleapis.com/css?family=Lato:400,400i,700,700i&display=swap",
    rel: "stylesheet",
    ref: linkRef
  }), _react["default"].createElement(_index.EzGlobalStyles, null), children, linkRef.current && setSrc("data:text/html,".concat(encodeURIComponent("<html>".concat(linkRef.current.ownerDocument.head.outerHTML, "<body>").concat(iframeEl.current.innerHTML, "</body></html>"))))), iframeEl.current));
};

var _default = Media;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0V6RmllbGQvTWVkaWEudHN4Il0sIm5hbWVzIjpbInNpemVzIiwic21hbGwiLCJ3aWR0aCIsImhlaWdodCIsIm1lZGl1bSIsImxhcmdlIiwiTWVkaWEiLCJzaXplIiwiY2hpbGRyZW4iLCJpZnJhbWVFbCIsImxpbmtSZWYiLCJjb250YWluZXIiLCJzZXRDb250YWluZXIiLCJ1bmRlZmluZWQiLCJzcmMiLCJzZXRTcmMiLCJjcmVhdGVTdHlsZXNDYWNoZSIsIm93bmVyRG9jdW1lbnQiLCJoZWFkIiwia2V5IiwiY3VycmVudCIsImJvcmRlciIsIm1hcmdpbiIsImVuY29kZVVSSUNvbXBvbmVudCIsIm91dGVySFRNTCIsImlubmVySFRNTCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLEtBQUssR0FBRztBQUNaQyxFQUFBQSxLQUFLLEVBQUU7QUFBQ0MsSUFBQUEsS0FBSyxFQUFFLEdBQVI7QUFBYUMsSUFBQUEsTUFBTSxFQUFFO0FBQXJCLEdBREs7QUFDdUI7QUFDbkNDLEVBQUFBLE1BQU0sRUFBRTtBQUFDRixJQUFBQSxLQUFLLEVBQUUsSUFBUjtBQUFjQyxJQUFBQSxNQUFNLEVBQUU7QUFBdEIsR0FGSTtBQUV3QjtBQUNwQ0UsRUFBQUEsS0FBSyxFQUFFO0FBQUNILElBQUFBLEtBQUssRUFBRSxJQUFSO0FBQWNDLElBQUFBLE1BQU0sRUFBRTtBQUF0QixHQUhLLENBR3dCOztBQUh4QixDQUFkOztBQU1BLElBQU1HLEtBQUssR0FBRyxTQUFSQSxLQUFRLE9BQXNCO0FBQUEsTUFBcEJDLElBQW9CLFFBQXBCQSxJQUFvQjtBQUFBLE1BQWRDLFFBQWMsUUFBZEEsUUFBYztBQUNsQyxNQUFNQyxRQUFRLEdBQUcsbUJBQU8sSUFBUCxDQUFqQjtBQUNBLE1BQU1DLE9BQU8sR0FBRyxtQkFBTyxJQUFQLENBQWhCOztBQUZrQyxrQkFHQSxxQkFBUyxJQUFULENBSEE7QUFBQTtBQUFBLE1BRzNCQyxTQUgyQjtBQUFBLE1BR2hCQyxZQUhnQjs7QUFBQSxtQkFJWixxQkFBU0MsU0FBVCxDQUpZO0FBQUE7QUFBQSxNQUkzQkMsR0FKMkI7QUFBQSxNQUl0QkMsTUFKc0I7O0FBTWxDLE1BQU1DLGlCQUFpQixHQUFHLHdCQUN4QjtBQUFBLFdBQU0sdUJBQVk7QUFBQ0wsTUFBQUEsU0FBUyxFQUFFQSxTQUFTLENBQUNNLGFBQVYsQ0FBd0JDLElBQXBDO0FBQTBDQyxNQUFBQSxHQUFHLEVBQUU7QUFBL0MsS0FBWixDQUFOO0FBQUEsR0FEd0IsRUFFeEIsQ0FBQ1IsU0FBRCxDQUZ3QixDQUExQjtBQUtBLHdCQUFVLFlBQU07QUFDZEMsSUFBQUEsWUFBWSxDQUFDSCxRQUFRLENBQUNXLE9BQVYsQ0FBWjtBQUNELEdBRkQsRUFFRyxDQUFDVCxTQUFELENBRkg7QUFJQSxTQUNFO0FBQ0UsSUFBQSxLQUFLLEVBQUVKLElBRFQ7QUFFRSxJQUFBLFdBQVcsRUFBQyxHQUZkO0FBR0UsSUFBQSxlQUFlLE1BSGpCO0FBSUUsSUFBQSxHQUFHLEVBQUVFLFFBSlA7QUFLRSxJQUFBLEtBQUs7QUFBR1ksTUFBQUEsTUFBTSxFQUFFLE1BQVg7QUFBbUJDLE1BQUFBLE1BQU0sRUFBRTtBQUEzQixPQUFpQ3RCLEtBQUssQ0FBQ08sSUFBRCxDQUF0QyxDQUxQO0FBTUUsSUFBQSxTQUFTLEVBQUMsSUFOWjtBQU9FLElBQUEsR0FBRyxFQUFFTztBQVBQLEtBU0dMLFFBQVEsQ0FBQ1csT0FBVCxJQUNDLENBQUNOLEdBREYsSUFFQyw0QkFDRSxnQ0FBQyxtQkFBRDtBQUFlLElBQUEsS0FBSyxFQUFFRSxpQkFBaUI7QUFBdkMsS0FDRTtBQUNFLElBQUEsSUFBSSxFQUFDLDZFQURQO0FBRUUsSUFBQSxHQUFHLEVBQUMsWUFGTjtBQUdFLElBQUEsR0FBRyxFQUFFTjtBQUhQLElBREYsRUFNRSxnQ0FBQyxxQkFBRCxPQU5GLEVBT0dGLFFBUEgsRUFRR0UsT0FBTyxDQUFDVSxPQUFSLElBQ0NMLE1BQU0sMEJBQ2NRLGtCQUFrQixpQkFDekJiLE9BQU8sQ0FBQ1UsT0FBUixDQUFnQkgsYUFBaEIsQ0FBOEJDLElBQTlCLENBQW1DTSxTQURWLG1CQUM0QmYsUUFBUSxDQUFDVyxPQUFULENBQWlCSyxTQUQ3QyxvQkFEaEMsRUFUVixDQURGLEVBZ0JFaEIsUUFBUSxDQUFDVyxPQWhCWCxDQVhKLENBREY7QUFnQ0QsQ0EvQ0Q7O2VBaURlZCxLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7dXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlU3RhdGUsIHVzZUVmZmVjdH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtjcmVhdGVQb3J0YWx9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQge0NhY2hlUHJvdmlkZXJ9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5pbXBvcnQgY3JlYXRlQ2FjaGUgZnJvbSAnQGVtb3Rpb24vY2FjaGUnO1xuaW1wb3J0IHtFekdsb2JhbFN0eWxlc30gZnJvbSAnLi4vaW5kZXgnO1xuXG5jb25zdCBzaXplcyA9IHtcbiAgc21hbGw6IHt3aWR0aDogNzUwLCBoZWlnaHQ6IDEzMzR9LCAvLyBwaG9uZSBlLmcuIGlwaG9uZSA2XG4gIG1lZGl1bToge3dpZHRoOiAxMjgwLCBoZWlnaHQ6IDgwMH0sIC8vIHRhYmxldCBlLmcuIGFtYXpvbiBmaXJlIGhkXG4gIGxhcmdlOiB7d2lkdGg6IDE5MjAsIGhlaWdodDogMTA4MH0sIC8vIGxhcHRvcCBlLmcuIGRlbGwgeHBzIDEzXG59O1xuXG5jb25zdCBNZWRpYSA9ICh7c2l6ZSwgY2hpbGRyZW59KSA9PiB7XG4gIGNvbnN0IGlmcmFtZUVsID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBsaW5rUmVmID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBbY29udGFpbmVyLCBzZXRDb250YWluZXJdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFtzcmMsIHNldFNyY10gPSB1c2VTdGF0ZSh1bmRlZmluZWQpO1xuXG4gIGNvbnN0IGNyZWF0ZVN0eWxlc0NhY2hlID0gdXNlQ2FsbGJhY2soXG4gICAgKCkgPT4gY3JlYXRlQ2FjaGUoe2NvbnRhaW5lcjogY29udGFpbmVyLm93bmVyRG9jdW1lbnQuaGVhZCwga2V5OiAnZnJhbWUnfSksXG4gICAgW2NvbnRhaW5lcl1cbiAgKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldENvbnRhaW5lcihpZnJhbWVFbC5jdXJyZW50KTtcbiAgfSwgW2NvbnRhaW5lcl0pO1xuXG4gIHJldHVybiAoXG4gICAgPGlmcmFtZVxuICAgICAgdGl0bGU9e3NpemV9XG4gICAgICBmcmFtZUJvcmRlcj1cIjBcIlxuICAgICAgYWxsb3dGdWxsU2NyZWVuXG4gICAgICByZWY9e2lmcmFtZUVsfVxuICAgICAgc3R5bGU9e3tib3JkZXI6ICdub25lJywgbWFyZ2luOiAwLCAuLi5zaXplc1tzaXplXX19XG4gICAgICBzY3JvbGxpbmc9XCJub1wiXG4gICAgICBzcmM9e3NyY31cbiAgICA+XG4gICAgICB7aWZyYW1lRWwuY3VycmVudCAmJlxuICAgICAgICAhc3JjICYmXG4gICAgICAgIGNyZWF0ZVBvcnRhbChcbiAgICAgICAgICA8Q2FjaGVQcm92aWRlciB2YWx1ZT17Y3JlYXRlU3R5bGVzQ2FjaGUoKX0+XG4gICAgICAgICAgICA8bGlua1xuICAgICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUxhdG86NDAwLDQwMGksNzAwLDcwMGkmZGlzcGxheT1zd2FwXCJcbiAgICAgICAgICAgICAgcmVsPVwic3R5bGVzaGVldFwiXG4gICAgICAgICAgICAgIHJlZj17bGlua1JlZn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8RXpHbG9iYWxTdHlsZXMgLz5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgIHtsaW5rUmVmLmN1cnJlbnQgJiZcbiAgICAgICAgICAgICAgc2V0U3JjKFxuICAgICAgICAgICAgICAgIGBkYXRhOnRleHQvaHRtbCwke2VuY29kZVVSSUNvbXBvbmVudChcbiAgICAgICAgICAgICAgICAgIGA8aHRtbD4ke2xpbmtSZWYuY3VycmVudC5vd25lckRvY3VtZW50LmhlYWQub3V0ZXJIVE1MfTxib2R5PiR7aWZyYW1lRWwuY3VycmVudC5pbm5lckhUTUx9PC9ib2R5PjwvaHRtbD5gXG4gICAgICAgICAgICAgICAgKX1gXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9DYWNoZVByb3ZpZGVyPixcbiAgICAgICAgICBpZnJhbWVFbC5jdXJyZW50XG4gICAgICAgICl9XG4gICAgPC9pZnJhbWU+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNZWRpYTtcbiJdfQ==