/// <reference types="react" />
declare type ChoiceValue = string | number | boolean;
declare type Choice = {
    label: string;
    value: ChoiceValue;
};
declare type ListboxProps = {
    type: 'select';
    value?: ChoiceValue;
    options: Choice[];
};
declare type SingleChoiceProps = {
    type: 'radio';
    value?: ChoiceValue;
    options: Choice[];
};
declare type MultipleChoiceProps = {
    type: 'checkbox';
    value?: ChoiceValue[];
    options: Choice[];
};
declare type HtmlInputProps = {
    type?: 'text' | 'number' | 'textarea';
    value?: string | number;
};
declare type DateInputProps = {
    type: 'date';
    value: string | number | object;
    minDate?: string | number | object;
    maxDate?: string | number | object;
    filterDate?: (value: string) => boolean;
};
declare type TimeInputProps = {
    type: 'time';
    value?: string;
    start: string;
    end: string;
    step?: number;
};
declare type TextAreaInputProps = {
    type: 'textarea';
    size?: 'small' | 'medium' | 'large';
};
declare type CustomFieldProps = {
    type: React.FC<any> | React.ComponentClass<any>;
    value?: any;
};
declare type FieldTypeProps = SingleChoiceProps | MultipleChoiceProps | ListboxProps | HtmlInputProps | DateInputProps | TimeInputProps | TextAreaInputProps | CustomFieldProps;
declare type ErrorOrMessage = string | boolean;
declare type BaseProps = React.InputHTMLAttributes<HTMLInputElement> & {
    /**
     * Display that the input has an error
     */
    error?: ErrorOrMessage;
    /**
     * Additional hint text to display
     */
    helperText?: string;
    /**
     * Label for the input
     */
    label: string;
    /**
     * Visually hide the label
     * */
    labelHidden?: boolean;
    /**
     * Restricts the input to the specified length
     */
    maxLength?: number;
    /**
     * Text to display before the input
     */
    prefix?: string;
    /**
     * Text to display after the input
     */
    suffix?: string;
    /**
     * Indicates that the input has been interacted with
     */
    touched?: boolean;
};
export declare type Props = FieldTypeProps & BaseProps;
export declare type CustomInputProps = Omit<Props, 'type'> & {
    type: React.ComponentType<any>;
};
export {};
