"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = _interopRequireWildcard(require("react"));

var _EzSelect = require("./EzSelect.styles");

var _hooks = require("../../utils/hooks");

var _EzCombobox = require("./EzCombobox");

var _EzTextInput = _interopRequireDefault(require("./EzTextInput"));

var _EzPopover = _interopRequireDefault(require("../EzPopover"));

var _Icons = require("../Icons");

var flatten = function flatten(options) {
  var grouped = new Map();
  options.forEach(function (item) {
    var group = item.group;
    var values = grouped.get(group) || [];
    values.push(item);
    grouped.set(group, values);
  });
  return (0, _toConsumableArray2["default"])(grouped);
};

var ListboxPopover = _react["default"].forwardRef(function (_ref, ref) {
  var targetRef = _ref.targetRef,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["targetRef"]);
  return _react["default"].createElement(_EzPopover["default"], {
    targetRef: targetRef,
    placement: "bottom-start",
    modifiers: [{
      name: 'matchWidth',
      enabled: true,
      fn: function fn(_ref2) {
        var state = _ref2.state;
        // eslint-disable-next-line no-param-reassign
        state.styles.popper.width = "".concat(state.rects.reference.width, "px");
      },
      phase: 'beforeWrite',
      requires: ['computeStyles']
    }, {
      name: 'offset',
      options: {
        offset: [0, 5]
      }
    }]
  }, _react["default"].createElement(_EzSelect.Listbox, (0, _extends2["default"])({
    role: "listbox",
    ref: ref
  }, props)));
});

var Option = function Option(_ref3) {
  var activeOption = _ref3.activeOption,
      activeOptionRef = _ref3.activeOptionRef,
      setActiveOption = _ref3.setActiveOption,
      option = _ref3.option,
      selected = _ref3.selected,
      onClick = _ref3.onClick;

  /* eslint-disable jsx-a11y/click-events-have-key-events */

  /* eslint-disable jsx-a11y/mouse-events-have-key-events */

  /* Note: lint doesn't detect the keyboard handler is on the input element, not the list */
  var id = (0, _hooks.useUniqueId)();
  var activeValue = activeOption && activeOption.value;
  return _react["default"].createElement("li", {
    role: "option",
    "aria-current": selected && option.value === selected.value || undefined,
    "aria-selected": activeValue === option.value,
    ref: activeValue === option.value ? activeOptionRef : undefined,
    onMouseOver: function onMouseOver() {
      return setActiveOption(option);
    },
    onClick: onClick,
    onMouseDown: function onMouseDown(e) {
      return e.preventDefault();
    } // used to prevent a focus event from bubbling up to the body in ie11
    ,
    id: id
  }, option.label);
};

var OptGroup = function OptGroup(props) {
  var id = (0, _hooks.useUniqueId)();

  var _props$group = (0, _slicedToArray2["default"])(props.group, 2),
      name = _props$group[0],
      options = _props$group[1];

  return _react["default"].createElement("li", null, _react["default"].createElement("ul", {
    role: "group",
    "aria-describedby": id
  }, _react["default"].createElement("li", {
    id: id,
    role: "presentation"
  }, name), options.map(function (o) {
    return _react["default"].createElement(Option, (0, _extends2["default"])({}, props, {
      option: o,
      key: o.label,
      onClick: function onClick() {
        return props.selectItem(o.value);
      }
    }));
  })));
};

var hasGroupedOptions = function hasGroupedOptions(options) {
  return options.some(function (o) {
    return o.group;
  });
};

var EzSelect = function EzSelect(props) {
  var options = props.options,
      value = props.value,
      onChange = props.onChange;
  var ariaLabelledBy = props['aria-labelledby'];
  var timeout = (0, _react.useRef)(null);
  var activeOptionRef = (0, _react.useRef)(null);
  var selected = options.find(function (o) {
    return o.value === value;
  });

  var _useState = (0, _react.useState)(selected),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      activeOption = _useState2[0],
      setActiveOption = _useState2[1];

  var setActiveIndex = function setActiveIndex(i) {
    return setActiveOption(i === -1 ? null : options[i]);
  };

  var listbox = {
    activeOption: activeOption,
    activeOptionRef: activeOptionRef,
    setActiveOption: setActiveOption,
    selected: selected
  };
  (0, _react.useEffect)(function () {
    return function () {
      return clearTimeout(timeout.current);
    };
  }, []);
  var comboboxState = (0, _EzCombobox.useComboboxState)();
  var hide = comboboxState.hide,
      visible = comboboxState.visible;

  var _useCombobox = (0, _EzCombobox.useCombobox)(comboboxState, {
    'aria-haspopup': 'listbox',
    className: props.className,
    disabled: props.disabled,
    error: props.error,
    touched: props.touched,
    opened: comboboxState.visible
  }),
      containerRef = _useCombobox.ref,
      optionsRef = _useCombobox.optionsRef,
      combobox = (0, _objectWithoutProperties2["default"])(_useCombobox, ["ref", "optionsRef"]);

  var handleKeyDown = function handleKeyDown(e) {
    var key = e.key;
    var activeIndex = options.indexOf(activeOption);

    var select = function select() {
      return selectItem(activeOption ? activeOption.value : null);
    };

    var prev = activeIndex <= 0 ? options.length - 1 : activeIndex - 1;
    var next = activeIndex === -1 || activeIndex >= options.length - 1 ? 0 : activeIndex + 1;
    var keyMap = {
      Escape: function Escape() {
        return setActiveIndex(-1);
      },
      ArrowUp: !e.defaultPrevented && function () {
        return setActiveIndex(prev);
      },
      ArrowDown: !e.defaultPrevented && function () {
        return setActiveIndex(next);
      },
      ' ': visible && select,
      Enter: visible && select
    };
    var action = keyMap[key];

    if (action) {
      e.preventDefault();
      action(e);
    }
  };

  (0, _hooks.useScrollIntoView)({
    containerRef: optionsRef,
    targetRef: activeOptionRef
  }, [activeOption, visible]);
  var comboboxInput = (0, _EzCombobox.useComboboxInput)(comboboxState, {
    'aria-autocomplete': 'list',
    'aria-labelledby': ariaLabelledBy,
    value: selected ? selected.label : '',
    'aria-activedescendant': !activeOptionRef.current ? '' : activeOptionRef.current.id,
    onKeyDown: handleKeyDown,
    onSelect: function onSelect(e) {
      return e.target.setSelectionRange(0, 0);
    },
    id: props.id,
    name: props.name,
    disabled: props.disabled,
    placeholder: props.placeholder,
    error: props.error,
    touched: props.touched,
    readOnly: true
  });
  var changeEvent = (0, _react.useCallback)(function (optionValue) {
    var event = new Event('change');
    containerRef.current.value = optionValue;
    containerRef.current.dispatchEvent(event);
    return event;
  }, [containerRef]);

  function selectItem(optionValue) {
    onChange(changeEvent(optionValue));
    timeout.current = setTimeout(hide, 100);
  }

  var comboboxFlyout = (0, _EzCombobox.useComboboxFlyout)(comboboxState);
  var move = (0, _react.useCallback)(function (option) {
    setActiveOption(option);
    if (visible) return;
    onChange(changeEvent(option.value));
  }, [visible, onChange, changeEvent]);
  (0, _hooks.useJumpToOption)(comboboxInput.ref, {
    options: options,
    move: move
  });
  return _react["default"].createElement(_EzSelect.Container, {
    ref: containerRef,
    hasError: props.touched && props.error,
    opened: visible
  }, _react["default"].createElement(_EzSelect.Combobox, combobox, _react["default"].createElement(_EzTextInput["default"], comboboxInput), _react["default"].createElement(_Icons.InsetIcon, {
    insetY0: true,
    right0: true,
    pr2: true
  }, _react["default"].createElement(_Icons.ChevronIcon, {
    flip: visible
  }))), visible && _react["default"].createElement(ListboxPopover, (0, _extends2["default"])({
    "aria-labelledby": ariaLabelledBy,
    targetRef: comboboxInput.ref
  }, comboboxFlyout, {
    ref: optionsRef,
    onClick: function onClick() {
      return comboboxInput.ref.current.focus();
    }
  }), hasGroupedOptions(options) ? _react["default"].createElement(_react["default"].Fragment, null, flatten(options).map(function (group) {
    return _react["default"].createElement(OptGroup, (0, _extends2["default"])({}, listbox, {
      group: group,
      key: group[0],
      selectItem: selectItem
    }));
  })) : options.map(function (o) {
    return _react["default"].createElement(Option, (0, _extends2["default"])({}, listbox, {
      option: o,
      key: o.label,
      onClick: function onClick() {
        return selectItem(o.value);
      }
    }));
  })));
};

var _default = EzSelect;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0V6RmllbGQvRXpTZWxlY3QudHN4Il0sIm5hbWVzIjpbImZsYXR0ZW4iLCJvcHRpb25zIiwiZ3JvdXBlZCIsIk1hcCIsImZvckVhY2giLCJpdGVtIiwiZ3JvdXAiLCJ2YWx1ZXMiLCJnZXQiLCJwdXNoIiwic2V0IiwiTGlzdGJveFBvcG92ZXIiLCJSZWFjdCIsImZvcndhcmRSZWYiLCJyZWYiLCJ0YXJnZXRSZWYiLCJwcm9wcyIsIm5hbWUiLCJlbmFibGVkIiwiZm4iLCJzdGF0ZSIsInN0eWxlcyIsInBvcHBlciIsIndpZHRoIiwicmVjdHMiLCJyZWZlcmVuY2UiLCJwaGFzZSIsInJlcXVpcmVzIiwib2Zmc2V0IiwiT3B0aW9uIiwiYWN0aXZlT3B0aW9uIiwiYWN0aXZlT3B0aW9uUmVmIiwic2V0QWN0aXZlT3B0aW9uIiwib3B0aW9uIiwic2VsZWN0ZWQiLCJvbkNsaWNrIiwiaWQiLCJhY3RpdmVWYWx1ZSIsInZhbHVlIiwidW5kZWZpbmVkIiwiZSIsInByZXZlbnREZWZhdWx0IiwibGFiZWwiLCJPcHRHcm91cCIsIm1hcCIsIm8iLCJzZWxlY3RJdGVtIiwiaGFzR3JvdXBlZE9wdGlvbnMiLCJzb21lIiwiRXpTZWxlY3QiLCJvbkNoYW5nZSIsImFyaWFMYWJlbGxlZEJ5IiwidGltZW91dCIsImZpbmQiLCJzZXRBY3RpdmVJbmRleCIsImkiLCJsaXN0Ym94IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudCIsImNvbWJvYm94U3RhdGUiLCJoaWRlIiwidmlzaWJsZSIsImNsYXNzTmFtZSIsImRpc2FibGVkIiwiZXJyb3IiLCJ0b3VjaGVkIiwib3BlbmVkIiwiY29udGFpbmVyUmVmIiwib3B0aW9uc1JlZiIsImNvbWJvYm94IiwiaGFuZGxlS2V5RG93biIsImtleSIsImFjdGl2ZUluZGV4IiwiaW5kZXhPZiIsInNlbGVjdCIsInByZXYiLCJsZW5ndGgiLCJuZXh0Iiwia2V5TWFwIiwiRXNjYXBlIiwiQXJyb3dVcCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJBcnJvd0Rvd24iLCJFbnRlciIsImFjdGlvbiIsImNvbWJvYm94SW5wdXQiLCJvbktleURvd24iLCJvblNlbGVjdCIsInRhcmdldCIsInNldFNlbGVjdGlvblJhbmdlIiwicGxhY2Vob2xkZXIiLCJyZWFkT25seSIsImNoYW5nZUV2ZW50Iiwib3B0aW9uVmFsdWUiLCJldmVudCIsIkV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInNldFRpbWVvdXQiLCJjb21ib2JveEZseW91dCIsIm1vdmUiLCJmb2N1cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLElBQU1BLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQUFDLE9BQU8sRUFBSTtBQUN6QixNQUFNQyxPQUFPLEdBQUcsSUFBSUMsR0FBSixFQUFoQjtBQUVBRixFQUFBQSxPQUFPLENBQUNHLE9BQVIsQ0FBZ0IsVUFBQUMsSUFBSSxFQUFJO0FBQUEsUUFDZkMsS0FEZSxHQUNORCxJQURNLENBQ2ZDLEtBRGU7QUFFdEIsUUFBTUMsTUFBTSxHQUFHTCxPQUFPLENBQUNNLEdBQVIsQ0FBWUYsS0FBWixLQUFzQixFQUFyQztBQUNBQyxJQUFBQSxNQUFNLENBQUNFLElBQVAsQ0FBWUosSUFBWjtBQUNBSCxJQUFBQSxPQUFPLENBQUNRLEdBQVIsQ0FBWUosS0FBWixFQUFtQkMsTUFBbkI7QUFDRCxHQUxEO0FBT0EsNkNBQVdMLE9BQVg7QUFDRCxDQVhEOztBQWFBLElBQU1TLGNBQWMsR0FBR0Msa0JBQU1DLFVBQU4sQ0FBMkIsZ0JBQXdCQyxHQUF4QjtBQUFBLE1BQUVDLFNBQUYsUUFBRUEsU0FBRjtBQUFBLE1BQWdCQyxLQUFoQjtBQUFBLFNBQ2hELGdDQUFDLHFCQUFEO0FBQ0UsSUFBQSxTQUFTLEVBQUVELFNBRGI7QUFFRSxJQUFBLFNBQVMsRUFBQyxjQUZaO0FBR0UsSUFBQSxTQUFTLEVBQUUsQ0FDVDtBQUNFRSxNQUFBQSxJQUFJLEVB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REYsQ0FGRixDQURGLEVBT0dBLE9BQU8sSUFDTixnQ0FBQyxjQUFEO0FBQ0UsdUJBQWlCVixjQURuQjtBQUVFLElBQUEsU0FBUyxFQUFFa0MsYUFBYSxDQUFDdkU7QUFGM0IsS0FHTW9GLGNBSE47QUFJRSxJQUFBLEdBQUcsRUFBRTlCLFVBSlA7QUFLRSxJQUFBLE9BQU8sRUFBRTtBQUFBLGFBQU1pQixhQUFhLENBQUN2RSxHQUFkLENBQWtCNEMsT0FBbEIsQ0FBMEIwQyxLQUExQixFQUFOO0FBQUE7QUFMWCxNQU9HckQsaUJBQWlCLENBQUM5QyxPQUFELENBQWpCLEdBQ0Msa0VBQ0dELE9BQU8sQ0FBQ0MsT0FBRCxDQUFQLENBQWlCMkMsR0FBakIsQ0FBcUIsVUFBQXRDLEtBQUs7QUFBQSxXQUN6QixnQ0FBQyxRQUFELGdDQUFja0QsT0FBZDtBQUF1QixNQUFBLEtBQUssRUFBRWxELEtBQTlCO0FBQXFDLE1BQUEsR0FBRyxFQUFFQSxLQUFLLENBQUMsQ0FBRCxDQUEvQztBQUFvRCxNQUFBLFVBQVUsRUFBRXdDO0FBQWhFLE9BRHlCO0FBQUEsR0FBMUIsQ0FESCxDQURELEdBT0M3QyxPQUFPLENBQUMyQyxHQUFSLENBQVksVUFBQUMsQ0FBQztBQUFBLFdBQ1gsZ0NBQUMsTUFBRCxnQ0FBWVcsT0FBWjtBQUFxQixNQUFBLE1BQU0sRUFBRVgsQ0FBN0I7QUFBZ0MsTUFBQSxHQUFHLEVBQUVBLENBQUMsQ0FBQ0gsS0FBdkM7QUFBOEMsTUFBQSxPQUFPLEVBQUU7QUFBQSxlQUFNSSxVQUFVLENBQUNELENBQUMsQ0FBQ1AsS0FBSCxDQUFoQjtBQUFBO0FBQXZELE9BRFc7QUFBQSxHQUFiLENBZEosQ0FSSixDQURGO0FBK0JELENBdElEOztlQXdJZVcsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge3VzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlQ2FsbGJhY2t9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Q29tYm9ib3gsIENvbnRhaW5lciwgTGlzdGJveH0gZnJvbSAnLi9FelNlbGVjdC5zdHlsZXMnO1xuaW1wb3J0IHt1c2VTY3JvbGxJbnRvVmlldywgdXNlSnVtcFRvT3B0aW9uLCB1c2VVbmlxdWVJZH0gZnJvbSAnLi4vLi4vdXRpbHMvaG9va3MnO1xuaW1wb3J0IHt1c2VDb21ib2JveFN0YXRlLCB1c2VDb21ib2JveCwgdXNlQ29tYm9ib3hJbnB1dCwgdXNlQ29tYm9ib3hGbHlvdXR9IGZyb20gJy4vRXpDb21ib2JveCc7XG5pbXBvcnQgRXpUZXh0SW5wdXQgZnJvbSAnLi9FelRleHRJbnB1dCc7XG5pbXBvcnQgRXpQb3BvdmVyIGZyb20gJy4uL0V6UG9wb3Zlcic7XG5pbXBvcnQge0NoZXZyb25JY29uLCBJbnNldEljb259IGZyb20gJy4uL0ljb25zJztcblxuY29uc3QgZmxhdHRlbiA9IG9wdGlvbnMgPT4ge1xuICBjb25zdCBncm91cGVkID0gbmV3IE1hcCgpO1xuXG4gIG9wdGlvbnMuZm9yRWFjaChpdGVtID0+IHtcbiAgICBjb25zdCB7Z3JvdXB9ID0gaXRlbTtcbiAgICBjb25zdCB2YWx1ZXMgPSBncm91cGVkLmdldChncm91cCkgfHwgW107XG4gICAgdmFsdWVzLnB1c2goaXRlbSk7XG4gICAgZ3JvdXBlZC5zZXQoZ3JvdXAsIHZhbHVlcyk7XG4gIH0pO1xuXG4gIHJldHVybiBbLi4uZ3JvdXBlZF07XG59O1xuXG5jb25zdCBMaXN0Ym94UG9wb3ZlciA9IFJlYWN0LmZvcndhcmRSZWY8YW55LCBhbnk+KCh7dGFyZ2V0UmVmLCAuLi5wcm9wc30sIHJlZikgPT4gKFxuICA8RXpQb3BvdmVyXG4gICAgdGFyZ2V0UmVmPXt0YXJnZXRSZWZ9XG4gICAgcGxhY2VtZW50PVwiYm90dG9tLXN0YXJ0XCJcbiAgICBtb2RpZmllcnM9e1tcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ21hdGNoV2lkdGgnLFxuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBmbjogKHtzdGF0ZX0pID0+IHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICBzdGF0ZS5zdHlsZXMucG9wcGVyLndpZHRoID0gYCR7c3RhdGUucmVjdHMucmVmZXJlbmNlLndpZHRofXB4YDtcbiAgICAgICAgfSxcbiAgICAgICAgcGhhc2U6ICdiZWZvcmVXcml0ZScsXG4gICAgICAgIHJlcXVpcmVzOiBbJ2NvbXB1dGVTdHlsZXMnXSxcbiAgICAgIH0sXG4gICAgICB7bmFtZTogJ29mZnNldCcsIG9wdGlvbnM6IHtvZmZzZXQ6IFswLCA1XX19LFxuICAgIF19XG4gID5cbiAgICA8TGlzdGJveCByb2xlPVwibGlzdGJveFwiIHJlZj17cmVmfSB7Li4ucHJvcHN9IC8+XG4gIDwvRXpQb3BvdmVyPlxuKSk7XG5cbmNvbnN0IE9wdGlvbiA9ICh7YWN0aXZlT3B0aW9uLCBhY3RpdmVPcHRpb25SZWYsIHNldEFjdGl2ZU9wdGlvbiwgb3B0aW9uLCBzZWxlY3RlZCwgb25DbGlja30pID0+IHtcbiAgLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvY2xpY2stZXZlbnRzLWhhdmUta2V5LWV2ZW50cyAqL1xuICAvKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9tb3VzZS1ldmVudHMtaGF2ZS1rZXktZXZlbnRzICovXG4gIC8qIE5vdGU6IGxpbnQgZG9lc24ndCBkZXRlY3QgdGhlIGtleWJvYXJkIGhhbmRsZXIgaXMgb24gdGhlIGlucHV0IGVsZW1lbnQsIG5vdCB0aGUgbGlzdCAqL1xuICBjb25zdCBpZCA9IHVzZVVuaXF1ZUlkKCk7XG4gIGNvbnN0IGFjdGl2ZVZhbHVlID0gYWN0aXZlT3B0aW9uICYmIGFjdGl2ZU9wdGlvbi52YWx1ZTtcbiAgcmV0dXJuIChcbiAgICA8bGlcbiAgICAgIHJvbGU9XCJvcHRpb25cIlxuICAgICAgYXJpYS1jdXJyZW50PXsoc2VsZWN0ZWQgJiYgb3B0aW9uLnZhbHVlID09PSBzZWxlY3RlZC52YWx1ZSkgfHwgdW5kZWZpbmVkfVxuICAgICAgYXJpYS1zZWxlY3RlZD17YWN0aXZlVmFsdWUgPT09IG9wdGlvbi52YWx1ZX1cbiAgICAgIHJlZj17YWN0aXZlVmFsdWUgPT09IG9wdGlvbi52YWx1ZSA/IGFjdGl2ZU9wdGlvblJlZiA6IHVuZGVmaW5lZH1cbiAgICAgIG9uTW91c2VPdmVyPXsoKSA9PiBzZXRBY3RpdmVPcHRpb24ob3B0aW9uKX1cbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICBvbk1vdXNlRG93bj17ZSA9PiBlLnByZXZlbnREZWZhdWx0KCl9IC8vIHVzZWQgdG8gcHJldmVudCBhIGZvY3VzIGV2ZW50IGZyb20gYnViYmxpbmcgdXAgdG8gdGhlIGJvZHkgaW4gaWUxMVxuICAgICAgaWQ9e2lkfVxuICAgID5cbiAgICAgIHtvcHRpb24ubGFiZWx9XG4gICAgPC9saT5cbiAgKTtcbn07XG5cbmNvbnN0IE9wdEdyb3VwID0gcHJvcHMgPT4ge1xuICBjb25zdCBpZCA9IHVzZVVuaXF1ZUlkKCk7XG4gIGNvbnN0IFtuYW1lLCBvcHRpb25zXSA9IHByb3BzLmdyb3VwO1xuXG4gIHJldHVybiAoXG4gICAgPGxpPlxuICAgICAgPHVsIHJvbGU9XCJncm91cFwiIGFyaWEtZGVzY3JpYmVkYnk9e2lkfT5cbiAgICAgICAgPGxpIGlkPXtpZH0gcm9sZT1cInByZXNlbnRhdGlvblwiPlxuICAgICAgICAgIHtuYW1lfVxuICAgICAgICA8L2xpPlxuICAgICAgICB7b3B0aW9ucy5tYXAobyA9PiAoXG4gICAgICAgICAgPE9wdGlvbiB7Li4ucHJvcHN9IG9wdGlvbj17b30ga2V5PXtvLmxhYmVsfSBvbkNsaWNrPXsoKSA9PiBwcm9wcy5zZWxlY3RJdGVtKG8udmFsdWUpfSAvPlxuICAgICAgICApKX1cbiAgICAgIDwvdWw+XG4gICAgPC9saT5cbiAgKTtcbn07XG5cbmNvbnN0IGhhc0dyb3VwZWRPcHRpb25zID0gb3B0aW9ucyA9PiBvcHRpb25zLnNvbWUobyA9PiBvLmdyb3VwKTtcblxuY29uc3QgRXpTZWxlY3QgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHtvcHRpb25zLCB2YWx1ZSwgb25DaGFuZ2V9ID0gcHJvcHM7XG4gIGNvbnN0IGFyaWFMYWJlbGxlZEJ5ID0gcHJvcHNbJ2FyaWEtbGFiZWxsZWRieSddO1xuXG4gIGNvbnN0IHRpbWVvdXQgPSB1c2VSZWYobnVsbCk7XG4gIGNvbnN0IGFjdGl2ZU9wdGlvblJlZiA9IHVzZVJlZihudWxsKTtcblxuICBjb25zdCBzZWxlY3RlZCA9IG9wdGlvbnMuZmluZChvID0+IG8udmFsdWUgPT09IHZhbHVlKTtcbiAgY29uc3QgW2FjdGl2ZU9wdGlvbiwgc2V0QWN0aXZlT3B0aW9uXSA9IHVzZVN0YXRlKHNlbGVjdGVkKTtcblxuICBjb25zdCBzZXRBY3RpdmVJbmRleCA9IGkgPT4gc2V0QWN0aXZlT3B0aW9uKGkgPT09IC0xID8gbnVsbCA6IG9wdGlvbnNbaV0pO1xuXG4gIGNvbnN0IGxpc3Rib3ggPSB7YWN0aXZlT3B0aW9uLCBhY3RpdmVPcHRpb25SZWYsIHNldEFjdGl2ZU9wdGlvbiwgc2VsZWN0ZWR9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiAoKSA9PiBjbGVhclRpbWVvdXQodGltZW91dC5jdXJyZW50KSwgW10pO1xuXG4gIGNvbnN0IGNvbWJvYm94U3RhdGUgPSB1c2VDb21ib2JveFN0YXRlKCk7XG4gIGNvbnN0IHtoaWRlLCB2aXNpYmxlfSA9IGNvbWJvYm94U3RhdGU7XG5cbiAgY29uc3Qge3JlZjogY29udGFpbmVyUmVmLCBvcHRpb25zUmVmLCAuLi5jb21ib2JveH0gPSB1c2VDb21ib2JveChjb21ib2JveFN0YXRlLCB7XG4gICAgJ2FyaWEtaGFzcG9wdXAnOiAnbGlzdGJveCcsXG4gICAgY2xhc3NOYW1lOiBwcm9wcy5jbGFzc05hbWUsXG4gICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgIGVycm9yOiBwcm9wcy5lcnJvcixcbiAgICB0b3VjaGVkOiBwcm9wcy50b3VjaGVkLFxuICAgIG9wZW5lZDogY29tYm9ib3hTdGF0ZS52aXNpYmxlLFxuICB9KTtcblxuICBjb25zdCBoYW5kbGVLZXlEb3duID0gZSA9PiB7XG4gICAgY29uc3Qga2V5ID0gZS5rZXk7XG4gICAgY29uc3QgYWN0aXZlSW5kZXggPSBvcHRpb25zLmluZGV4T2YoYWN0aXZlT3B0aW9uKTtcblxuICAgIGNvbnN0IHNlbGVjdCA9ICgpID0+IHNlbGVjdEl0ZW0oYWN0aXZlT3B0aW9uID8gYWN0aXZlT3B0aW9uLnZhbHVlIDogbnVsbCk7XG5cbiAgICBjb25zdCBwcmV2ID0gYWN0aXZlSW5kZXggPD0gMCA/IG9wdGlvbnMubGVuZ3RoIC0gMSA6IGFjdGl2ZUluZGV4IC0gMTtcbiAgICBjb25zdCBuZXh0ID0gYWN0aXZlSW5kZXggPT09IC0xIHx8IGFjdGl2ZUluZGV4ID49IG9wdGlvbnMubGVuZ3RoIC0gMSA/IDAgOiBhY3RpdmVJbmRleCArIDE7XG5cbiAgICBjb25zdCBrZXlNYXAgPSB7XG4gICAgICBFc2NhcGU6ICgpID0+IHNldEFjdGl2ZUluZGV4KC0xKSxcbiAgICAgIEFycm93VXA6ICFlLmRlZmF1bHRQcmV2ZW50ZWQgJiYgKCgpID0+IHNldEFjdGl2ZUluZGV4KHByZXYpKSxcbiAgICAgIEFycm93RG93bjogIWUuZGVmYXVsdFByZXZlbnRlZCAmJiAoKCkgPT4gc2V0QWN0aXZlSW5kZXgobmV4dCkpLFxuICAgICAgJyAnOiB2aXNpYmxlICYmIHNlbGVjdCxcbiAgICAgIEVudGVyOiB2aXNpYmxlICYmIHNlbGVjdCxcbiAgICB9O1xuXG4gICAgY29uc3QgYWN0aW9uID0ga2V5TWFwW2tleV07XG4gICAgaWYgKGFjdGlvbikge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgYWN0aW9uKGUpO1xuICAgIH1cbiAgfTtcblxuICB1c2VTY3JvbGxJbnRvVmlldyh7Y29udGFpbmVyUmVmOiBvcHRpb25zUmVmLCB0YXJnZXRSZWY6IGFjdGl2ZU9wdGlvblJlZn0sIFtcbiAgICBhY3RpdmVPcHRpb24sXG4gICAgdmlzaWJsZSxcbiAgXSk7XG5cbiAgY29uc3QgY29tYm9ib3hJbnB1dCA9IHVzZUNvbWJvYm94SW5wdXQoY29tYm9ib3hTdGF0ZSwge1xuICAgICdhcmlhLWF1dG9jb21wbGV0ZSc6ICdsaXN0JyxcbiAgICAnYXJpYS1sYWJlbGxlZGJ5JzogYXJpYUxhYmVsbGVkQnksXG4gICAgdmFsdWU6IHNlbGVjdGVkID8gc2VsZWN0ZWQubGFiZWwgOiAnJyxcbiAgICAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JzogIWFjdGl2ZU9wdGlvblJlZi5jdXJyZW50ID8gJycgOiBhY3RpdmVPcHRpb25SZWYuY3VycmVudC5pZCxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25TZWxlY3Q6IGUgPT4gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnNldFNlbGVjdGlvblJhbmdlKDAsIDApLFxuICAgIGlkOiBwcm9wcy5pZCxcbiAgICBuYW1lOiBwcm9wcy5uYW1lLFxuICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZCxcbiAgICBwbGFjZWhvbGRlcjogcHJvcHMucGxhY2Vob2xkZXIsXG4gICAgZXJyb3I6IHByb3BzLmVycm9yLFxuICAgIHRvdWNoZWQ6IHByb3BzLnRvdWNoZWQsXG4gICAgcmVhZE9ubHk6IHRydWUsXG4gIH0pO1xuXG4gIGNvbnN0IGNoYW5nZUV2ZW50ID0gdXNlQ2FsbGJhY2soXG4gICAgb3B0aW9uVmFsdWUgPT4ge1xuICAgICAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoJ2NoYW5nZScpO1xuICAgICAgY29udGFpbmVyUmVmLmN1cnJlbnQudmFsdWUgPSBvcHRpb25WYWx1ZTtcbiAgICAgIGNvbnRhaW5lclJlZi5jdXJyZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH0sXG4gICAgW2NvbnRhaW5lclJlZl1cbiAgKTtcblxuICBmdW5jdGlvbiBzZWxlY3RJdGVtKG9wdGlvblZhbHVlKSB7XG4gICAgb25DaGFuZ2UoY2hhbmdlRXZlbnQob3B0aW9uVmFsdWUpKTtcbiAgICB0aW1lb3V0LmN1cnJlbnQgPSBzZXRUaW1lb3V0KGhpZGUsIDEwMCk7XG4gIH1cblxuICBjb25zdCBjb21ib2JveEZseW91dCA9IHVzZUNvbWJvYm94Rmx5b3V0KGNvbWJvYm94U3RhdGUpO1xuXG4gIGNvbnN0IG1vdmUgPSB1c2VDYWxsYmFjayhcbiAgICBvcHRpb24gPT4ge1xuICAgICAgc2V0QWN0aXZlT3B0aW9uKG9wdGlvbik7XG5cbiAgICAgIGlmICh2aXNpYmxlKSByZXR1cm47XG5cbiAgICAgIG9uQ2hhbmdlKGNoYW5nZUV2ZW50KG9wdGlvbi52YWx1ZSkpO1xuICAgIH0sXG4gICAgW3Zpc2libGUsIG9uQ2hhbmdlLCBjaGFuZ2VFdmVudF1cbiAgKTtcblxuICB1c2VKdW1wVG9PcHRpb24oY29tYm9ib3hJbnB1dC5yZWYsIHtvcHRpb25zLCBtb3ZlfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Q29udGFpbmVyIHJlZj17Y29udGFpbmVyUmVmfSBoYXNFcnJvcj17cHJvcHMudG91Y2hlZCAmJiBwcm9wcy5lcnJvcn0gb3BlbmVkPXt2aXNpYmxlfT5cbiAgICAgIDxDb21ib2JveCB7Li4uY29tYm9ib3h9PlxuICAgICAgICA8RXpUZXh0SW5wdXQgey4uLmNvbWJvYm94SW5wdXR9IC8+XG4gICAgICAgIDxJbnNldEljb24gaW5zZXRZMCByaWdodDAgcHIyPlxuICAgICAgICAgIDxDaGV2cm9uSWNvbiBmbGlwPXt2aXNpYmxlfSAvPlxuICAgICAgICA8L0luc2V0SWNvbj5cbiAgICAgIDwvQ29tYm9ib3g+XG4gICAgICB7dmlzaWJsZSAmJiAoXG4gICAgICAgIDxMaXN0Ym94UG9wb3ZlclxuICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT17YXJpYUxhYmVsbGVkQnl9XG4gICAgICAgICAgdGFyZ2V0UmVmPXtjb21ib2JveElucHV0LnJlZn1cbiAgICAgICAgICB7Li4uY29tYm9ib3hGbHlvdXR9XG4gICAgICAgICAgcmVmPXtvcHRpb25zUmVmIGFzIGFueX1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBjb21ib2JveElucHV0LnJlZi5jdXJyZW50LmZvY3VzKCl9XG4gICAgICAgID5cbiAgICAgICAgICB7aGFzR3JvdXBlZE9wdGlvbnMob3B0aW9ucykgPyAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICB7ZmxhdHRlbihvcHRpb25zKS5tYXAoZ3JvdXAgPT4gKFxuICAgICAgICAgICAgICAgIDxPcHRHcm91cCB7Li4ubGlzdGJveH0gZ3JvdXA9e2dyb3VwfSBrZXk9e2dyb3VwWzBdfSBzZWxlY3RJdGVtPXtzZWxlY3RJdGVtfSAvPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICBvcHRpb25zLm1hcChvID0+IChcbiAgICAgICAgICAgICAgPE9wdGlvbiB7Li4ubGlzdGJveH0gb3B0aW9uPXtvfSBrZXk9e28ubGFiZWx9IG9uQ2xpY2s9eygpID0+IHNlbGVjdEl0ZW0oby52YWx1ZSl9IC8+XG4gICAgICAgICAgICApKVxuICAgICAgICAgICl9XG4gICAgICAgIDwvTGlzdGJveFBvcG92ZXI+XG4gICAgICApfVxuICAgIDwvQ29udGFpbmVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRXpTZWxlY3Q7XG4iXX0=