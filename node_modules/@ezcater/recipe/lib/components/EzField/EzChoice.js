"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _EzCheckbox = _interopRequireDefault(require("../EzCheckbox"));

var _styled = _interopRequireDefault(require("../../themes/styled"));

var _EzRadioButton = _interopRequireDefault(require("../EzRadioButton"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Options =
/*#__PURE__*/
(0, _styled["default"])("div", {
  target: "evekzw00"
})("> label + label{margin-top:", function (_ref) {
  var theme = _ref.theme;
  return theme.spacing.xs;
}, ";}");
var Label =
/*#__PURE__*/
(0, _styled["default"])("label", {
  target: "evekzw01"
})("display:block;margin-top:", function (_ref2) {
  var theme = _ref2.theme;
  return theme.spacing.xs;
}, ";> *{margin-right:", function (_ref3) {
  var theme = _ref3.theme;
  return theme.spacing.xs;
}, ";}");

var _default = function _default(props) {
  var type = props.type,
      fieldName = props.name,
      _props$value = props.value,
      selected = _props$value === void 0 ? [] : _props$value,
      options = props.options,
      onChange = props.onChange,
      onFocus = props.onFocus,
      onBlur = props.onBlur;
  var multiple = type === 'checkbox';
  var name = multiple ? "".concat(fieldName, "[]") : fieldName;

  function handleChange(e) {
    var _e$currentTarget = e.currentTarget,
        value = _e$currentTarget.value,
        checked = _e$currentTarget.checked;
    var newSelection = multiple ? checked ? [value].concat(selected) : selected.filter(function (s) {
      return s !== value;
    }) : value;
    onChange(_objectSpread({}, e, {
      target: _objectSpread({}, props, {
        checked: checked,
        value: newSelection
      })
    }));
  }

  return _react["default"].createElement(Options, null, options.map(function (choice, i) {
    var label = choice.label,
        disabled = choice.disabled,
        value = choice.value;
    var inputProps = {
      checked: 'value' in props ? multiple ? selected.indexOf(value) >= 0 : value === selected : undefined,
      disabled: disabled,
      label: label,
      name: name,
      onChange: handleChange,
      onFocus: onFocus,
      onBlur: onBlur,
      type: type,
      value: value
    };

    var input = _react["default"].createElement(multiple ? _EzCheckbox["default"] : _EzRadioButton["default"], inputProps);

    return _react["default"].createElement(Label, {
      key: i
    }, input, label);
  }));
};

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0V6RmllbGQvRXpDaG9pY2UudHN4Il0sIm5hbWVzIjpbIk9wdGlvbnMiLCJzdHlsZWQiLCJ0aGVtZSIsInNwYWNpbmciLCJ4cyIsIkxhYmVsIiwicHJvcHMiLCJ0eXBlIiwiZmllbGROYW1lIiwibmFtZSIsInZhbHVlIiwic2VsZWN0ZWQiLCJvcHRpb25zIiwib25DaGFuZ2UiLCJvbkZvY3VzIiwib25CbHVyIiwibXVsdGlwbGUiLCJoYW5kbGVDaGFuZ2UiLCJlIiwiY3VycmVudFRhcmdldCIsImNoZWNrZWQiLCJuZXdTZWxlY3Rpb24iLCJjb25jYXQiLCJmaWx0ZXIiLCJzIiwidGFyZ2V0IiwibWFwIiwiY2hvaWNlIiwiaSIsImxhYmVsIiwiZGlzYWJsZWQiLCJpbnB1dFByb3BzIiwiaW5kZXhPZiIsInVuZGVmaW5lZCIsImlucHV0IiwiUmVhY3QiLCJjcmVhdGVFbGVtZW50IiwiRXpDaGVja2JveCIsIkV6UmFkaW9CdXR0b24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLE9BQU87QUFBQTtBQUFBLElBQUdDLGtCQUFIO0FBQUE7QUFBQSxrQ0FFSztBQUFBLE1BQUVDLEtBQUYsUUFBRUEsS0FBRjtBQUFBLFNBQWFBLEtBQUssQ0FBQ0MsT0FBTixDQUFjQyxFQUEzQjtBQUFBLENBRkwsT0FBYjtBQU1BLElBQU1DLEtBQUs7QUFBQTtBQUFBLElBQUdKLGtCQUFIO0FBQUE7QUFBQSxnQ0FFSztBQUFBLE1BQUVDLEtBQUYsU0FBRUEsS0FBRjtBQUFBLFNBQWFBLEtBQUssQ0FBQ0MsT0FBTixDQUFjQyxFQUEzQjtBQUFBLENBRkwsd0JBS1M7QUFBQSxNQUFFRixLQUFGLFNBQUVBLEtBQUY7QUFBQSxTQUFhQSxLQUFLLENBQUNDLE9BQU4sQ0FBY0MsRUFBM0I7QUFBQSxDQUxULE9BQVg7O2VBU2Usa0JBQUFFLEtBQUssRUFBSTtBQUFBLE1BQ2ZDLElBRGUsR0FDb0VELEtBRHBFLENBQ2ZDLElBRGU7QUFBQSxNQUNIQyxTQURHLEdBQ29FRixLQURwRSxDQUNURyxJQURTO0FBQUEscUJBQ29FSCxLQURwRSxDQUNRSSxLQURSO0FBQUEsTUFDZUMsUUFEZiw2QkFDMEIsRUFEMUI7QUFBQSxNQUM4QkMsT0FEOUIsR0FDb0VOLEtBRHBFLENBQzhCTSxPQUQ5QjtBQUFBLE1BQ3VDQyxRQUR2QyxHQUNvRVAsS0FEcEUsQ0FDdUNPLFFBRHZDO0FBQUEsTUFDaURDLE9BRGpELEdBQ29FUixLQURwRSxDQUNpRFEsT0FEakQ7QUFBQSxNQUMwREMsTUFEMUQsR0FDb0VULEtBRHBFLENBQzBEUyxNQUQxRDtBQUd0QixNQUFNQyxRQUFRLEdBQUdULElBQUksS0FBSyxVQUExQjtBQUNBLE1BQU1FLElBQUksR0FBR08sUUFBUSxhQUFNUixTQUFOLFVBQXNCQSxTQUEzQzs7QUFFQSxXQUFTUyxZQUFULENBQXNCQyxDQUF0QixFQUE4RDtBQUFBLDJCQUNuQ0EsQ0FBQyxDQUFDQyxhQURpQztBQUFBLFFBQ3JEVCxLQURxRCxvQkFDckRBLEtBRHFEO0FBQUEsUUFDOUNVLE9BRDhDLG9CQUM5Q0EsT0FEOEM7QUFHNUQsUUFBTUMsWUFBWSxHQUFHTCxRQUFRLEdBQ3pCSSxPQUFPLEdBQ0wsQ0FBQ1YsS0FBRCxFQUFRWSxNQUFSLENBQWVYLFFBQWYsQ0FESyxHQUVMQSxRQUFRLENBQUNZLE1BQVQsQ0FBZ0IsVUFBQUMsQ0FBQztBQUFBLGFBQUlBLENBQUMsS0FBS2QsS0FBVjtBQUFBLEtBQWpCLENBSHVCLEdBSXpCQSxLQUpKO0FBTUFHLElBQUFBLFFBQVEsbUJBQ0hLLENBREc7QUFFTk8sTUFBQUEsTUFBTSxvQkFDRG5CLEtBREM7QUFFSmMsUUFBQUEsT0FBTyxFQUFQQSxPQUZJO0FBR0pWLFFBQUFBLEtBQUssRUFBRVc7QUFISDtBQUZBLE9BQVI7QUFRRDs7QUFFRCxTQUNFLGdDQUFDLE9BQUQsUUFDR1QsT0FBTyxDQUFDYyxHQUFSLENBQVksVUFBQ0MsTUFBRCxFQUFTQyxDQUFULEVBQWU7QUFBQSxRQUNuQkMsS0FEbUIsR0FDT0YsTUFEUCxDQUNuQkUsS0FEbUI7QUFBQSxRQUNaQyxRQURZLEdBQ09ILE1BRFAsQ0FDWkcsUUFEWTtBQUFBLFFBQ0ZwQixLQURFLEdBQ09pQixNQURQLENBQ0ZqQixLQURFO0FBRTFCLFFBQU1xQixVQUFVLEdBQUc7QUFDakJYLE1BQUFBLE9BQU8sRUFDTCxXQUFXZCxLQUFYLEdBQ0lVLFFBQVEsR0FDTkwsUUFBUSxDQUFDcUIsT0FBVCxDQUFpQnRCLEtBQWpCLEtBQTJCLENBRHJCLEdBRU5BLEtBQUssS0FBS0MsUUFIaEIsR0FJSXNCLFNBTlc7QUFPakJILE1BQUFBLFFBQVEsRUFBUkEsUUFQaUI7QUFRakJELE1BQUFBLEtBQUssRUFBTEEsS0FSaUI7QUFTakJwQixNQUFBQSxJQUFJLEVBQUpBLElBVGlCO0FBVWpCSSxNQUFBQSxRQUFRLEVBQUVJLFlBVk87QUFXakJILE1BQUFBLE9BQU8sRUFBUEEsT0FYaUI7QUFZakJDLE1BQUFBLE1BQU0sRUFBTkEsTUFaaUI7QUFhakJSLE1BQUFBLElBQUksRUFBSkEsSUFiaUI7QUFjakJHLE1BQUFBLEtBQUssRUFBTEE7QUFkaUIsS0FBbkI7O0FBZ0JBLFFBQU13QixLQUFLLEdBQUdDLGtCQUFNQyxhQUFOLENBQW9CcEIsUUFBUSxHQUFHcUIsc0JBQUgsR0FBZ0JDLHlCQUE1QyxFQUEyRFAsVUFBM0QsQ0FBZDs7QUFFQSxXQUNFLGdDQUFDLEtBQUQ7QUFBTyxNQUFBLEdBQUcsRUFBRUg7QUFBWixPQUNHTSxLQURILEVBRUdMLEtBRkgsQ0FERjtBQU1ELEdBMUJBLENBREgsQ0FERjtBQStCRCxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBFekNoZWNrYm94IGZyb20gJy4uL0V6Q2hlY2tib3gnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi8uLi90aGVtZXMvc3R5bGVkJztcbmltcG9ydCBFelJhZGlvQnV0dG9uIGZyb20gJy4uL0V6UmFkaW9CdXR0b24nO1xuXG5jb25zdCBPcHRpb25zID0gc3R5bGVkLmRpdmBcbiAgPiBsYWJlbCArIGxhYmVsIHtcbiAgICBtYXJnaW4tdG9wOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nLnhzfTtcbiAgfVxuYDtcblxuY29uc3QgTGFiZWwgPSBzdHlsZWQubGFiZWxgXG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW4tdG9wOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nLnhzfTtcblxuICA+ICoge1xuICAgIG1hcmdpbi1yaWdodDogJHsoe3RoZW1lfSkgPT4gdGhlbWUuc3BhY2luZy54c307XG4gIH1cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IHByb3BzID0+IHtcbiAgY29uc3Qge3R5cGUsIG5hbWU6IGZpZWxkTmFtZSwgdmFsdWU6IHNlbGVjdGVkID0gW10sIG9wdGlvbnMsIG9uQ2hhbmdlLCBvbkZvY3VzLCBvbkJsdXJ9ID0gcHJvcHM7XG5cbiAgY29uc3QgbXVsdGlwbGUgPSB0eXBlID09PSAnY2hlY2tib3gnO1xuICBjb25zdCBuYW1lID0gbXVsdGlwbGUgPyBgJHtmaWVsZE5hbWV9W11gIDogZmllbGROYW1lO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlOiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50Pikge1xuICAgIGNvbnN0IHt2YWx1ZSwgY2hlY2tlZH0gPSBlLmN1cnJlbnRUYXJnZXQ7XG5cbiAgICBjb25zdCBuZXdTZWxlY3Rpb24gPSBtdWx0aXBsZVxuICAgICAgPyBjaGVja2VkXG4gICAgICAgID8gW3ZhbHVlXS5jb25jYXQoc2VsZWN0ZWQpXG4gICAgICAgIDogc2VsZWN0ZWQuZmlsdGVyKHMgPT4gcyAhPT0gdmFsdWUpXG4gICAgICA6IHZhbHVlO1xuXG4gICAgb25DaGFuZ2Uoe1xuICAgICAgLi4uZSxcbiAgICAgIHRhcmdldDoge1xuICAgICAgICAuLi5wcm9wcyxcbiAgICAgICAgY2hlY2tlZCxcbiAgICAgICAgdmFsdWU6IG5ld1NlbGVjdGlvbixcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxPcHRpb25zPlxuICAgICAge29wdGlvbnMubWFwKChjaG9pY2UsIGkpID0+IHtcbiAgICAgICAgY29uc3Qge2xhYmVsLCBkaXNhYmxlZCwgdmFsdWV9ID0gY2hvaWNlO1xuICAgICAgICBjb25zdCBpbnB1dFByb3BzID0ge1xuICAgICAgICAgIGNoZWNrZWQ6XG4gICAgICAgICAgICAndmFsdWUnIGluIHByb3BzXG4gICAgICAgICAgICAgID8gbXVsdGlwbGVcbiAgICAgICAgICAgICAgICA/IHNlbGVjdGVkLmluZGV4T2YodmFsdWUpID49IDBcbiAgICAgICAgICAgICAgICA6IHZhbHVlID09PSBzZWxlY3RlZFxuICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICAgICAgb25Gb2N1cyxcbiAgICAgICAgICBvbkJsdXIsXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaW5wdXQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KG11bHRpcGxlID8gRXpDaGVja2JveCA6IEV6UmFkaW9CdXR0b24sIGlucHV0UHJvcHMpO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPExhYmVsIGtleT17aX0+XG4gICAgICAgICAgICB7aW5wdXR9XG4gICAgICAgICAgICB7bGFiZWx9XG4gICAgICAgICAgPC9MYWJlbD5cbiAgICAgICAgKTtcbiAgICAgIH0pfVxuICAgIDwvT3B0aW9ucz5cbiAgKTtcbn07XG4iXX0=