"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _sosia = require("sosia");

var _react2 = require("@testing-library/react");

var _testUtils = _interopRequireDefault(require("react-dom/test-utils"));

var _EzSelectTest = _interopRequireDefault(require("./EzSelect.test.md"));

require("../mocks");

var _EzField = _interopRequireDefault(require("../EzField"));

var _jestGlobals = require("../../../jest-globals");

var _index = require("../../index");

var _Open = _interopRequireDefault(require("../Open"));

var _Media = _interopRequireDefault(require("../Media"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var scope = {
  EzField: _EzField["default"],
  EzButton: _index.EzButton,
  EzLayout: _index.EzLayout,
  EzFormLayout: _index.EzFormLayout,
  Open: _Open["default"],
  Media: _Media["default"]
};
describe('EzField', function () {
  (0, _sosia.visualSnapshots)({
    markdown: _EzSelectTest["default"],
    scope: _objectSpread({}, scope, {
      fireEvent: _react2.fireEvent
    })
  });
  describe('select list', function () {
    var inputLabel = 'Select dropdown';
    var options = [{
      label: 'All Upcoming',
      value: 'upcoming'
    }, {
      label: 'Today',
      value: 'today'
    }, {
      label: 'Tomorrow',
      value: 'tomorrow'
    }, {
      label: 'All Time',
      value: 'all'
    }, {
      label: 'Yesterday',
      value: 'yesterday'
    }, {
      label: 'Last 7 Days',
      value: 'week'
    }, {
      label: 'This Month',
      value: 'month'
    }];
    it('should suppress default browser behavior to select input text when tab focused', function () {
      var _render = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "select",
        label: inputLabel,
        options: options,
        value: "upcoming"
      })),
          container = _render.container;

      var input = (0, _react2.getByLabelText)(container, inputLabel); // NOTE: We can't actually simulate the tab key causing the focus/select behavior
      // as firing events does not change focus
      // see: https://github.com/jsdom/jsdom/issues/2102#issuecomment-355340966

      input.select();
      (0, _react2.act)(function () {
        return _testUtils["default"].Simulate.select(input);
      });
      expect(input.selectionEnd - input.selectionStart).toEqual(0);
    });
    it('should move virtual focus with arrow keys', function () {
      var _render2 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "select",
        label: inputLabel,
        options: options,
        value: "upcoming"
      })),
          container = _render2.container;

      var input = (0, _react2.getByLabelText)(container, inputLabel);

      var keyDown = function keyDown(key) {
        return _react2.fireEvent.keyDown(input, {
          key: key
        });
      };

      keyDown('ArrowDown');
      var option1 = (0, _react2.getByText)(container, 'All Upcoming');
      var option2 = (0, _react2.getByText)(container, 'Today');
      var lastOption = (0, _react2.getByText)(container, 'This Month');
      expect(option1).toHaveAttribute('aria-selected', 'true');
      expect(option2).toHaveAttribute('aria-selected', 'false');
      keyDown('ArrowDown');
      expect(option1).toHaveAttribute('aria-selected', 'false');
      expect(option2).toHaveAttribute('aria-selected', 'true');
      keyDown('ArrowUp');
      expect(option1).toHaveAttribute('aria-selected', 'true');
      expect(option2).toHaveAttribute('aria-selected', 'false');
      keyDown('ArrowUp');
      expect(lastOption).toHaveAttribute('aria-selected', 'true');
      expect(option1).toHaveAttribute('aria-selected', 'false');
      keyDown('ArrowDown');
      expect(option1).toHaveAttribute('aria-selected', 'true');
      expect(lastOption).toHaveAttribute('aria-selected', 'false');
    });
    it('should move virtual focus by matching typed characters to an option', function () {
      var _render3 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "select",
        label: inputLabel,
        options: options,
        value: "today"
      })),
          container = _render3.container;

      var input = (0, _react2.getByLabelText)(container, inputLabel);

      var keyDown = function keyDown(key) {
        return _react2.fireEvent.keyDown(input, {
          key: key
        });
      }; // open the menu


      keyDown('ArrowDown');
      var optionAllUpcoming = (0, _react2.getByText)(container, 'All Upcoming');
      var optionAllTime = (0, _react2.getByText)(container, 'All Time');
      expect(optionAllUpcoming).toHaveAttribute('aria-selected', 'false');
      expect(optionAllTime).toHaveAttribute('aria-selected', 'false');
      keyDown('a');
      expect(optionAllUpcoming).toHaveAttribute('aria-selected', 'true');
      expect(optionAllTime).toHaveAttribute('aria-selected', 'false');
      keyDown('l');
      keyDown('l');
      keyDown(' ');
      keyDown('t');
      expect(optionAllUpcoming).toHaveAttribute('aria-selected', 'false');
      expect(optionAllTime).toHaveAttribute('aria-selected', 'true'); // ignore subsequent "misses"

      keyDown('z');
      expect(optionAllUpcoming).toHaveAttribute('aria-selected', 'false');
      expect(optionAllTime).toHaveAttribute('aria-selected', 'true'); // ignore non-alphanumeric characters

      keyDown('*');
      expect(optionAllUpcoming).toHaveAttribute('aria-selected', 'false');
      expect(optionAllTime).toHaveAttribute('aria-selected', 'true');
    });
    it('should close the dropdown when escape is pressed', function () {
      var _render4 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "select",
        label: inputLabel,
        options: options,
        value: "upcoming"
      })),
          container = _render4.container,
          queryByText = _render4.queryByText;

      var input = (0, _react2.getByLabelText)(container, inputLabel);

      var keyDown = function keyDown(key) {
        return _react2.fireEvent.keyDown(input, {
          key: key
        });
      };

      _react2.fireEvent.mouseDown(input);

      expect(queryByText('Today')).not.toBeNull();
      keyDown('Escape');
      expect(queryByText('Today')).toBeNull();
    });
    it('should trigger onChange for the current item when enter is pressed', function () {
      var onChange = jest.fn();

      var _render5 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "select",
        label: inputLabel,
        options: options,
        value: "upcoming",
        onChange: onChange
      })),
          container = _render5.container;

      var input = (0, _react2.getByLabelText)(container, inputLabel);

      var keyDown = function keyDown(key) {
        return _react2.fireEvent.keyDown(input, {
          key: key
        });
      }; // open the menu


      keyDown('ArrowDown'); // select the second next option (value is "today")

      keyDown('ArrowDown');
      keyDown('Enter');
      expect(onChange).toHaveBeenCalled();
      var lastCall = onChange.mock.calls[onChange.mock.calls.length - 1];
      expect(lastCall[0].target.value).toEqual('today');
    });
    it('should trigger onChange for the current item when space is pressed', function () {
      var onChange = jest.fn();

      var _render6 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "select",
        label: inputLabel,
        options: options,
        value: "upcoming",
        onChange: onChange
      })),
          container = _render6.container;

      var input = (0, _react2.getByLabelText)(container, inputLabel);

      var keyDown = function keyDown(key) {
        return _react2.fireEvent.keyDown(input, {
          key: key
        });
      }; // open the menu


      keyDown('ArrowDown'); // select the second next option (value is "today")

      keyDown('ArrowDown');
      keyDown(' ');
      expect(onChange).toHaveBeenCalled();
      var lastCall = onChange.mock.calls[onChange.mock.calls.length - 1];
      expect(lastCall[0].target.value).toEqual('today');
    });
    it('should trigger onChange for the current item when clicked', function () {
      var onChange = jest.fn();

      var _render7 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "select",
        label: inputLabel,
        options: options,
        value: "upcoming",
        onChange: onChange
      })),
          container = _render7.container;

      var input = (0, _react2.getByLabelText)(container, inputLabel); // open the menu

      _react2.fireEvent.mouseDown(input);

      var option2 = (0, _react2.getByText)(container, 'Today');

      _react2.fireEvent.mouseOver(option2);

      _react2.fireEvent.click(option2);

      expect(onChange).toHaveBeenCalled();
      var lastCall = onChange.mock.calls[onChange.mock.calls.length - 1];
      expect(lastCall[0].target.value).toEqual('today');
    });
    it('prevents the default event propagation on mouseDown on an option', function () {
      var onChange = jest.fn();

      var _render8 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "select",
        label: inputLabel,
        options: options,
        value: "upcoming",
        onChange: onChange
      })),
          container = _render8.container;

      var input = (0, _react2.getByLabelText)(container, inputLabel); // open the menu

      _react2.fireEvent.mouseDown(input);

      var option2 = (0, _react2.getByText)(container, 'Today');

      _react2.fireEvent.mouseOver(option2);

      var mockEvent = new MouseEvent('mousedown', {
        bubbles: true
      });
      Object.assign(mockEvent, {
        preventDefault: jest.fn()
      });
      (0, _react2.fireEvent)(option2, mockEvent);
      expect(mockEvent.preventDefault).toHaveBeenCalled();
    });
    it('should not trigger onChange on the initial render', function () {
      var onChange = jest.fn();
      (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "select",
        label: inputLabel,
        options: options,
        value: "upcoming",
        onChange: onChange
      }));
      expect(onChange).not.toHaveBeenCalled();
    });
    it('should trigger onChange after matching typed characters to an option, even with the list is closed', function () {
      var onChange = jest.fn();

      var _render9 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "select",
        label: inputLabel,
        options: options,
        value: "today",
        onChange: onChange
      })),
          container = _render9.container;

      var input = (0, _react2.getByLabelText)(container, inputLabel);

      var keyDown = function keyDown(key) {
        return _react2.fireEvent.keyDown(input, {
          key: key
        });
      };

      keyDown('y');
      expect(onChange).toHaveBeenCalled();
      var lastCall = onChange.mock.calls[onChange.mock.calls.length - 1];
      expect(lastCall[0].target.value).toEqual('yesterday');
    });
    it('should not trigger onChange when re-rendered with new props', function () {
      var onChange = jest.fn();

      var _render10 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "select",
        label: inputLabel,
        options: options,
        value: "upcoming",
        onChange: onChange
      })),
          rerender = _render10.rerender; // change to a new value


      rerender(_react["default"].createElement(_EzField["default"], {
        type: "select",
        label: inputLabel,
        options: options,
        value: "tomorrow",
        onChange: onChange
      })); // "reset" back to original value

      rerender(_react["default"].createElement(_EzField["default"], {
        type: "select",
        label: inputLabel,
        options: options,
        value: "upcoming",
        onChange: onChange
      }));
      expect(onChange).not.toHaveBeenCalled();
    });
    it('should support choices with numeric values', function () {
      var onChange = jest.fn();
      var optionsWithNumericValues = [{
        label: 'Short',
        value: 5
      }, {
        label: 'Medium',
        value: 10
      }, {
        label: 'Long',
        value: 15
      }];

      var _render11 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "select",
        label: inputLabel,
        options: optionsWithNumericValues,
        value: 5,
        onChange: onChange
      })),
          container = _render11.container;

      var input = (0, _react2.getByLabelText)(container, inputLabel);

      var keyDown = function keyDown(key) {
        return _react2.fireEvent.keyDown(input, {
          key: key
        });
      }; // open the menu


      keyDown('ArrowDown'); // select the second next option (value is "Medium")

      keyDown('ArrowDown');
      keyDown('Enter');
      expect(onChange).toHaveBeenCalled();
      var lastCall = onChange.mock.calls[onChange.mock.calls.length - 1];
      expect(lastCall[0].target.value).toEqual(10);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,