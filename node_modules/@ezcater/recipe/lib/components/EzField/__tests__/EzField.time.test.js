"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _sosia = require("sosia");

var _react2 = require("@testing-library/react");

var _EzTimeInputTest = _interopRequireDefault(require("./EzTimeInput.test.md"));

require("../mocks");

var _EzField = _interopRequireDefault(require("../EzField"));

var _jestGlobals = require("../../../jest-globals");

var _index = require("../../index");

var _Open = _interopRequireDefault(require("../Open"));

var _Media = _interopRequireDefault(require("../Media"));

var scope = {
  EzField: _EzField["default"],
  EzFormLayout: _index.EzFormLayout,
  Open: _Open["default"],
  Media: _Media["default"]
};
describe('EzField', function () {
  var label = 'Select time';
  (0, _sosia.visualSnapshots)({
    markdown: _EzTimeInputTest["default"],
    scope: scope
  });
  it('should generate the correct time range options', function () {
    var _render = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
      type: "time",
      label: label,
      start: "9:00 am",
      end: "5:00 pm",
      step: 60
    })),
        container = _render.container;

    typeArrowDownToOpenSelectList(container);
    var options = (0, _react2.getAllByRole)(container, 'option');
    expectHourlyOptionsFrom9to5(options);
  });
  it('start and end time props can omit space between the time and the meridiem', function () {
    var _render2 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
      type: "time",
      label: label,
      start: "9:00am",
      end: "5:00pm",
      step: 60
    })),
        container = _render2.container;

    typeArrowDownToOpenSelectList(container);
    var options = (0, _react2.getAllByRole)(container, 'option');
    expectHourlyOptionsFrom9to5(options);
  });
  it('start and end time props are case insensitive', function () {
    var _render3 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
      type: "time",
      label: label,
      start: "9:00AM",
      end: "5:00PM",
      step: 60
    })),
        container = _render3.container;

    typeArrowDownToOpenSelectList(container);
    var options = (0, _react2.getAllByRole)(container, 'option');
    expectHourlyOptionsFrom9to5(options);
  });
  it('should use default step of 60 minutes',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee() {
    var _render4, container, options;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _render4 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
              type: "time",
              label: label,
              start: "9:00 AM",
              end: "5:00 PM",
              value: "1:00 PM"
            })), container = _render4.container;
            typeArrowDownToOpenSelectList(container);
            options = (0, _react2.getAllByRole)(container, 'option');
            expectHourlyOptionsFrom9to5(options);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('should trigger onChange after matching typed characters to an option', function () {
    var _onChange = jest.fn();

    var FieldWithHooks = function FieldWithHooks(props) {
      var _React$useState = _react["default"].useState('12:00 pm'),
          _React$useState2 = (0, _slicedToArray2["default"])(_React$useState, 2),
          time = _React$useState2[0],
          setTime = _React$useState2[1];

      return _react["default"].createElement(_EzField["default"], (0, _extends2["default"])({
        value: time
      }, props, {
        onChange: function onChange(e) {
          _onChange(e);

          setTime(e.target.value);
        }
      }));
    };

    var _render5 = (0, _jestGlobals.fullRender)(_react["default"].createElement(FieldWithHooks, {
      type: "time",
      start: "9:00 AM",
      end: "5:00 PM",
      step: 30,
      label: label
    })),
        container = _render5.container,
        rerender = _render5.rerender;

    var input = (0, _react2.getByLabelText)(container, label);

    var keyDown = function keyDown(key) {
      return _react2.fireEvent.keyDown(input, {
        key: key
      });
    };

    (0, _react2.act)(function () {
      keyDown('3');
      keyDown('Enter');
    });
    rerender(_react["default"].createElement(FieldWithHooks, {
      type: "time",
      start: "9:00 AM",
      end: "5:00 PM",
      step: 30,
      label: label
    }));
    expect(_onChange).toHaveBeenCalledTimes(1);
  });

  var typeArrowDownToOpenSelectList = function typeArrowDownToOpenSelectList(container) {
    var input = (0, _react2.getByLabelText)(container, label);

    var keyDown = function keyDown(key) {
      return _react2.fireEvent.keyDown(input, {
        key: key
      });
    }; // open the menu


    keyDown('ArrowDown');
  };

  var expectHourlyOptionsFrom9to5 = function expectHourlyOptionsFrom9to5(options) {
    expect(options[0]).toHaveTextContent('9:00 AM');
    expect(options[1]).toHaveTextContent('10:00 AM');
    expect(options[2]).toHaveTextContent('11:00 AM');
    expect(options[3]).toHaveTextContent('12:00 PM');
    expect(options[4]).toHaveTextContent('1:00 PM');
    expect(options[5]).toHaveTextContent('2:00 PM');
    expect(options[6]).toHaveTextContent('3:00 PM');
    expect(options[7]).toHaveTextContent('4:00 PM');
    expect(options[8]).toHaveTextContent('5:00 PM');
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,