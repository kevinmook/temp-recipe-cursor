"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireDefault(require("react"));

var _sosia = require("sosia");

var _jestAxe = require("jest-axe");

var _react2 = require("@testing-library/react");

var _EzFieldTest = _interopRequireDefault(require("./EzField.test.md"));

var _EzField = _interopRequireDefault(require("../EzField.md"));

var _EzField2 = _interopRequireDefault(require("../EzField"));

var _jestGlobals = require("../../../jest-globals");

var _index = require("../../index");

var _Open = _interopRequireDefault(require("../Open"));

var _Media = _interopRequireDefault(require("../Media"));

var scope = {
  EzButton: _index.EzButton,
  EzField: _EzField2["default"],
  EzLayout: _index.EzLayout,
  EzFormLayout: _index.EzFormLayout,
  Open: _Open["default"],
  Media: _Media["default"]
};
describe('EzField', function () {
  (0, _sosia.visualSnapshots)({
    markdown: _EzField["default"],
    scope: scope
  });
  (0, _sosia.visualSnapshots)({
    markdown: _EzFieldTest["default"],
    scope: scope
  });
  it('should render with disabled input', function () {
    var _render = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField2["default"], {
      label: "Disabled input",
      disabled: true
    })),
        container = _render.container;

    expect((0, _react2.getByLabelText)(container, 'Disabled input')).toHaveAttribute('disabled');
  });
  it('should update character count as the user enters text', function () {
    var _render2 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField2["default"], {
      label: "Character Name",
      maxLength: 120
    })),
        container = _render2.container;

    expect(container).toHaveTextContent('0/120');
    var input = (0, _react2.getByLabelText)(container, 'Character Name');

    _react2.fireEvent.change(input, {
      target: {
        value: 'Oscar the grouch'
      }
    });

    expect(container).toHaveTextContent('16/120');
  });
  it('should call provided onChange handler if the input changes', function () {
    var spy = jest.fn();

    var _render3 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField2["default"], {
      label: "Basic Text",
      onChange: spy
    })),
        container = _render3.container;

    var input = (0, _react2.getByLabelText)(container, 'Basic Text');

    _react2.fireEvent.change(input, {
      target: {
        value: 'new value'
      }
    });

    expect(spy).toHaveBeenCalled();
  });
  it('should NOT update character count if the provided onChange handler prevents default', function () {
    var _render4 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField2["default"], {
      label: "Character Name",
      maxLength: 120,
      onChange: function onChange(e) {
        return e.preventDefault();
      }
    })),
        container = _render4.container;

    expect(container).toHaveTextContent('0/120');
    var input = (0, _react2.getByLabelText)(container, 'Character Name');

    _react2.fireEvent.change(input, {
      target: {
        value: 'Oscar the grouch'
      }
    });

    expect(container).toHaveTextContent('0/120');
  });
  it('should not lose focus when typing causes the validation state to toggle', function () {
    var Example = function Example() {
      var _React$useState = _react["default"].useState('value'),
          _React$useState2 = (0, _slicedToArray2["default"])(_React$useState, 2),
          value = _React$useState2[0],
          setValue = _React$useState2[1];

      return _react["default"].createElement(_EzField2["default"], {
        type: "text",
        label: "Field label",
        value: value,
        onChange: function onChange(e) {
          return setValue(e.target.value);
        },
        touched: true,
        error: value.length < 6 && 'Oops!',
        helperText: "click the checkbox to make input invalid"
      });
    };

    var _render5 = (0, _jestGlobals.fullRender)(_react["default"].createElement(Example, null)),
        container = _render5.container;

    var input = (0, _react2.getByLabelText)(container, 'Field label');
    (0, _react2.act)(function () {
      return input.focus();
    });
    expect(input).toHaveFocus();

    _react2.fireEvent.change(input, {
      target: {
        value: 'trigger the field error'
      }
    });

    expect(input).toHaveFocus();
  });
  it('should apply ref to the underlying input element', function () {
    var spy = jest.fn(function (el) {
      if (!el) return;
      expect(el.type).toEqual('text');
    });
    (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField2["default"], {
      label: "Character Name",
      ref: spy
    }));
    expect.assertions(1);
  });
  it('should meet accessibility guidelines',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee() {
    var wrapper, actual;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            wrapper = (0, _jestGlobals.renderToHtml)(_react["default"].createElement(_EzField2["default"], {
              label: "Basic text"
            }));
            _context.next = 3;
            return (0, _jestAxe.axe)(wrapper);

          case 3:
            actual = _context.sent;
            expect(actual).toHaveNoViolations();

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,