"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _EzField = _interopRequireDefault(require("../EzField"));

var _jestGlobals = require("../../../jest-globals");

describe('EzField', function () {
  describe('check box list', function () {
    var checkboxProps = {
      label: 'Multiple choice list',
      type: 'checkbox',
      multiple: true,
      options: [{
        label: 'Choice A',
        value: 'a'
      }, {
        label: 'Choice B',
        value: 'b'
      }, {
        label: 'Choice C',
        value: 'c'
      }]
    };
    it('should render checklist with correctly selected options', function () {
      var _render = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], (0, _extends2["default"])({}, checkboxProps, {
        value: ['a', 'c']
      }))),
          container = _render.container;

      expect((0, _react2.getByLabelText)(container, 'Choice A')).toHaveProperty('checked', true);
      expect((0, _react2.getByLabelText)(container, 'Choice B')).toHaveProperty('checked', false);
      expect((0, _react2.getByLabelText)(container, 'Choice C')).toHaveProperty('checked', true);
      var input = (0, _react2.getByLabelText)(container, 'Choice C');

      _react2.fireEvent.change(input, {
        target: {
          checked: false
        }
      });

      expect((0, _react2.getByLabelText)(container, 'Choice A')).toHaveProperty('checked', true);
      expect((0, _react2.getByLabelText)(container, 'Choice B')).toHaveProperty('checked', false);
      expect((0, _react2.getByLabelText)(container, 'Choice C')).toHaveProperty('checked', false);
    });
    it('should publish change event with the newly selected options', function () {
      var value;

      var onChange = function onChange(e) {
        value = e.target.value;
      };

      var _render2 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], (0, _extends2["default"])({}, checkboxProps, {
        value: ['a', 'c'],
        onChange: onChange
      }))),
          container = _render2.container;

      _react2.fireEvent.click((0, _react2.getByLabelText)(container, 'Choice B'));

      expect(value.sort()).toEqual(['a', 'b', 'c']);
    });
    it('should publish change event that does NOT include the unchecked option', function () {
      var value;

      var onChange = function onChange(e) {
        value = e.target.value;
      };

      var _render3 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], (0, _extends2["default"])({}, checkboxProps, {
        value: ['a', 'c'],
        onChange: onChange
      }))),
          container = _render3.container;

      _react2.fireEvent.click((0, _react2.getByLabelText)(container, 'Choice C'));

      expect(value).toEqual(['a']);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0V6RmllbGQvX190ZXN0c19fL0V6RmllbGQuY2hlY2tib3gudGVzdC50c3giXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJjaGVja2JveFByb3BzIiwibGFiZWwiLCJ0eXBlIiwibXVsdGlwbGUiLCJvcHRpb25zIiwidmFsdWUiLCJpdCIsImNvbnRhaW5lciIsImV4cGVjdCIsInRvSGF2ZVByb3BlcnR5IiwiaW5wdXQiLCJmaXJlRXZlbnQiLCJjaGFuZ2UiLCJ0YXJnZXQiLCJjaGVja2VkIiwib25DaGFuZ2UiLCJlIiwiY2xpY2siLCJzb3J0IiwidG9FcXVhbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUFBLFFBQVEsQ0FBQyxTQUFELEVBQVksWUFBTTtBQUN4QkEsRUFBQUEsUUFBUSxDQUFDLGdCQUFELEVBQW1CLFlBQU07QUFDL0IsUUFBTUMsYUFBYSxHQUFHO0FBQ3BCQyxNQUFBQSxLQUFLLEVBQUUsc0JBRGE7QUFFcEJDLE1BQUFBLElBQUksRUFBRSxVQUZjO0FBR3BCQyxNQUFBQSxRQUFRLEVBQUUsSUFIVTtBQUlwQkMsTUFBQUEsT0FBTyxFQUFFLENBQ1A7QUFBQ0gsUUFBQUEsS0FBSyxFQUFFLFVBQVI7QUFBb0JJLFFBQUFBLEtBQUssRUFBRTtBQUEzQixPQURPLEVBRVA7QUFBQ0osUUFBQUEsS0FBSyxFQUFFLFVBQVI7QUFBb0JJLFFBQUFBLEtBQUssRUFBRTtBQUEzQixPQUZPLEVBR1A7QUFBQ0osUUFBQUEsS0FBSyxFQUFFLFVBQVI7QUFBb0JJLFFBQUFBLEtBQUssRUFBRTtBQUEzQixPQUhPO0FBSlcsS0FBdEI7QUFXQUMsSUFBQUEsRUFBRSxDQUFDLHlEQUFELEVBQTRELFlBQU07QUFBQSxvQkFDOUMsNkJBQU8sZ0NBQUMsbUJBQUQsZ0NBQWFOLGFBQWI7QUFBNEIsUUFBQSxLQUFLLEVBQUUsQ0FBQyxHQUFELEVBQU0sR0FBTjtBQUFuQyxTQUFQLENBRDhD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ICdyZWFjdCc7XG5pbXBvcnQge2dldEJ5TGFiZWxUZXh0LCBmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IEV6RmllbGQgZnJvbSAnLi4vRXpGaWVsZCc7XG5pbXBvcnQge2Z1bGxSZW5kZXIgYXMgcmVuZGVyfSBmcm9tICcuLi8uLi8uLi9qZXN0LWdsb2JhbHMnO1xuXG5kZXNjcmliZSgnRXpGaWVsZCcsICgpID0+IHtcbiAgZGVzY3JpYmUoJ2NoZWNrIGJveCBsaXN0JywgKCkgPT4ge1xuICAgIGNvbnN0IGNoZWNrYm94UHJvcHMgPSB7XG4gICAgICBsYWJlbDogJ011bHRpcGxlIGNob2ljZSBsaXN0JyxcbiAgICAgIHR5cGU6ICdjaGVja2JveCcgYXMgJ2NoZWNrYm94JyxcbiAgICAgIG11bHRpcGxlOiB0cnVlIGFzIHRydWUsXG4gICAgICBvcHRpb25zOiBbXG4gICAgICAgIHtsYWJlbDogJ0Nob2ljZSBBJywgdmFsdWU6ICdhJ30sXG4gICAgICAgIHtsYWJlbDogJ0Nob2ljZSBCJywgdmFsdWU6ICdiJ30sXG4gICAgICAgIHtsYWJlbDogJ0Nob2ljZSBDJywgdmFsdWU6ICdjJ30sXG4gICAgICBdLFxuICAgIH07XG5cbiAgICBpdCgnc2hvdWxkIHJlbmRlciBjaGVja2xpc3Qgd2l0aCBjb3JyZWN0bHkgc2VsZWN0ZWQgb3B0aW9ucycsICgpID0+IHtcbiAgICAgIGNvbnN0IHtjb250YWluZXJ9ID0gcmVuZGVyKDxFekZpZWxkIHsuLi5jaGVja2JveFByb3BzfSB2YWx1ZT17WydhJywgJ2MnXX0gLz4pO1xuICAgICAgZXhwZWN0KGdldEJ5TGFiZWxUZXh0KGNvbnRhaW5lciwgJ0Nob2ljZSBBJykpLnRvSGF2ZVByb3BlcnR5KCdjaGVja2VkJywgdHJ1ZSk7XG4gICAgICBleHBlY3QoZ2V0QnlMYWJlbFRleHQoY29udGFpbmVyLCAnQ2hvaWNlIEInKSkudG9IYXZlUHJvcGVydHkoJ2NoZWNrZWQnLCBmYWxzZSk7XG4gICAgICBleHBlY3QoZ2V0QnlMYWJlbFRleHQoY29udGFpbmVyLCAnQ2hvaWNlIEMnKSkudG9IYXZlUHJvcGVydHkoJ2NoZWNrZWQnLCB0cnVlKTtcblxuICAgICAgY29uc3QgaW5wdXQgPSBnZXRCeUxhYmVsVGV4dChjb250YWluZXIsICdDaG9pY2UgQycpO1xuXG4gICAgICBmaXJlRXZlbnQuY2hhbmdlKGlucHV0LCB7dGFyZ2V0OiB7Y2hlY2tlZDogZmFsc2V9fSk7XG5cbiAgICAgIGV4cGVjdChnZXRCeUxhYmVsVGV4dChjb250YWluZXIsICdDaG9pY2UgQScpKS50b0hhdmVQcm9wZXJ0eSgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgZXhwZWN0KGdldEJ5TGFiZWxUZXh0KGNvbnRhaW5lciwgJ0Nob2ljZSBCJykpLnRvSGF2ZVByb3BlcnR5KCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgZXhwZWN0KGdldEJ5TGFiZWxUZXh0KGNvbnRhaW5lciwgJ0Nob2ljZSBDJykpLnRvSGF2ZVByb3BlcnR5KCdjaGVja2VkJywgZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwdWJsaXNoIGNoYW5nZSBldmVudCB3aXRoIHRoZSBuZXdseSBzZWxlY3RlZCBvcHRpb25zJywgKCkgPT4ge1xuICAgICAgbGV0IHZhbHVlO1xuICAgICAgY29uc3Qgb25DaGFuZ2UgPSBlID0+IHtcbiAgICAgICAgdmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgIH07XG4gICAgICBjb25zdCB7Y29udGFpbmVyfSA9IHJlbmRlcihcbiAgICAgICAgPEV6RmllbGQgey4uLmNoZWNrYm94UHJvcHN9IHZhbHVlPXtbJ2EnLCAnYyddfSBvbkNoYW5nZT17b25DaGFuZ2V9IC8+XG4gICAgICApO1xuXG4gICAgICBmaXJlRXZlbnQuY2xpY2soZ2V0QnlMYWJlbFRleHQoY29udGFpbmVyLCAnQ2hvaWNlIEInKSk7XG5cbiAgICAgIGV4cGVjdCh2YWx1ZS5zb3J0KCkpLnRvRXF1YWwoWydhJywgJ2InLCAnYyddKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcHVibGlzaCBjaGFuZ2UgZXZlbnQgdGhhdCBkb2VzIE5PVCBpbmNsdWRlIHRoZSB1bmNoZWNrZWQgb3B0aW9uJywgKCkgPT4ge1xuICAgICAgbGV0IHZhbHVlO1xuICAgICAgY29uc3Qgb25DaGFuZ2UgPSBlID0+IHtcbiAgICAgICAgdmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgIH07XG4gICAgICBjb25zdCB7Y29udGFpbmVyfSA9IHJlbmRlcihcbiAgICAgICAgPEV6RmllbGQgey4uLmNoZWNrYm94UHJvcHN9IHZhbHVlPXtbJ2EnLCAnYyddfSBvbkNoYW5nZT17b25DaGFuZ2V9IC8+XG4gICAgICApO1xuXG4gICAgICBmaXJlRXZlbnQuY2xpY2soZ2V0QnlMYWJlbFRleHQoY29udGFpbmVyLCAnQ2hvaWNlIEMnKSk7XG5cbiAgICAgIGV4cGVjdCh2YWx1ZSkudG9FcXVhbChbJ2EnXSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=