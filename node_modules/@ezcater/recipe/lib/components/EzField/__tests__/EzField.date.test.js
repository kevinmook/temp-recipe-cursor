"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _sosia = require("sosia");

var _dayjs = _interopRequireDefault(require("dayjs"));

var _react2 = require("@testing-library/react");

var _EzDateInputTest = _interopRequireDefault(require("./EzDateInput.test.md"));

var _EzField = _interopRequireDefault(require("../EzField"));

var _jestGlobals = require("../../../jest-globals");

var _index = require("../../index");

var _Open = _interopRequireDefault(require("../Open"));

var _Media = _interopRequireDefault(require("../Media"));

var scope = {
  EzField: _EzField["default"],
  EzLayout: _index.EzLayout,
  EzFormLayout: _index.EzFormLayout,
  Open: _Open["default"],
  Media: _Media["default"]
};
describe('EzField', function () {
  (0, _sosia.visualSnapshots)({
    markdown: _EzDateInputTest["default"],
    scope: scope
  });
  describe('date picker', function () {
    var inputLabel = 'Select delivery date';
    afterEach(jest.useRealTimers);
    it('should show calendar on click', function () {
      var _render = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "date",
        value: "01/01/2019",
        label: inputLabel
      })),
          container = _render.container;

      _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

      expect(container).toHaveTextContent('January 2019');
    });
    it('should show calendar on current date if value is empty', function () {
      var _render2 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "date",
        value: "",
        label: inputLabel
      })),
          container = _render2.container;

      _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

      expect(container).toHaveTextContent((0, _dayjs["default"])().format('MMMM YYYY'));
    });
    it('should decrement month on calendar', function () {
      var _render3 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "date",
        value: "01/01/2019",
        label: inputLabel
      })),
          container = _render3.container;

      _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

      _react2.fireEvent.click((0, _react2.getByText)(container, /Prev/));

      expect(container).toHaveTextContent('December 2018');
    });
    it('should increment month on calendar', function () {
      var _render4 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "date",
        value: "01/01/2019",
        label: inputLabel
      })),
          container = _render4.container;

      _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

      _react2.fireEvent.click((0, _react2.getByText)(container, /Next/));

      expect(container).toHaveTextContent('February 2019');
    });
    it('should change dates by pressing the left arrow on calendar', function () {
      var _render5 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "date",
        value: "01/01/2019",
        label: inputLabel
      })),
          container = _render5.container;

      _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

      _react2.fireEvent.keyDown((0, _react2.getByText)(container, '1'), {
        key: 'ArrowLeft'
      });

      expect(container).toHaveTextContent('December 2018');
    });
    it('should change dates by pressing the right arrow on calendar', function () {
      var _render6 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "date",
        value: "01/01/2019",
        label: inputLabel
      })),
          container = _render6.container;

      _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

      _react2.fireEvent.keyDown((0, _react2.getByText)(container, '1'), {
        key: 'ArrowRight'
      });

      expect((0, _react2.getByText)(container, '2').getAttribute('tabindex')).toBe('0');
    });
    it('should change dates by pressing the down arrow on calendar', function () {
      var _render7 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "date",
        value: "01/01/2019",
        label: inputLabel
      })),
          container = _render7.container;

      _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

      _react2.fireEvent.keyDown((0, _react2.getByText)(container, '1'), {
        key: 'ArrowDown'
      });

      expect((0, _react2.getByText)(container, '8').getAttribute('tabindex')).toBe('0');
    });
    it('should change dates by pressing the up arrow on calendar', function () {
      var _render8 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "date",
        value: "01/01/2019",
        label: inputLabel
      })),
          container = _render8.container;

      _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

      _react2.fireEvent.keyDown((0, _react2.getByText)(container, '1'), {
        key: 'ArrowUp'
      });

      expect((0, _react2.getByText)(container, '25').getAttribute('tabindex')).toBe('0');
      expect(container).toHaveTextContent('December 2018');
    });
    it('should select change dates by pressing the enter key on calendar',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee() {
      var _render9, container;

      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              jest.useFakeTimers();
              _render9 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
                type: "date",
                value: "01/01/2019",
                label: inputLabel
              })), container = _render9.container;

              _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

              _react2.fireEvent.keyDown((0, _react2.getByText)(container, '1'), {
                key: 'ArrowRight'
              }); // Day


              _react2.fireEvent.keyDown((0, _react2.getByText)(container, '2'), {
                key: 'ArrowRight'
              }); // Day


              _react2.fireEvent.keyDown((0, _react2.getByText)(container, '3'), {
                key: 'ArrowRight'
              }); // Day


              _react2.fireEvent.keyDown((0, _react2.getByText)(container, '4'), {
                key: 'ArrowRight'
              }); // Day


              _react2.fireEvent.keyDown((0, _react2.getByText)(container, '5'), {
                key: 'Enter'
              });

              (0, _react2.act)(jest.runAllTimers);

              _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

              expect((0, _react2.getByText)(container, '5').getAttribute('tabindex')).toBe('0');

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    it('should select change dates by pressing the space key on calendar',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee2() {
      var _render10, container;

      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              jest.useFakeTimers();
              _render10 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
                type: "date",
                value: "01/01/2019",
                label: inputLabel
              })), container = _render10.container;

              _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

              _react2.fireEvent.keyDown((0, _react2.getByText)(container, '1'), {
                key: 'ArrowRight'
              }); // Day


              _react2.fireEvent.keyDown((0, _react2.getByText)(container, '2'), {
                key: 'ArrowRight'
              }); // Day


              _react2.fireEvent.keyDown((0, _react2.getByText)(container, '3'), {
                key: 'ArrowRight'
              }); // Day


              _react2.fireEvent.keyDown((0, _react2.getByText)(container, '4'), {
                key: 'ArrowRight'
              }); // Day


              _react2.fireEvent.keyDown((0, _react2.getByText)(container, '5'), {
                key: 'Space'
              });

              (0, _react2.act)(jest.runAllTimers);

              _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

              expect((0, _react2.getByText)(container, '5').getAttribute('tabindex')).toBe('0');

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));
    it('should fire onchange when day is typed', function () {
      var handleChange = jest.fn();

      var _render11 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "date",
        value: "01/01/2019",
        label: inputLabel,
        onChange: handleChange
      })),
          container = _render11.container;

      _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

      var input = container.querySelector('input');
      (0, _react2.act)(function () {
        _react2.fireEvent.change(input, {
          target: {
            value: '02/01/2019'
          }
        });
      });
      expect(handleChange).toHaveBeenCalled();
    });
    it('should fire onchange when day is clicked',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee3() {
      var handleChange, _render12, container;

      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              handleChange = jest.fn();
              _render12 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
                type: "date",
                value: "01/01/2019",
                label: inputLabel,
                onChange: handleChange
              })), container = _render12.container;

              _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

              (0, _react2.act)(function () {
                _react2.fireEvent.click((0, _react2.getByText)(container, '5'));
              });
              expect(handleChange).toHaveBeenCalled();

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));
    it('should hide calendar when day is clicked', function () {
      jest.useFakeTimers();

      var _render13 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "date",
        value: "01/01/2019",
        label: inputLabel
      })),
          container = _render13.container;

      _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

      expect(container).toHaveTextContent('January 2019');
      (0, _react2.act)(function () {
        _react2.fireEvent.click((0, _react2.getByText)(container, '1'));
      }); // Calendar is still visible for 100 milliseconds to make clicking feel more solid

      expect(container).toHaveTextContent('January 2019'); // Fast-forward until all timers have been executed

      (0, _react2.act)(jest.runAllTimers);
      expect(container).not.toHaveTextContent('January 2019');
    });
    it('should ignore clicks and enter key on disabled dates', function () {
      jest.useFakeTimers();

      var _render14 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "date",
        value: "01/20/2020",
        minDate: '01/20/2020',
        maxDate: '01/24/2020',
        label: inputLabel
      })),
          container = _render14.container; // open the calendar picker


      _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

      expect(container).toHaveTextContent('January 2020'); // click on a date that is before the minDate

      (0, _react2.act)(function () {
        _react2.fireEvent.click((0, _react2.getByText)(container, '15'));
      }); // Fast-forward until all timers have been executed

      (0, _react2.act)(jest.runAllTimers); // assert calendar is still open

      expect(container).toHaveTextContent('January 2020'); // now try selecting the disabled date with the keyboard

      (0, _react2.act)(function () {
        _react2.fireEvent.keyDown((0, _react2.getByText)(container, '20'), {
          key: 'ArrowLeft'
        });

        _react2.fireEvent.keyDown((0, _react2.getByText)(container, '19'), {
          key: 'Enter'
        });
      }); // Fast-forward until all timers have been executed

      (0, _react2.act)(jest.runAllTimers); // assert calendar is still open

      expect(container).toHaveTextContent('January 2020');
    });
    it('should hide calendar on escape', function () {
      var _render15 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzField["default"], {
        type: "date",
        value: "01/01/2019",
        label: inputLabel
      })),
          container = _render15.container;

      _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

      expect(container).toHaveTextContent('January 2019');

      _react2.fireEvent.keyDown((0, _react2.getByLabelText)(container, inputLabel), {
        key: 'Escape'
      });

      expect(container).not.toHaveTextContent('January 2019');

      _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

      expect(container).toHaveTextContent('January 2019'); // press escape when focused on a day

      _react2.fireEvent.keyDown((0, _react2.getByText)(container, '3'), {
        key: 'Escape'
      });

      expect(container).not.toHaveTextContent('January 2019');
    });
    it('should hide calendar on click outside',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee4() {
      var _render16, container;

      return _regenerator["default"].wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _render16 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement("button", {
                type: "button"
              }, "Outside Button"), _react["default"].createElement(_EzField["default"], {
                type: "date",
                value: "01/01/2019",
                label: inputLabel
              }))), container = _render16.container;

              _react2.fireEvent.mouseDown((0, _react2.getByLabelText)(container, inputLabel));

              expect(container).toHaveTextContent('January 2019');

              _react2.fireEvent.mouseDown((0, _react2.getByText)(container, /Outside Button/));

              expect(container).not.toHaveTextContent('January 2019');

            case 5:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,