"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _jestAxe = require("jest-axe");

var _core = require("@emotion/core");

var _sosia = require("sosia");

var _react2 = require("@testing-library/react");

var _EzToggleTest = _interopRequireDefault(require("./EzToggle.test.md"));

var _EzToggle = _interopRequireDefault(require("../EzToggle.md"));

var _EzToggle2 = _interopRequireDefault(require("../EzToggle"));

var _jestGlobals = require("../../../jest-globals");

/* eslint-disable jsx-a11y/label-has-associated-control */
var scope = {
  EzToggle: _EzToggle2["default"],
  Global: _core.Global,
  css: _core.css
};
describe('EzToggle', function () {
  (0, _sosia.visualSnapshots)({
    markdown: _EzToggle["default"],
    scope: scope
  });
  (0, _sosia.visualSnapshots)({
    markdown: _EzToggleTest["default"],
    scope: scope
  });
  afterEach(_react2.cleanup);
  it('calls the provided click handler when the input is clicked', function () {
    var spy = jest.fn();

    var _fullRender = (0, _jestGlobals.fullRender)(_react["default"].createElement("label", {
      htmlFor: "toggle"
    }, _react["default"].createElement(_EzToggle2["default"], {
      id: "toggle",
      onChange: spy,
      checked: true
    }), _react["default"].createElement("span", null, "Toggle me"))),
        queryByLabelText = _fullRender.queryByLabelText;

    var toggle = queryByLabelText('Toggle me');

    _react2.fireEvent.click(toggle);

    expect(spy).toHaveBeenCalled();
  });
  it('calls the provided click handler when the stylized container is clicked', function () {
    var spy = jest.fn();

    var _fullRender2 = (0, _jestGlobals.fullRender)(_react["default"].createElement("label", {
      htmlFor: "toggle"
    }, _react["default"].createElement(_EzToggle2["default"], {
      id: "toggle",
      onChange: spy,
      checked: true
    }), _react["default"].createElement("span", null, "Toggle me"))),
        queryByLabelText = _fullRender2.queryByLabelText;

    var toggle = queryByLabelText('Toggle me');

    _react2.fireEvent.click(toggle.parentNode);

    expect(spy).toHaveBeenCalled();
  });
  it('submits the correct input state when using uncontrolled input', function () {
    var _fullRender3 = (0, _jestGlobals.fullRender)(_react["default"].createElement("label", {
      htmlFor: "toggle"
    }, _react["default"].createElement(_EzToggle2["default"], {
      id: "toggle"
    }), _react["default"].createElement("span", null, "Toggle me"))),
        queryByLabelText = _fullRender3.queryByLabelText;

    var toggle = queryByLabelText('Toggle me');
    expect(toggle.checked).toBe(false);

    _react2.fireEvent.click(toggle.parentNode);

    expect(toggle.checked).toBe(true);
  });
  it('should meet accessibility guidelines',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee() {
    var wrapper, actual;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            wrapper = (0, _jestGlobals.renderToHtml)(_react["default"].createElement("label", {
              htmlFor: "toggle"
            }, _react["default"].createElement(_EzToggle2["default"], {
              id: "toggle",
              onChange: function onChange() {},
              checked: true
            }), _react["default"].createElement("span", null, "Toggle me")));
            _context.next = 3;
            return (0, _jestAxe.axe)(wrapper);

          case 3:
            actual = _context.sent;
            expect(actual).toHaveNoViolations();

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0V6VG9nZ2xlL19fdGVzdHNfXy9FelRvZ2dsZS50ZXN0LnRzeCJdLCJuYW1lcyI6WyJzY29wZSIsIkV6VG9nZ2xlIiwiR2xvYmFsIiwiY3NzIiwiZGVzY3JpYmUiLCJtYXJrZG93biIsInJlZ3Jlc3Npb25UZXN0cyIsImFmdGVyRWFjaCIsImNsZWFudXAiLCJpdCIsInNweSIsImplc3QiLCJmbiIsInF1ZXJ5QnlMYWJlbFRleHQiLCJ0b2dnbGUiLCJmaXJlRXZlbnQiLCJjbGljayIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJwYXJlbnROb2RlIiwiY2hlY2tlZCIsInRvQmUiLCJ3cmFwcGVyIiwiYWN0dWFsIiwidG9IYXZlTm9WaW9sYXRpb25zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQVRBO0FBV0EsSUFBTUEsS0FBSyxHQUFHO0FBQUNDLEVBQUFBLFFBQVEsRUFBUkEscUJBQUQ7QUFBV0MsRUFBQUEsTUFBTSxFQUFOQSxZQUFYO0FBQW1CQyxFQUFBQSxHQUFHLEVBQUhBO0FBQW5CLENBQWQ7QUFFQUMsUUFBUSxDQUFDLFVBQUQsRUFBYSxZQUFNO0FBQ3pCLDhCQUFnQjtBQUFDQyxJQUFBQSxRQUFRLEVBQVJBLG9CQUFEO0FBQVdMLElBQUFBLEtBQUssRUFBTEE7QUFBWCxHQUFoQjtBQUNBLDhCQUFnQjtBQUFDSyxJQUFBQSxRQUFRLEVBQUVDLHdCQUFYO0FBQTRCTixJQUFBQSxLQUFLLEVBQUxBO0FBQTVCLEdBQWhCO0FBQ0FPLEVBQUFBLFNBQVMsQ0FBQ0MsZUFBRCxDQUFUO0FBRUFDLEVBQUFBLEVBQUUsQ0FBQyw0REFBRCxFQUErRCxZQUFNO0FBQ3JFLFFBQU1DLEdBQUcsR0FBR0MsSUFBSSxDQUFDQyxFQUFMLEVBQVo7O0FBRHFFLHNCQUcxQyw2QkFDekI7QUFBTyxNQUFBLE9BQU8sRUFBQztBQUFmLE9BQ0UsZ0NBQUMscUJBQUQ7QUFBVSxNQUFBLEVBQUUsRUFBQyxRQUFiO0FBQXNCLE1BQUEsUUFBUSxFQUFFRixHQUFoQztBQUFxQyxNQUFBLE9BQU87QUFBNUMsTUFERixFQUVFLDBEQUZGLENBRHlCLENBSDBDO0FBQUEsUUFHOURHLGdCQUg4RCxlQUc5REEsZ0JBSDhEOztBQVVyRSxRQUFNQyxNQUFNLEdBQUdELGdCQUFnQixDQUFDLFdBQUQsQ0FBL0I7O0FBRUFFLHNCQUFVQyxLQUFWLENBQWdCRixNQUFoQjs7QUFFQUcsSUFBQUEsTUFBTSxDQUFDUCxHQUFELENBQU4sQ0FBWVEsZ0JBQVo7QUFDRCxHQWZDLENBQUY7QUFpQkFULEVBQUFBLEVBQUUsQ0FBQyx5RUFBRCxFQUE0RSxZQUFNO0FBQ2xGLFFBQU1DLEdBQUcsR0FBR0MsSUFBSSxDQUFDQyxFQUFMLEVBQVo7O0FBRGtGLHVCQUd2RCw2QkFDekI7QUFBTyxNQUFBLE9BQU8sRUFBQztBQUFmLE9BQ0UsZ0NBQUMscUJBQUQ7QUFBVSxNQUFBLEVBQUUsRUFBQyxRQUFiO0FBQXNCLE1BQUEsUUFBUSxFQUFFRixHQUFoQztBQUFxQyxNQUFBLE9BQU87QUFBNUMsTUFERixFQUVFLDBEQUZGLENBRHlCLENBSHVEO0FBQUEsUUFHM0VHLGdCQUgyRSxnQkFHM0VBLGdCQUgyRTs7QUFVbEYsUUFBTUMsTUFBTSxHQUFHRCxnQkFBZ0IsQ0FBQyxXQUFELENBQS9COztBQUVBRSxzQkFBVUMsS0FBVixDQUFnQkYsTUFBTSxDQUFDSyxVQUF2Qjs7QUFFQUYsSUFBQUEsTUFBTSxDQUFDUCxHQUFELENBQU4sQ0FBWVEsZ0JBQVo7QUFDRCxHQWZDLENBQUY7QUFpQkFULEVBQUFBLEVBQUUsQ0FBQywrREFBRCxFQUFrRSxZQUFNO0FBQUEsdUJBQzdDLDZCQUN6QjtBQUFPLE1BQUEsT0FBTyxFQUFDO0FBQWYsT0FDRSxnQ0FBQyxxQkFBRDtBQUFVLE1BQUEsRUFBRSxFQUFDO0FBQWIsTUFERixFQUVFLDBEQUZGLENBRHlCLENBRDZDO0FBQUEsUUFDakVJLGdCQURpRSxnQkFDakVBLGdCQURpRTs7QUFReEUsUUFBTUMsTUFBTSxHQUFHRCxnQkFBZ0IsQ0FBQyxXQUFELENBQS9CO0FBRUFJLElBQUFBLE1BQU0sQ0FBQ0gsTUFBTSxDQUFDTSxPQUFSLENBQU4sQ0FBdUJDLElBQXZCLENBQTRCLEtBQTVCOztBQUVBTixzQkFBVUMsS0FBVixDQUFnQkYsTUFBTSxDQUFDSyxVQUF2Qjs7QUFFQUYsSUFBQUEsTUFBTSxDQUFDSCxNQUFNLENBQUNNLE9BQVIsQ0FBTixDQUF1QkMsSUFBdkIsQ0FBNEIsSUFBNUI7QUFDRCxHQWZDLENBQUY7QUFpQkFaLEVBQUFBLEVBQUUsQ0FBQyxzQ0FBRDtBQUFBO0FBQUE7QUFBQTtBQUFBLCtCQUF5QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDbkNhLFlBQUFBLE9BRG1DLEdBQ3pCLCtCQUNkO0FBQU8sY0FBQSxPQUFPLEVBQUM7QUFBZixlQUNFLGdDQUFDLHFCQUFEO0FBQVUsY0FBQSxFQUFFLEVBQUMsUUFBYjtBQUFzQixjQUFBLFFBQVEsRUFBRSxvQkFBTSxDQUFFLENBQXhDO0FBQTBDLGNBQUEsT0FBTztBQUFqRCxjQURGLEVBRUUsMERBRkYsQ0FEYyxDQUR5QjtBQUFBO0FBQUEsbUJBT3BCLGtCQUFJQSxPQUFKLENBUG9COztBQUFBO0FBT25DQyxZQUFBQSxNQVBtQztBQVF6Q04sWUFBQUEsTUFBTSxDQUFDTSxNQUFELENBQU4sQ0FBZUMsa0JBQWY7O0FBUnlDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQXpDLEdBQUY7QUFVRCxDQWxFTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvbGFiZWwtaGFzLWFzc29jaWF0ZWQtY29udHJvbCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7YXhlfSBmcm9tICdqZXN0LWF4ZSc7XG5pbXBvcnQge0dsb2JhbCwgY3NzfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7dmlzdWFsU25hcHNob3RzfSBmcm9tICdzb3NpYSc7XG5pbXBvcnQge2ZpcmVFdmVudCwgY2xlYW51cH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgcmVncmVzc2lvblRlc3RzIGZyb20gJy4vRXpUb2dnbGUudGVzdC5tZCc7XG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi4vRXpUb2dnbGUubWQnO1xuaW1wb3J0IEV6VG9nZ2xlIGZyb20gJy4uL0V6VG9nZ2xlJztcbmltcG9ydCB7cmVuZGVyVG9IdG1sLCBmdWxsUmVuZGVyfSBmcm9tICcuLi8uLi8uLi9qZXN0LWdsb2JhbHMnO1xuXG5jb25zdCBzY29wZSA9IHtFelRvZ2dsZSwgR2xvYmFsLCBjc3N9O1xuXG5kZXNjcmliZSgnRXpUb2dnbGUnLCAoKSA9PiB7XG4gIHZpc3VhbFNuYXBzaG90cyh7bWFya2Rvd24sIHNjb3BlfSk7XG4gIHZpc3VhbFNuYXBzaG90cyh7bWFya2Rvd246IHJlZ3Jlc3Npb25UZXN0cywgc2NvcGV9KTtcbiAgYWZ0ZXJFYWNoKGNsZWFudXApO1xuXG4gIGl0KCdjYWxscyB0aGUgcHJvdmlkZWQgY2xpY2sgaGFuZGxlciB3aGVuIHRoZSBpbnB1dCBpcyBjbGlja2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IHNweSA9IGplc3QuZm4oKTtcblxuICAgIGNvbnN0IHtxdWVyeUJ5TGFiZWxUZXh0fSA9IGZ1bGxSZW5kZXIoXG4gICAgICA8bGFiZWwgaHRtbEZvcj1cInRvZ2dsZVwiPlxuICAgICAgICA8RXpUb2dnbGUgaWQ9XCJ0b2dnbGVcIiBvbkNoYW5nZT17c3B5fSBjaGVja2VkIC8+XG4gICAgICAgIDxzcGFuPlRvZ2dsZSBtZTwvc3Bhbj5cbiAgICAgIDwvbGFiZWw+XG4gICAgKTtcblxuICAgIGNvbnN0IHRvZ2dsZSA9IHF1ZXJ5QnlMYWJlbFRleHQoJ1RvZ2dsZSBtZScpO1xuXG4gICAgZmlyZUV2ZW50LmNsaWNrKHRvZ2dsZSk7XG5cbiAgICBleHBlY3Qoc3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdjYWxscyB0aGUgcHJvdmlkZWQgY2xpY2sgaGFuZGxlciB3aGVuIHRoZSBzdHlsaXplZCBjb250YWluZXIgaXMgY2xpY2tlZCcsICgpID0+IHtcbiAgICBjb25zdCBzcHkgPSBqZXN0LmZuKCk7XG5cbiAgICBjb25zdCB7cXVlcnlCeUxhYmVsVGV4dH0gPSBmdWxsUmVuZGVyKFxuICAgICAgPGxhYmVsIGh0bWxGb3I9XCJ0b2dnbGVcIj5cbiAgICAgICAgPEV6VG9nZ2xlIGlkPVwidG9nZ2xlXCIgb25DaGFuZ2U9e3NweX0gY2hlY2tlZCAvPlxuICAgICAgICA8c3Bhbj5Ub2dnbGUgbWU8L3NwYW4+XG4gICAgICA8L2xhYmVsPlxuICAgICk7XG5cbiAgICBjb25zdCB0b2dnbGUgPSBxdWVyeUJ5TGFiZWxUZXh0KCdUb2dnbGUgbWUnKTtcblxuICAgIGZpcmVFdmVudC5jbGljayh0b2dnbGUucGFyZW50Tm9kZSk7XG5cbiAgICBleHBlY3Qoc3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzdWJtaXRzIHRoZSBjb3JyZWN0IGlucHV0IHN0YXRlIHdoZW4gdXNpbmcgdW5jb250cm9sbGVkIGlucHV0JywgKCkgPT4ge1xuICAgIGNvbnN0IHtxdWVyeUJ5TGFiZWxUZXh0fSA9IGZ1bGxSZW5kZXIoXG4gICAgICA8bGFiZWwgaHRtbEZvcj1cInRvZ2dsZVwiPlxuICAgICAgICA8RXpUb2dnbGUgaWQ9XCJ0b2dnbGVcIiAvPlxuICAgICAgICA8c3Bhbj5Ub2dnbGUgbWU8L3NwYW4+XG4gICAgICA8L2xhYmVsPlxuICAgICk7XG5cbiAgICBjb25zdCB0b2dnbGUgPSBxdWVyeUJ5TGFiZWxUZXh0KCdUb2dnbGUgbWUnKTtcblxuICAgIGV4cGVjdCh0b2dnbGUuY2hlY2tlZCkudG9CZShmYWxzZSk7XG5cbiAgICBmaXJlRXZlbnQuY2xpY2sodG9nZ2xlLnBhcmVudE5vZGUpO1xuXG4gICAgZXhwZWN0KHRvZ2dsZS5jaGVja2VkKS50b0JlKHRydWUpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIG1lZXQgYWNjZXNzaWJpbGl0eSBndWlkZWxpbmVzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSByZW5kZXJUb0h0bWwoXG4gICAgICA8bGFiZWwgaHRtbEZvcj1cInRvZ2dsZVwiPlxuICAgICAgICA8RXpUb2dnbGUgaWQ9XCJ0b2dnbGVcIiBvbkNoYW5nZT17KCkgPT4ge319IGNoZWNrZWQgLz5cbiAgICAgICAgPHNwYW4+VG9nZ2xlIG1lPC9zcGFuPlxuICAgICAgPC9sYWJlbD5cbiAgICApO1xuICAgIGNvbnN0IGFjdHVhbCA9IGF3YWl0IGF4ZSh3cmFwcGVyKTtcbiAgICBleHBlY3QoYWN0dWFsKS50b0hhdmVOb1Zpb2xhdGlvbnMoKTtcbiAgfSk7XG59KTtcbiJdfQ==