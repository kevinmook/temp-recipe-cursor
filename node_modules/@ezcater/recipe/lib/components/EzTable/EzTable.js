"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _EzCard = require("../EzCard");

var _EzCheckbox = _interopRequireDefault(require("../EzCheckbox"));

var _EzButton = _interopRequireDefault(require("../EzButton"));

var _EzLayout = _interopRequireDefault(require("../EzLayout"));

var _EzTable = require("./EzTable.styles");

var _useSorting2 = _interopRequireDefault(require("./useSorting"));

var _en = _interopRequireDefault(require("./en"));

var _utils = require("../../utils");

var _hooks = require("../../utils/hooks");

var _useOverflowDetection3 = _interopRequireDefault(require("./useOverflowDetection"));

var _useExpandedClickTarget = _interopRequireDefault(require("./useExpandedClickTarget"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var TableContext = (0, _react.createContext)(null);

var SortDirection = function SortDirection(_ref) {
  var direction = _ref.direction;
  return _react["default"].createElement("svg", {
    width: "0.5em",
    height: "0.4em",
    viewBox: "0 0 1 1",
    preserveAspectRatio: "none",
    xmlns: "http://www.w3.org/2000/svg",
    version: "1.1"
  }, direction === 'asc' ? _react["default"].createElement("polygon", {
    points: "0.5,0 1,1 0,1"
  }) : _react["default"].createElement("polygon", {
    points: "0.5,1 0,0 1,0"
  }));
};

var Thead = function Thead() {
  var _React$useContext = _react["default"].useContext(TableContext),
      columns = _React$useContext.columns,
      items = _React$useContext.items,
      sorting = _React$useContext.sorting,
      selection = _React$useContext.selection;

  var col = columns.find(function (c) {
    return c.defaultSort;
  });
  var initialSort = col && {
    column: col,
    direction: col.defaultSort
  };

  var _useSorting = (0, _useSorting2["default"])(initialSort),
      direction = _useSorting.direction,
      _onClick = _useSorting.onClick,
      isSorted = _useSorting.isSorted;

  return _react["default"].createElement("thead", null, _react["default"].createElement("tr", null, selection && _react["default"].createElement(_EzTable.Th, null, _react["default"].createElement(_EzCheckbox["default"], {
    label: "Select all",
    onChange: selection.onBulkSelectClick,
    checked: items.length === selection.selected.length
  })), columns.map(function (column, cellIndex) {
    var sortable = column.sortable,
        heading = column.heading,
        numeric = column.numeric;
    return _react["default"].createElement(_EzTable.Th, {
      key: column.key || cellIndex,
      numeric: numeric,
      sortable: sortable,
      sorted: isSorted(column),
      onClick: function onClick(event) {
        return _onClick(event, column, sorting.onSortClick);
      }
    }, _react["default"].createElement("span", null, heading, " ", sortable && _react["default"].createElement(SortDirection, {
      direction: direction
    })));
  })), _react["default"].createElement(SelectionStateBanner, null));
};

var SelectionStateBanner = function SelectionStateBanner() {
  var _useTranslation = (0, _hooks.useTranslation)(_en["default"]),
      t = _useTranslation.t;

  var _useContext = (0, _react.useContext)(TableContext),
      columns = _useContext.columns,
      items = _useContext.items,
      selection = _useContext.selection,
      pagination = _useContext.pagination;

  if (!selection || !pagination) return null;
  if (!selection.onSelectAllClick) return null;
  if (selection.selected.length !== items.length && !selection.allSelected) return null;
  return _react["default"].createElement("tr", null, _react["default"].createElement("td", {
    colSpan: columns.length + 1
  }, _react["default"].createElement(_EzLayout["default"], {
    layout: "basic"
  }, selection.allSelected || items.length === pagination.totalRows ? _react["default"].createElement("span", null, t('All {{totalRowCount}} rows are selected.', {
    totalRowCount: pagination.totalRows
  })) : _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement("span", null, t('All {{selectedCount}} rows on this page are selected.', {
    selectedCount: selection.selected.length
  })), _react["default"].createElement(_EzButton["default"], {
    use: "tertiary",
    onClick: (0, _utils.wrapEvent)(selection.onSelectAllClick, function () {
      return selection.setAllSelected(true);
    })
  }, t('Select all {{totalRowCount}} rows', {
    totalRowCount: pagination.totalRows
  }))), _react["default"].createElement(_EzButton["default"], {
    use: "tertiary",
    onClick: selection.onSelectNoneClick
  }, t('Clear selection')))));
};

var TRow = function TRow(_ref2) {
  var item = _ref2.item;

  var _useContext2 = (0, _react.useContext)(TableContext),
      columns = _useContext2.columns,
      selection = _useContext2.selection;

  var _useExpandedClickTarg = (0, _useExpandedClickTarget["default"])(),
      _useExpandedClickTarg2 = (0, _slicedToArray2["default"])(_useExpandedClickTarg, 2),
      targetRef = _useExpandedClickTarg2[0],
      _useExpandedClickTarg3 = _useExpandedClickTarg2[1],
      ref = _useExpandedClickTarg3.ref,
      clickable = _useExpandedClickTarg3.clickable,
      onClick = _useExpandedClickTarg3.onClick,
      onMouseEnter = _useExpandedClickTarg3.onMouseEnter;

  return _react["default"].createElement(_EzTable.ClickableTr, {
    ref: ref,
    clickable: clickable,
    onClick: onClick,
    onMouseEnter: onMouseEnter
  }, selection && _react["default"].createElement(_EzTable.Td, null, _react["default"].createElement(_EzCheckbox["default"], {
    label: "Select row",
    checked: selection.selected.includes(item),
    onChange: function onChange(event) {
      return selection.onRowSelectClick(event, {
        item: item
      });
    }
  })), columns.map(function (_ref3, cellIndex) {
    var component = _ref3.component,
        numeric = _ref3.numeric;
    return _react["default"].createElement(_EzTable.Td, {
      key: cellIndex,
      numeric: numeric
    }, (0, _react.createElement)(component, {
      item: item,
      linkRef: targetRef
    }));
  }));
};

var Tbody = function Tbody() {
  var _useContext3 = (0, _react.useContext)(TableContext),
      items = _useContext3.items;

  return _react["default"].createElement("tbody", null, items.map(function (item, rowIndex) {
    return _react["default"].createElement(TRow, {
      key: rowIndex,
      item: item
    });
  }));
};

var TablePagination = function TablePagination(_ref4) {
  var pagination = _ref4.pagination;

  var _useTranslation2 = (0, _hooks.useTranslation)(_en["default"]),
      t = _useTranslation2.t;

  var pages = Math.ceil(pagination.totalRows / pagination.rowsPerPage);
  return _react["default"].createElement(_EzCard.EzCardFooter, null, _react["default"].createElement(_EzLayout["default"], {
    layout: "split"
  }, _react["default"].createElement(_EzTable.TablePaginationNavItems, null, _react["default"].createElement(_EzButton["default"], {
    use: "tertiary",
    onClick: pagination.onPrevPageClick,
    disabled: pagination.currentPage === 1
  }, '‹ ', t('Previous Page')), _react["default"].createElement("span", null, t('Page {{currentPage}} of {{pages}}', {
    currentPage: pagination.currentPage,
    pages: pages
  })), _react["default"].createElement(_EzButton["default"], {
    use: "tertiary",
    onClick: pagination.onNextPageClick,
    disabled: pagination.currentPage === pages
  }, t('Next Page'), ' ›')), _react["default"].createElement(_EzTable.TablePaginationRowCountDropdown, {
    defaultValue: pagination.rowsPerPage,
    onChange: pagination.onRowsPerPageChange
  }, pagination.rowsPerPageOptions.map(function (value) {
    return _react["default"].createElement("option", {
      key: value,
      value: value
    }, t('{{num}} rows per page', {
      num: value
    }));
  }))));
};
/**
 * Tables display information in a way that’s easy to scan,
 * so that users can look for patterns and insights.
 * They can be embedded in primary content, such as cards.
 */


var EzTable = function EzTable(_ref5) {
  var actions = _ref5.actions,
      title = _ref5.title,
      subtitle = _ref5.subtitle,
      columns = _ref5.columns,
      items = _ref5.items,
      selection = _ref5.selection,
      onSortClick = _ref5.onSortClick,
      pagination = _ref5.pagination;

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      allSelected = _useState2[0],
      setAllSelected = _useState2[1];

  var selected = selection && items.filter(selection.isRowSelected);
  var numSelectedOnPage = selected && selected.length;

  var _ref6 = pagination || {},
      currentPage = _ref6.currentPage,
      rowsPerPage = _ref6.rowsPerPage;

  var _useScrollPosition = (0, _hooks.useScrollPosition)(),
      _useScrollPosition2 = (0, _slicedToArray2["default"])(_useScrollPosition, 2),
      x = _useScrollPosition2[0].x,
      scrollEvents = _useScrollPosition2[1];

  var isScrolling = x > 0;

  var _useOverflowDetection = (0, _useOverflowDetection3["default"])(),
      _useOverflowDetection2 = (0, _slicedToArray2["default"])(_useOverflowDetection, 2),
      isOverflowing = _useOverflowDetection2[0],
      overflowDetection = _useOverflowDetection2[1];

  (0, _react.useEffect)(function () {
    return setAllSelected(false);
  }, [numSelectedOnPage, currentPage, rowsPerPage]);
  var mappedColumns = columns.map(function (_ref7) {
    var heading = _ref7.heading,
        accessor = _ref7.accessor,
        _ref7$key = _ref7.key,
        key = _ref7$key === void 0 ? typeof accessor === 'string' ? accessor : undefined : _ref7$key,
        _ref7$component = _ref7.component,
        component = _ref7$component === void 0 ? typeof accessor === 'function' ? accessor : function (_ref8) {
      var item = _ref8.item;
      return _react["default"].createElement(_react["default"].Fragment, null, item[key]);
    } : _ref7$component,
        sortable = _ref7.sortable,
        rest = (0, _objectWithoutProperties2["default"])(_ref7, ["heading", "accessor", "key", "component", "sortable"]);
    return _objectSpread({
      heading: heading,
      key: key,
      component: component,
      sortable: sortable
    }, rest);
  });

  var table = _react["default"].createElement(TableContext.Provider, {
    value: {
      items: items,
      selection: selection && _objectSpread({}, selection, {
        selected: selected,
        allSelected: allSelected,
        setAllSelected: setAllSelected
      }),
      columns: mappedColumns,
      pagination: pagination,
      sorting: {
        onSortClick: onSortClick
      }
    }
  }, _react["default"].createElement(_EzTable.Container, (0, _extends2["default"])({
    cols: columns.length,
    selectable: !!selection,
    overflowing: isOverflowing,
    isScrolling: isScrolling
  }, scrollEvents, {
    ref: overflowDetection.ref
  }), _react["default"].createElement(_EzTable.Table, {
    selectable: !!selection,
    use: !title ? 'simple' : 'full'
  }, _react["default"].createElement(Thead, null), _react["default"].createElement(Tbody, null))));

  if (!title) return table;
  return _react["default"].createElement(_EzCard.EzCard, {
    title: title,
    subtitle: subtitle,
    actions: actions
  }, _react["default"].createElement(_EzTable.TableCardSection, null, table), pagination && _react["default"].createElement(TablePagination, {
    pagination: pagination
  }));
};

var _default = EzTable;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,