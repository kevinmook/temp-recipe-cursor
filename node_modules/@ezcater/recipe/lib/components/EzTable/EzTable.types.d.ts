/// <reference types="react" />
declare type Column = {
    heading: string;
    numeric?: boolean;
    defaultSort?: Direction;
    key?: string;
    component?: React.ReactNode | React.ComponentType;
    sortable?: boolean;
    /**
     * @deprecated Use `key` to provide column identifier and `component` to provide a custom cell renderer.
     */
    accessor?: React.ReactNode | React.ComponentType | string;
};
declare type Direction = 'asc' | 'desc';
declare type OnSortClickOptions = {
    column: Column;
    direction: Direction;
};
declare type onSortClick = (event: React.MouseEvent<HTMLElement>, options: OnSortClickOptions) => void;
declare type onRowsPerPageChange = (event: any) => void;
declare type BulkSelection = {
    onRowSelectClick: (event: React.MouseEvent<HTMLInputElement>, value: any) => void;
    onBulkSelectClick: React.MouseEventHandler;
    isRowSelected: (item: any) => boolean;
};
declare type SelectAllOrNoneEnabled = {
    onSelectAllClick: React.MouseEventHandler;
    onSelectNoneClick: React.MouseEventHandler;
};
declare type SelectAllOrNoneDisabled = {
    onSelectAllClick?: never;
    onSelectNoneClick?: never;
};
declare type ActionsProps = {
    actions: React.ReactNode;
    title: string;
};
declare type OptionalTitle = {
    actions?: never;
    title?: string;
};
declare type TableActions = ActionsProps | OptionalTitle;
declare type Pagination = {
    currentPage: number;
    totalRows: number;
    rowsPerPage: number;
    rowsPerPageOptions: number[];
    onPrevPageClick: React.MouseEventHandler;
    onNextPageClick: React.MouseEventHandler;
    onRowsPerPageChange: onRowsPerPageChange;
};
declare type Selection = BulkSelection & (SelectAllOrNoneEnabled | SelectAllOrNoneDisabled);
declare type SelectionWithoutPagination = {
    pagination?: never;
    selection: BulkSelection & SelectAllOrNoneDisabled;
};
declare type PaginationWithoutSelection = {
    pagination: Pagination;
    selection?: never;
};
declare type PaginationAndSelection = {
    pagination: Pagination;
    selection: Selection;
};
declare type PaginationAndSelectionDisabled = {
    pagination?: never;
    selection?: never;
};
declare type PaginationSelectionCombination = SelectionWithoutPagination | PaginationWithoutSelection | PaginationAndSelection | PaginationAndSelectionDisabled;
declare type TableBase = {
    subtitle?: string;
    columns: Column[];
    items: any[];
    onSortClick?: onSortClick;
};
export declare type TableProps = TableBase & TableActions & PaginationSelectionCombination;
export declare type Sortable = {
    direction: Direction;
    isSorted: (column: Column) => boolean;
    onClick: (event: React.MouseEvent<HTMLElement>, column: Column, callback: (event: React.MouseEvent<HTMLElement>, options: OnSortClickOptions) => void) => void;
};
export declare type SortingState = {
    direction: Direction;
    column?: Column;
};
export {};
