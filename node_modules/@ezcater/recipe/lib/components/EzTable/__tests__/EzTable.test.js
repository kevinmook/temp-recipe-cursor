"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _jestAxe = require("jest-axe");

var _sosia = require("sosia");

var _react2 = require("@testing-library/react");

var _EzTableTest = _interopRequireDefault(require("./EzTable.test.md"));

var _EzTable = _interopRequireDefault(require("../EzTable.md"));

var _EzTable2 = _interopRequireDefault(require("../EzTable"));

var _index = require("../../index");

var _jestGlobals = require("../../../jest-globals");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var mockOverflow = false;
jest.mock('../useOverflowDetection', function () {
  return function () {
    return [mockOverflow, function () {}];
  };
});

var SetOverflow = function SetOverflow(_ref) {
  var children = _ref.children;
  // jsdom doesn't simulate layout, so we can't detect overflow in tests
  mockOverflow = true;
  return children;
};

var scope = {
  EzButton: _index.EzButton,
  EzTable: _EzTable2["default"],
  EzPage: _index.EzPage,
  EzCard: _index.EzCard,
  EzHeading: _index.EzHeading,
  EzAlert: _index.EzAlert,
  EzTextStyle: _index.EzTextStyle
};
describe('EzTable', function () {
  (0, _sosia.visualSnapshots)({
    markdown: _EzTable["default"],
    scope: scope
  });
  (0, _sosia.visualSnapshots)({
    markdown: _EzTableTest["default"],
    scope: _objectSpread({}, scope, {
      SetOverflow: SetOverflow
    })
  });
  afterEach(_react2.cleanup);
  beforeEach(function () {
    mockOverflow = false;
  });
  var columns = [{
    heading: 'Store name',
    component: function component(_ref2) {
      var item = _ref2.item;
      return item.store;
    },
    key: 'store'
  }, {
    heading: 'Total sales',
    numeric: true,
    key: 'total'
  }, {
    heading: 'Average order value',
    numeric: true,
    key: 'average'
  }];
  var items = [{
    id: '#004',
    store: '123 Example Store',
    total: 23267,
    average: 327.79
  }, {
    id: '#007',
    store: '45 Meadowview Lane',
    total: 22788,
    average: 367.55
  }];
  describe('column sorting', function () {
    describe('when the user requests a column to be sorted', function () {
      var onSortClick = jest.fn();
      var sortableColumns = [{
        heading: 'Store name',
        key: 'store',
        sortable: true
      }, {
        heading: 'Total sales',
        key: 'total',
        sortable: true
      }];
      var props = {
        columns: sortableColumns,
        items: items,
        onSortClick: onSortClick
      };
      var mockEvent = expect.any(Object);
      beforeEach(function () {
        onSortClick.mockClear();
      });
      it('notifies the client that sort is requested', function () {
        var _fullRender = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzTable2["default"], props)),
            getByText = _fullRender.getByText;

        _react2.fireEvent.click(getByText(sortableColumns[0].heading));

        expect(onSortClick).toHaveBeenCalledTimes(1);
        expect(onSortClick).toHaveBeenCalledWith(mockEvent, expect.objectContaining({
          column: expect.objectContaining(sortableColumns[0]),
          direction: 'asc'
        }));
      });
      it('does NOT notify the client of a sort when a column is not sortable', function () {
        var _fullRender2 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzTable2["default"], (0, _extends2["default"])({}, props, {
          columns: [{
            heading: 'Store name',
            accessor: 'name',
            sortable: false
          }, {
            heading: 'Total sales',
            accessor: 'total',
            sortable: true
          }]
        }))),
            getByText = _fullRender2.getByText;

        _react2.fireEvent.click(getByText(sortableColumns[0].heading));

        expect(onSortClick).not.toHaveBeenCalled();
      });
      it('can sort a single column in both ascending and descending order', function () {
        var _fullRender3 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzTable2["default"], props)),
            getByText = _fullRender3.getByText;

        _react2.fireEvent.click(getByText(sortableColumns[1].heading));

        expect(onSortClick).toHaveBeenCalledWith(mockEvent, expect.objectContaining({
          column: expect.objectContaining(sortableColumns[1]),
          direction: 'asc'
        }));

        _react2.fireEvent.click(getByText(sortableColumns[1].heading));

        expect(onSortClick).toHaveBeenCalledWith(mockEvent, expect.objectContaining({
          column: expect.objectContaining(sortableColumns[1]),
          direction: 'desc'
        }));
      });
      it('should not change the sort order if the provided onSortClick callback prevents default', function () {
        var _fullRender4 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzTable2["default"], props)),
            getByText = _fullRender4.getByText;

        onSortClick.mockImplementation(function (event) {
          return event.preventDefault();
        });

        _react2.fireEvent.click(getByText(sortableColumns[1].heading));

        expect(onSortClick).toHaveBeenCalledWith(mockEvent, expect.objectContaining({
          column: expect.objectContaining(sortableColumns[1]),
          direction: 'asc'
        }));

        _react2.fireEvent.click(getByText(sortableColumns[1].heading));

        expect(onSortClick).toHaveBeenCalledWith(mockEvent, expect.objectContaining({
          column: expect.objectContaining(sortableColumns[1]),
          direction: 'asc'
        }));
      });
    });
  });
  describe('bulk-select', function () {
    function render(props) {
      var _fullRender5 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzTable2["default"], props)),
          queryByLabelText = _fullRender5.queryByLabelText,
          queryAllByLabelText = _fullRender5.queryAllByLabelText;

      return {
        bulkSelectInput: queryByLabelText('Select all'),
        rowSelectInputs: queryAllByLabelText('Select row')
      };
    }

    describe('when a bulk-select is requested', function () {
      var onRowSelectClick = jest.fn();
      var onBulkSelectClick = jest.fn();
      var isRowSelected = jest.fn();
      var selection = {
        onBulkSelectClick: onBulkSelectClick,
        onRowSelectClick: onRowSelectClick,
        isRowSelected: isRowSelected
      };
      var props = {
        columns: columns,
        items: items,
        selection: selection
      };
      beforeEach(function () {
        onRowSelectClick.mockClear();
        onBulkSelectClick.mockClear();
        isRowSelected.mockImplementation(function () {
          return false;
        });
      });
      it('renders a bulk-select input in a column header', function () {
        var _render = render(props),
            bulkSelectInput = _render.bulkSelectInput;

        expect(bulkSelectInput).not.toBeNull();
      });
      it('renders a row-select input for each row', function () {
        var _render2 = render(props),
            rowSelectInputs = _render2.rowSelectInputs;

        expect(rowSelectInputs).toHaveLength(items.length);
      });
      describe('the bulk-select input', function () {
        it('calls the provided click handler when the input state changes', function () {
          var _render3 = render(props),
              bulkSelectInput = _render3.bulkSelectInput;

          bulkSelectInput.click();
          expect(onBulkSelectClick).toHaveBeenCalledTimes(1);
          expect(onBulkSelectClick).toHaveBeenCalledWith(expect.any(Object));
        });
        describe('checked state', function () {
          var expectedState;
          afterEach(function () {
            var _render4 = render(props),
                bulkSelectInput = _render4.bulkSelectInput;

            expect(bulkSelectInput.checked).toBe(expectedState);
          });
          it('is checked when every row has been selected', function () {
            isRowSelected.mockImplementation(function () {
              return true;
            });
            expectedState = true;
          });
          it('is not checked when only some rows are selected', function () {
            isRowSelected.mockImplementation(function (item) {
              return item.id === items[0].id;
            });
            expectedState = false;
          });
          it('is not checked when no rows are selected', function () {
            isRowSelected.mockImplementation(function () {
              return false;
            });
            expectedState = false;
          });
        });
      });
      describe('the row-select input', function () {
        it('calls the provided click handler when clicked', function () {
          var _render5 = render(props),
              rowSelectInputs = _render5.rowSelectInputs;

          _react2.fireEvent.click(rowSelectInputs[0]);

          expect(onRowSelectClick).toHaveBeenCalledTimes(1);
          expect(onRowSelectClick).toHaveBeenCalledWith(expect.any(Object), {
            item: items[0]
          });
        });
        it('determines its checked state based on the provided function', function () {
          isRowSelected.mockImplementation(function (item) {
            return item.id === items[0].id;
          });

          var _render6 = render(props),
              rowSelectInputs = _render6.rowSelectInputs;

          expect(rowSelectInputs[0].checked).toBe(true);
          expect(rowSelectInputs[1].checked).toBe(false);
        });
      });
    });
    describe('when a bulk-select functionality is not requested', function () {
      it('does not render a bulk-select input in a column header', function () {
        var _render7 = render({
          columns: columns,
          items: items
        }),
            bulkSelectInput = _render7.bulkSelectInput;

        expect(bulkSelectInput).toBeNull();
      });
      it('does not render a row-select input for each row', function () {
        var _render8 = render({
          columns: columns,
          items: items
        }),
            rowSelectInputs = _render8.rowSelectInputs;

        expect(rowSelectInputs[0]).toBeUndefined();
      });
    });
    it('should meet accessibility guidelines',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee() {
      var wrapper, actual;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              wrapper = (0, _jestGlobals.renderToHtml)(_react["default"].createElement(_EzTable2["default"], {
                columns: columns,
                items: items,
                selection: {
                  onBulkSelectClick: function onBulkSelectClick() {
                    return null;
                  },
                  onRowSelectClick: function onRowSelectClick() {
                    return null;
                  },
                  isRowSelected: function isRowSelected() {
                    return false;
                  }
                }
              }));
              _context.next = 3;
              return (0, _jestAxe.axe)(wrapper);

            case 3:
              actual = _context.sent;
              expect(actual).toHaveNoViolations();

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
  });
  describe('table select banner', function () {
    var data = [{
      first: 'Tiffany',
      last: 'Morin'
    }, {
      first: 'Mitchell',
      last: 'Hoffman'
    }, {
      first: 'Léo',
      last: 'Gonzalez'
    }, {
      first: 'Alberto',
      last: 'Arias'
    }, {
      first: 'Olivier',
      last: 'Campos'
    }, {
      first: 'Ömür',
      last: 'Ekici'
    }, {
      first: 'Énio',
      last: 'Barros'
    }, {
      first: 'Ava',
      last: 'Ma'
    }, {
      first: 'Norberta',
      last: 'Novaes'
    }, {
      first: 'Deni',
      last: 'Lubbers'
    }];
    it('shows option to select all rows when a page is selected', function () {
      var onSelectAllClick = jest.fn();

      var _fullRender6 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzTable2["default"], {
        title: "All Stores",
        subtitle: "Compared to the same period last year",
        selection: {
          onRowSelectClick: function onRowSelectClick() {},
          onBulkSelectClick: function onBulkSelectClick() {},
          isRowSelected: function isRowSelected() {
            return true;
          },
          onSelectAllClick: onSelectAllClick,
          onSelectNoneClick: function onSelectNoneClick() {}
        },
        columns: [{
          heading: 'First Name',
          key: 'first'
        }, {
          heading: 'Last Name',
          key: 'last'
        }],
        items: data.slice(0, 5),
        pagination: {
          currentPage: 1,
          totalRows: 10,
          rowsPerPage: 5,
          rowsPerPageOptions: [5, 10, 20, 30],
          onPrevPageClick: function onPrevPageClick() {},
          onNextPageClick: function onNextPageClick() {},
          onRowsPerPageChange: function onRowsPerPageChange() {}
        }
      })),
          getByText = _fullRender6.getByText;

      var selectAllButton = getByText('Select all 10 rows');

      _react2.fireEvent.click(selectAllButton);

      expect(onSelectAllClick).toHaveBeenCalled();
    });
  });
  describe('clickable rows', function () {
    var data = [{
      first: 'Tiffany',
      last: 'Morin'
    }, {
      first: 'Mitchell',
      last: 'Hoffman'
    }];

    var link = function link(onclick) {
      return function (_ref4) {
        var _ref4$item = _ref4.item,
            first = _ref4$item.first,
            last = _ref4$item.last,
            linkRef = _ref4.linkRef;
        return _react["default"].createElement("div", null, _react["default"].createElement("div", null, _react["default"].createElement("a", {
          href: "/",
          ref: linkRef,
          onClick: onclick
        }, first, " ", last)));
      };
    };

    it('calls the onClick of the link target when clicking inside a table row', function () {
      var spy = jest.fn();

      var _fullRender7 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzTable2["default"], {
        title: "All Stores",
        subtitle: "Compared to the same period last year",
        columns: [{
          heading: 'Link',
          component: link(spy),
          key: 'link'
        }, {
          heading: 'First Name',
          key: 'first'
        }, {
          heading: 'Last Name',
          key: 'last'
        }],
        items: data
      })),
          getByText = _fullRender7.getByText;

      var cell = getByText('Tiffany');

      _react2.fireEvent.mouseOver(cell);

      _react2.fireEvent.click(cell);

      expect(spy).toHaveBeenCalled();
    });
    it('does NOT call the onClick of the link target if clicking interactive elements in the row', function () {
      var spy = jest.fn();

      var _fullRender8 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzTable2["default"], {
        title: "All Stores",
        subtitle: "Compared to the same period last year",
        selection: {
          onRowSelectClick: function onRowSelectClick() {},
          onBulkSelectClick: function onBulkSelectClick() {},
          isRowSelected: function isRowSelected() {
            return true;
          }
        },
        columns: [{
          heading: 'Link',
          component: link(spy),
          key: 'link'
        }, {
          heading: 'First Name',
          key: 'first'
        }, {
          heading: 'Last Name',
          key: 'last'
        }],
        items: data
      })),
          queryAllByLabelText = _fullRender8.queryAllByLabelText;

      var checkbox = queryAllByLabelText('Select row')[0];

      _react2.fireEvent.click(checkbox);

      expect(spy).not.toHaveBeenCalled();
    });
  });
  describe('accessor prop compatibility', function () {
    var component;
    var mappableColumns = [{
      heading: 'Name',
      accessor: function accessor(_ref5) {
        var item = _ref5.item;
        return item.store;
      }
    }, {
      heading: 'Sales',
      accessor: 'total',
      numeric: true
    }];
    beforeEach(function () {
      component = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzTable2["default"], {
        title: "All Stores",
        subtitle: "Compared to the same period last year",
        columns: mappableColumns,
        items: items
      }));
    });
    describe('when the accessor prop is a function', function () {
      it('renders the table properly', function () {
        var _component = component,
            getByText = _component.getByText;
        expect(getByText('Name')).toBeDefined();
      });
    });
    describe('when the accessor prop is a string', function () {
      it('renders the table properly', function () {
        var _component2 = component,
            getByText = _component2.getByText;
        expect(getByText('Sales')).toBeDefined();
      });
    });
  });
  it('should meet accessibility guidelines',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2() {
    var wrapper, actual;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            wrapper = (0, _jestGlobals.renderToHtml)(_react["default"].createElement(_EzTable2["default"], {
              columns: columns,
              items: items
            }));
            _context2.next = 3;
            return (0, _jestAxe.axe)(wrapper);

          case 3:
            actual = _context2.sent;
            expect(actual).toHaveNoViolations();

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,