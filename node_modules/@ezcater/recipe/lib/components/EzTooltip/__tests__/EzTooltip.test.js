"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _core = require("@emotion/core");

var _sosia = require("sosia");

var _react2 = require("@testing-library/react");

var _EzTooltipTest = _interopRequireDefault(require("./EzTooltip.test.md"));

var _EzTooltip = _interopRequireDefault(require("../EzTooltip"));

var _jestGlobals = require("../../../jest-globals");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var scope = {
  EzTooltip: _EzTooltip["default"],
  Global: _core.Global,
  css: _core.css
};
describe('EzTooltip', function () {
  (0, _sosia.visualSnapshots)({
    markdown: _EzTooltipTest["default"],
    scope: _objectSpread({}, scope, {
      fireEvent: _react2.fireEvent
    })
  });
  describe('interactions', function () {
    it('should show tooltip on focus', function () {
      var _render = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzTooltip["default"], {
        message: "tooltip visible",
        position: "horizontal"
      }, _react["default"].createElement("input", null))),
          container = _render.container,
          getByRole = _render.getByRole;

      _react2.fireEvent.focus(container.querySelector('input'));

      var tooltip = getByRole('tooltip');
      expect(tooltip).toBeVisible();
    });
    it('should hide tooltip on blur', function () {
      var _render2 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzTooltip["default"], {
        message: "tooltip visible",
        position: "horizontal"
      }, _react["default"].createElement("input", null))),
          container = _render2.container,
          getByRole = _render2.getByRole,
          queryByRole = _render2.queryByRole;

      _react2.fireEvent.focus(container.querySelector('input'));

      var tooltip = getByRole('tooltip');
      expect(tooltip).toBeVisible();

      _react2.fireEvent.blur(container.querySelector('input'));

      expect(queryByRole('tooltip')).toBeNull();
    });
    it('should show tooltip on hover', function () {
      var _render3 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzTooltip["default"], {
        message: "tooltip visible",
        position: "horizontal"
      }, _react["default"].createElement("input", null))),
          container = _render3.container,
          getByRole = _render3.getByRole;

      _react2.fireEvent.mouseEnter(container.querySelector('input'));

      var tooltip = getByRole('tooltip');
      expect(tooltip).toBeVisible();
    });
    it('should hide tooltip on hover exit', function () {
      var _render4 = (0, _jestGlobals.fullRender)(_react["default"].createElement(_EzTooltip["default"], {
        message: "tooltip visible",
        position: "horizontal"
      }, _react["default"].createElement("input", null))),
          container = _render4.container,
          getByRole = _render4.getByRole,
          queryByRole = _render4.queryByRole;

      _react2.fireEvent.mouseEnter(container.querySelector('input'));

      var tooltip = getByRole('tooltip');
      expect(tooltip).toBeVisible();

      _react2.fireEvent.mouseLeave(container.querySelector('input'));

      expect(queryByRole('tooltip')).toBeNull();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0V6VG9vbHRpcC9fX3Rlc3RzX18vRXpUb29sdGlwLnRlc3QudHN4Il0sIm5hbWVzIjpbInNjb3BlIiwiRXpUb29sdGlwIiwiR2xvYmFsIiwiY3NzIiwiZGVzY3JpYmUiLCJtYXJrZG93biIsInJlZ3Jlc3Npb25UZXN0cyIsImZpcmVFdmVudCIsIml0IiwiY29udGFpbmVyIiwiZ2V0QnlSb2xlIiwiZm9jdXMiLCJxdWVyeVNlbGVjdG9yIiwidG9vbHRpcCIsImV4cGVjdCIsInRvQmVWaXNpYmxlIiwicXVlcnlCeVJvbGUiLCJibHVyIiwidG9CZU51bGwiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLEtBQUssR0FBRztBQUFDQyxFQUFBQSxTQUFTLEVBQVRBLHFCQUFEO0FBQVlDLEVBQUFBLE1BQU0sRUFBTkEsWUFBWjtBQUFvQkMsRUFBQUEsR0FBRyxFQUFIQTtBQUFwQixDQUFkO0FBRUFDLFFBQVEsQ0FBQyxXQUFELEVBQWMsWUFBTTtBQUMxQiw4QkFBZ0I7QUFBQ0MsSUFBQUEsUUFBUSxFQUFFQyx5QkFBWDtBQUE0Qk4sSUFBQUEsS0FBSyxvQkFBTUEsS0FBTjtBQUFhTyxNQUFBQSxTQUFTLEVBQVRBO0FBQWI7QUFBakMsR0FBaEI7QUFDQUgsRUFBQUEsUUFBUSxDQUFDLGNBQUQsRUFBaUIsWUFBTTtBQUM3QkksSUFBQUEsRUFBRSxDQUFDLDhCQUFELEVBQWlDLFlBQU07QUFBQSxvQkFDUiw2QkFDN0IsZ0NBQUMscUJBQUQ7QUFBVyxRQUFBLE9BQU8sRUFBQyxpQkFBbkI7QUFBcUMsUUFBQSxRQUFRLEVBQUM7QUFBOUMsU0FDRSw4Q0FERixDQUQ2QixDQURRO0FBQUEsVUFDaENDLFNBRGdDLFdBQ2hDQSxTQURnQztBQUFBLFVBQ3JCQyxTQURxQixXQUNyQkEsU0FEcUI7O0FBT3ZDSCx3QkFBVUksS0FBVixDQUFnQkYsU0FBUyxDQUFDRyxhQUFWLENBQXdCLE9BQXhCLENBQWhCOztBQUVBLFVBQU1DLE9BQU8sR0FBR0gsU0FBUyxDQUFDLFNBQUQsQ0FBekI7QUFFQUksTUFBQUEsTUFBTSxDQUFDRCxPQUFELENBQU4sQ0FBZ0JFLFdBQWhCO0FBQ0QsS0FaQyxDQUFGO0FBYUFQLElBQUFBLEVBQUUsQ0FBQyw2QkFBRCxFQUFnQyxZQUFNO0FBQUEscUJBQ00sNkJBQzFDLGdDQUFDLHFCQUFEO0FBQVcsUUFBQSxPQUFPLEVBQUMsaUJBQW5CO0FBQXFDLFFBQUEsUUFBUSxFQUFDO0FBQTlDLFNBQ0UsOENBREYsQ0FEMEMsQ0FETjtBQUFBLFVBQy9CQyxTQUQrQixZQUMvQkEsU0FEK0I7QUFBQSxVQUNwQkMsU0FEb0IsWUFDcEJBLFNBRG9CO0FBQUEsVUFDVE0sV0FEUyxZQUNUQSxXQURTOztBQU90Q1Qsd0JBQVVJLEtBQVYsQ0FBZ0JGLFNBQVMsQ0FBQ0csYUFBVixDQUF3QixPQUF4QixDQUFoQjs7QUFFQSxVQUFNQyxPQUFPLEdBQUdILFNBQVMsQ0FBQyxTQUFELENBQXpCO0FBRUFJLE1BQUFBLE1BQU0sQ0FBQ0QsT0FBRCxDQUFOLENBQWdCRSxXQUFoQjs7QUFFQVIsd0JBQVVVLElBQVYsQ0FBZVIsU0FBUyxDQUFDRyxhQUFWLENBQXdCLE9BQXhCLENBQWY7O0FBRUFFLE1BQUFBLE1BQU0sQ0FBQ0UsV0FBVyxDQUFDLFNBQUQsQ0FBWixDQUFOLENBQStCRSxRQUEvQjtBQUNELEtBaEJDLENBQUY7QUFpQkFWLElBQUFBLEVBQUUsQ0FBQyw4QkFBRCxFQUFpQyxZQUFNO0FBQUEscUJBQ1IsNkJBQzdCLGdDQUFDLHFCQUFEO0FBQVcsUUFBQSxPQUFPLEVBQUMsaUJBQW5CO0FBQXFDLFFBQUEsUUFBUSxFQUFDO0FBQTlDLFNBQ0UsOENBREYsQ0FENkIsQ0FEUTtBQUFBLFVBQ2hDQyxTQURnQyxZQUNoQ0EsU0FEZ0M7QUFBQSxVQUNyQkMsU0FEcUIsWUFDckJBLFNBRHFCOztBQU92Q0gsd0JBQVVZLFVBQVYsQ0FBcUJWLFNBQVMsQ0FBQ0csYUFBVixDQUF3QixPQUF4QixDQUFyQjs7QUFFQSxVQUFNQyxPQUFPLEdBQUdILFNBQVMsQ0FBQyxTQUFELENBQXpCO0FBRUFJLE1BQUFBLE1BQU0sQ0FBQ0QsT0FBRCxDQUFOLENBQWdCRSxXQUFoQjtBQUNELEtBWkMsQ0FBRjtBQWFBUCxJQUFBQSxFQUFFLENBQUMsbUNBQUQsRUFBc0MsWUFBTTtBQUFBLHFCQUNBLDZCQUMxQyxnQ0FBQyxxQkFBRDtBQUFXLFFBQUEsT0FBTyxFQUFDLGlCQUFuQjtBQUFxQyxRQUFBLFFBQVEsRUFBQztBQUE5QyxTQUNFLDhDQURGLENBRDBDLENBREE7QUFBQSxVQUNyQ0MsU0FEcUMsWUFDckNBLFNBRHFDO0FBQUEsVUFDMUJDLFNBRDBCLFlBQzFCQSxTQUQwQjtBQUFBLFVBQ2ZNLFdBRGUsWUFDZkEsV0FEZTs7QUFPNUNULHdCQUFVWSxVQUFWLENBQXFCVixTQUFTLENBQUNHLGFBQVYsQ0FBd0IsT0FBeEIsQ0FBckI7O0FBRUEsVUFBTUMsT0FBTyxHQUFHSCxTQUFTLENBQUMsU0FBRCxDQUF6QjtBQUVBSSxNQUFBQSxNQUFNLENBQUNELE9BQUQsQ0FBTixDQUFnQkUsV0FBaEI7O0FBRUFSLHdCQUFVYSxVQUFWLENBQXFCWCxTQUFTLENBQUNHLGFBQVYsQ0FBd0IsT0FBeEIsQ0FBckI7O0FBRUFFLE1BQUFBLE1BQU0sQ0FBQ0UsV0FBVyxDQUFDLFNBQUQsQ0FBWixDQUFOLENBQStCRSxRQUEvQjtBQUNELEtBaEJDLENBQUY7QUFpQkQsR0E3RE8sQ0FBUjtBQThERCxDQWhFTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7R2xvYmFsLCBjc3N9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHt2aXN1YWxTbmFwc2hvdHN9IGZyb20gJ3Nvc2lhJztcbmltcG9ydCB7ZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCByZWdyZXNzaW9uVGVzdHMgZnJvbSAnLi9FelRvb2x0aXAudGVzdC5tZCc7XG5pbXBvcnQgRXpUb29sdGlwIGZyb20gJy4uL0V6VG9vbHRpcCc7XG5pbXBvcnQge2Z1bGxSZW5kZXIgYXMgcmVuZGVyfSBmcm9tICcuLi8uLi8uLi9qZXN0LWdsb2JhbHMnO1xuXG5jb25zdCBzY29wZSA9IHtFelRvb2x0aXAsIEdsb2JhbCwgY3NzfTtcblxuZGVzY3JpYmUoJ0V6VG9vbHRpcCcsICgpID0+IHtcbiAgdmlzdWFsU25hcHNob3RzKHttYXJrZG93bjogcmVncmVzc2lvblRlc3RzLCBzY29wZTogey4uLnNjb3BlLCBmaXJlRXZlbnR9fSk7XG4gIGRlc2NyaWJlKCdpbnRlcmFjdGlvbnMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBzaG93IHRvb2x0aXAgb24gZm9jdXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7Y29udGFpbmVyLCBnZXRCeVJvbGV9ID0gcmVuZGVyKFxuICAgICAgICA8RXpUb29sdGlwIG1lc3NhZ2U9XCJ0b29sdGlwIHZpc2libGVcIiBwb3NpdGlvbj1cImhvcml6b250YWxcIj5cbiAgICAgICAgICA8aW5wdXQgLz5cbiAgICAgICAgPC9FelRvb2x0aXA+XG4gICAgICApO1xuXG4gICAgICBmaXJlRXZlbnQuZm9jdXMoY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykpO1xuXG4gICAgICBjb25zdCB0b29sdGlwID0gZ2V0QnlSb2xlKCd0b29sdGlwJyk7XG5cbiAgICAgIGV4cGVjdCh0b29sdGlwKS50b0JlVmlzaWJsZSgpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgaGlkZSB0b29sdGlwIG9uIGJsdXInLCAoKSA9PiB7XG4gICAgICBjb25zdCB7Y29udGFpbmVyLCBnZXRCeVJvbGUsIHF1ZXJ5QnlSb2xlfSA9IHJlbmRlcihcbiAgICAgICAgPEV6VG9vbHRpcCBtZXNzYWdlPVwidG9vbHRpcCB2aXNpYmxlXCIgcG9zaXRpb249XCJob3Jpem9udGFsXCI+XG4gICAgICAgICAgPGlucHV0IC8+XG4gICAgICAgIDwvRXpUb29sdGlwPlxuICAgICAgKTtcblxuICAgICAgZmlyZUV2ZW50LmZvY3VzKGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpKTtcblxuICAgICAgY29uc3QgdG9vbHRpcCA9IGdldEJ5Um9sZSgndG9vbHRpcCcpO1xuXG4gICAgICBleHBlY3QodG9vbHRpcCkudG9CZVZpc2libGUoKTtcblxuICAgICAgZmlyZUV2ZW50LmJsdXIoY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykpO1xuXG4gICAgICBleHBlY3QocXVlcnlCeVJvbGUoJ3Rvb2x0aXAnKSkudG9CZU51bGwoKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHNob3cgdG9vbHRpcCBvbiBob3ZlcicsICgpID0+IHtcbiAgICAgIGNvbnN0IHtjb250YWluZXIsIGdldEJ5Um9sZX0gPSByZW5kZXIoXG4gICAgICAgIDxFelRvb2x0aXAgbWVzc2FnZT1cInRvb2x0aXAgdmlzaWJsZVwiIHBvc2l0aW9uPVwiaG9yaXpvbnRhbFwiPlxuICAgICAgICAgIDxpbnB1dCAvPlxuICAgICAgICA8L0V6VG9vbHRpcD5cbiAgICAgICk7XG5cbiAgICAgIGZpcmVFdmVudC5tb3VzZUVudGVyKGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpKTtcblxuICAgICAgY29uc3QgdG9vbHRpcCA9IGdldEJ5Um9sZSgndG9vbHRpcCcpO1xuXG4gICAgICBleHBlY3QodG9vbHRpcCkudG9CZVZpc2libGUoKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGhpZGUgdG9vbHRpcCBvbiBob3ZlciBleGl0JywgKCkgPT4ge1xuICAgICAgY29uc3Qge2NvbnRhaW5lciwgZ2V0QnlSb2xlLCBxdWVyeUJ5Um9sZX0gPSByZW5kZXIoXG4gICAgICAgIDxFelRvb2x0aXAgbWVzc2FnZT1cInRvb2x0aXAgdmlzaWJsZVwiIHBvc2l0aW9uPVwiaG9yaXpvbnRhbFwiPlxuICAgICAgICAgIDxpbnB1dCAvPlxuICAgICAgICA8L0V6VG9vbHRpcD5cbiAgICAgICk7XG5cbiAgICAgIGZpcmVFdmVudC5tb3VzZUVudGVyKGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpKTtcblxuICAgICAgY29uc3QgdG9vbHRpcCA9IGdldEJ5Um9sZSgndG9vbHRpcCcpO1xuXG4gICAgICBleHBlY3QodG9vbHRpcCkudG9CZVZpc2libGUoKTtcblxuICAgICAgZmlyZUV2ZW50Lm1vdXNlTGVhdmUoY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykpO1xuXG4gICAgICBleHBlY3QocXVlcnlCeVJvbGUoJ3Rvb2x0aXAnKSkudG9CZU51bGwoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==