"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

/**
 * Converts a color from CSS hex format to CSS rgb format.
 */
function convertHexToRGB(color) {
  // eslint-disable-next-line no-param-reassign
  color = color.substr(1);
  var re = new RegExp(".{1,".concat(color.length / 3, "}"), 'g');
  var colors = color.match(re);
  return "rgb(".concat(colors.map(function (n) {
    return parseInt(n, 16);
  }).join(', '), ")");
}

/**
 * Returns an object with the type and values of a color.
 */
function decomposeColor(color) {
  if (color.charAt(0) === '#') return decomposeColor(convertHexToRGB(color));
  var marker = color.indexOf('(');
  var type = color.substring(0, marker);
  var values = color.substring(marker + 1, color.length - 1).split(',').map(function (value) {
    return parseFloat(value);
  });
  return {
    type: type,
    values: values
  };
}

function floatToHex(n) {
  var hex = parseInt(n, 10).toString(16);
  return hex.length === 1 ? "0".concat(hex) : hex;
}
/**
 * Converts a color object with type and values to a string.
 */


function recomposeColor(_ref) {
  var values = _ref.values;
  return "#".concat(values.map(floatToHex).join(''));
}

var clamp = function clamp(n) {
  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  return n < min ? min : n > max ? max : n;
};

function darken(hexColor, value) {
  var _decomposeColor = decomposeColor(hexColor),
      type = _decomposeColor.type,
      values = _decomposeColor.values;

  for (var i = 0; i < 3; i += 1) {
    values[i] *= 1 - clamp(value);
  }

  return recomposeColor({
    type: type,
    values: values
  });
}

var _default = darken;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHlsZXMvZGFya2VuLnRzIl0sIm5hbWVzIjpbImNvbnZlcnRIZXhUb1JHQiIsImNvbG9yIiwic3Vic3RyIiwicmUiLCJSZWdFeHAiLCJsZW5ndGgiLCJjb2xvcnMiLCJtYXRjaCIsIm1hcCIsIm4iLCJwYXJzZUludCIsImpvaW4iLCJkZWNvbXBvc2VDb2xvciIsImNoYXJBdCIsIm1hcmtlciIsImluZGV4T2YiLCJ0eXBlIiwic3Vic3RyaW5nIiwidmFsdWVzIiwic3BsaXQiLCJ2YWx1ZSIsInBhcnNlRmxvYXQiLCJmbG9hdFRvSGV4IiwiaGV4IiwidG9TdHJpbmciLCJyZWNvbXBvc2VDb2xvciIsImNsYW1wIiwibWluIiwibWF4IiwiZGFya2VuIiwiaGV4Q29sb3IiLCJpIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7OztBQUdBLFNBQVNBLGVBQVQsQ0FBeUJDLEtBQXpCLEVBQXdDO0FBQ3RDO0FBQ0FBLEVBQUFBLEtBQUssR0FBR0EsS0FBSyxDQUFDQyxNQUFOLENBQWEsQ0FBYixDQUFSO0FBRUEsTUFBTUMsRUFBRSxHQUFHLElBQUlDLE1BQUosZUFBa0JILEtBQUssQ0FBQ0ksTUFBTixHQUFlLENBQWpDLFFBQXVDLEdBQXZDLENBQVg7QUFDQSxNQUFNQyxNQUFNLEdBQUdMLEtBQUssQ0FBQ00sS0FBTixDQUFZSixFQUFaLENBQWY7QUFFQSx1QkFBY0csTUFBTSxDQUFDRSxHQUFQLENBQVcsVUFBQUMsQ0FBQztBQUFBLFdBQUlDLFFBQVEsQ0FBQ0QsQ0FBRCxFQUFJLEVBQUosQ0FBWjtBQUFBLEdBQVosRUFBaUNFLElBQWpDLENBQXNDLElBQXRDLENBQWQ7QUFDRDs7QUFTRDs7O0FBR0EsU0FBU0MsY0FBVCxDQUF3QlgsS0FBeEIsRUFBOEM7QUFDNUMsTUFBSUEsS0FBSyxDQUFDWSxNQUFOLENBQWEsQ0FBYixNQUFvQixHQUF4QixFQUE2QixPQUFPRCxjQUFjLENBQUNaLGVBQWUsQ0FBQ0MsS0FBRCxDQUFoQixDQUFyQjtBQUU3QixNQUFNYSxNQUFNLEdBQUdiLEtBQUssQ0FBQ2MsT0FBTixDQUFjLEdBQWQsQ0FBZjtBQUNBLE1BQU1DLElBQUksR0FBR2YsS0FBSyxDQUFDZ0IsU0FBTixDQUFnQixDQUFoQixFQUFtQkgsTUFBbkIsQ0FBYjtBQUNBLE1BQU1JLE1BQU0sR0FBR2pCLEtBQUssQ0FDakJnQixTQURZLENBQ0ZILE1BQU0sR0FBRyxDQURQLEVBQ1ViLEtBQUssQ0FBQ0ksTUFBTixHQUFlLENBRHpCLEVBRVpjLEtBRlksQ0FFTixHQUZNLEVBR1pYLEdBSFksQ0FHUixVQUFBWSxLQUFLO0FBQUEsV0FBSUMsVUFBVSxDQUFDRCxLQUFELENBQWQ7QUFBQSxHQUhHLENBQWY7QUFLQSxTQUFPO0FBQUNKLElBQUFBLElBQUksRUFBSkEsSUFBRDtBQUFPRSxJQUFBQSxNQUFNLEVBQU5BO0FBQVAsR0FBUDtBQUNEOztBQUVELFNBQVNJLFVBQVQsQ0FBb0JiLENBQXBCLEVBQXVCO0FBQ3JCLE1BQU1jLEdBQUcsR0FBR2IsUUFBUSxDQUFDRCxDQUFELEVBQUksRUFBSixDQUFSLENBQWdCZSxRQUFoQixDQUF5QixFQUF6QixDQUFaO0FBQ0EsU0FBT0QsR0FBRyxDQUFDbEIsTUFBSixLQUFlLENBQWYsY0FBdUJrQixHQUF2QixJQUErQkEsR0FBdEM7QUFDRDtBQUVEOzs7OztBQUdBLFNBQVNFLGNBQVQsT0FBeUM7QUFBQSxNQUFoQlAsTUFBZ0IsUUFBaEJBLE1BQWdCO0FBQ3ZDLG9CQUFXQSxNQUFNLENBQUNWLEdBQVAsQ0FBV2MsVUFBWCxFQUF1QlgsSUFBdkIsQ0FBNEIsRUFBNUIsQ0FBWDtBQUNEOztBQUVELElBQU1lLEtBQUssR0FBRyxTQUFSQSxLQUFRLENBQUNqQixDQUFEO0FBQUEsTUFBWWtCLEdBQVosdUVBQWtCLENBQWxCO0FBQUEsTUFBcUJDLEdBQXJCLHVFQUEyQixDQUEzQjtBQUFBLFNBQWtDbkIsQ0FBQyxHQUFHa0IsR0FBSixHQUFVQSxHQUFWLEdBQWdCbEIsQ0FBQyxHQUFHbUIsR0FBSixHQUFVQSxHQUFWLEdBQWdCbkIsQ0FBbEU7QUFBQSxDQUFkOztBQUVBLFNBQVNvQixNQUFULENBQWdCQyxRQUFoQixFQUFrQ1YsS0FBbEMsRUFBaUQ7QUFBQSx3QkFDeEJSLGNBQWMsQ0FBQ2tCLFFBQUQsQ0FEVTtBQUFBLE1BQ3hDZCxJQUR3QyxtQkFDeENBLElBRHdDO0FBQUEsTUFDbENFLE1BRGtDLG1CQUNsQ0EsTUFEa0M7O0FBRy9DLE9BQUssSUFBSWEsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxDQUFwQixFQUF1QkEsQ0FBQyxJQUFJLENBQTVCO0FBQStCYixJQUFBQSxNQUFNLENBQUNhLENBQUQsQ0FBTixJQUFhLElBQUlMLEtBQUssQ0FBQ04sS0FBRCxDQUF0QjtBQUEvQjs7QUFFQSxTQUFPSyxjQUFjLENBQUM7QUFBQ1QsSUFBQUEsSUFBSSxFQUFKQSxJQUFEO0FBQU9FLElBQUFBLE1BQU0sRUFBTkE7QUFBUCxHQUFELENBQXJCO0FBQ0Q7O2VBRWNXLE0iLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgaGV4IGZvcm1hdCB0byBDU1MgcmdiIGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gY29udmVydEhleFRvUkdCKGNvbG9yOiBzdHJpbmcpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbG9yID0gY29sb3Iuc3Vic3RyKDEpO1xuXG4gIGNvbnN0IHJlID0gbmV3IFJlZ0V4cChgLnsxLCR7Y29sb3IubGVuZ3RoIC8gM319YCwgJ2cnKTtcbiAgY29uc3QgY29sb3JzID0gY29sb3IubWF0Y2gocmUpO1xuXG4gIHJldHVybiBgcmdiKCR7Y29sb3JzLm1hcChuID0+IHBhcnNlSW50KG4sIDE2KSkuam9pbignLCAnKX0pYDtcbn1cblxudHlwZSBjb2xvck1vZGVsID0gJ3JnYicgfCAncmdiYScgfCAnaHNsJyB8ICdoc2xhJztcblxudHlwZSBjb2xvciA9IHtcbiAgdHlwZTogY29sb3JNb2RlbDtcbiAgdmFsdWVzOiBhbnlbXTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgdHlwZSBhbmQgdmFsdWVzIG9mIGEgY29sb3IuXG4gKi9cbmZ1bmN0aW9uIGRlY29tcG9zZUNvbG9yKGNvbG9yOiBzdHJpbmcpOiBjb2xvciB7XG4gIGlmIChjb2xvci5jaGFyQXQoMCkgPT09ICcjJykgcmV0dXJuIGRlY29tcG9zZUNvbG9yKGNvbnZlcnRIZXhUb1JHQihjb2xvcikpO1xuXG4gIGNvbnN0IG1hcmtlciA9IGNvbG9yLmluZGV4T2YoJygnKTtcbiAgY29uc3QgdHlwZSA9IGNvbG9yLnN1YnN0cmluZygwLCBtYXJrZXIpIGFzIGNvbG9yTW9kZWw7XG4gIGNvbnN0IHZhbHVlcyA9IGNvbG9yXG4gICAgLnN1YnN0cmluZyhtYXJrZXIgKyAxLCBjb2xvci5sZW5ndGggLSAxKVxuICAgIC5zcGxpdCgnLCcpXG4gICAgLm1hcCh2YWx1ZSA9PiBwYXJzZUZsb2F0KHZhbHVlKSk7XG5cbiAgcmV0dXJuIHt0eXBlLCB2YWx1ZXN9O1xufVxuXG5mdW5jdGlvbiBmbG9hdFRvSGV4KG4pIHtcbiAgY29uc3QgaGV4ID0gcGFyc2VJbnQobiwgMTApLnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIGhleC5sZW5ndGggPT09IDEgPyBgMCR7aGV4fWAgOiBoZXg7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBvYmplY3Qgd2l0aCB0eXBlIGFuZCB2YWx1ZXMgdG8gYSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKHt2YWx1ZXN9OiBjb2xvcikge1xuICByZXR1cm4gYCMke3ZhbHVlcy5tYXAoZmxvYXRUb0hleCkuam9pbignJyl9YDtcbn1cblxuY29uc3QgY2xhbXAgPSAobjogbnVtYmVyLCBtaW4gPSAwLCBtYXggPSAxKSA9PiAobiA8IG1pbiA/IG1pbiA6IG4gPiBtYXggPyBtYXggOiBuKTtcblxuZnVuY3Rpb24gZGFya2VuKGhleENvbG9yOiBzdHJpbmcsIHZhbHVlOiBudW1iZXIpIHtcbiAgY29uc3Qge3R5cGUsIHZhbHVlc30gPSBkZWNvbXBvc2VDb2xvcihoZXhDb2xvcik7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHZhbHVlc1tpXSAqPSAxIC0gY2xhbXAodmFsdWUpO1xuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcih7dHlwZSwgdmFsdWVzfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRhcmtlbjtcbiJdfQ==