"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _ = require("..");

var _styled = _interopRequireDefault(require("../../themes/styled"));

var _jestGlobals = require("../../jest-globals");

describe('responsive()', function () {
  var fn;
  var theme = {
    breakpoints: {
      tablet: '37.5rem',
      desktop: '56.25rem',
      big: '75rem'
    }
  };
  var colors = {
    white: '#fff',
    black: '#000'
  };
  beforeEach(function () {
    fn = (0, _.responsive)('use', {
      light: 'color: #fff',
      dark: function dark(props) {
        return "color: ".concat(props.colors.black);
      }
    });
  });
  it('should return undefined if there is no matching prop', function () {
    expect(fn({})).toBeUndefined();
  });
  it('should render base styles plus media queries for each breakpoint provided', function () {
    var subjectUnderTest = fn({
      use: {
        base: 'light',
        desktop: 'dark'
      },
      colors: colors,
      theme: theme
    });
    var Component =
    /*#__PURE__*/
    (0, _styled["default"])("div", {
      target: "eye7t5l0"
    })(subjectUnderTest);

    var _fullRender = (0, _jestGlobals.fullRender)(_react["default"].createElement(Component, null)),
        container = _fullRender.container;

    expect(container.firstChild).toMatchSnapshot();
  });
  it('should raise an error if called without a base variant', function () {
    expect(function () {
      return fn({
        use: {
          desktop: 'dark'
        },
        colors: colors,
        theme: theme
      });
    }).toThrow();
  });
  it('should raise an error if called without a theme', function () {
    expect(function () {
      return fn({
        use: {
          base: 'light',
          desktop: 'dark'
        },
        colors: colors
      });
    }).toThrow();
  });
  it('should raise an error if called without breakpoints', function () {
    expect(function () {
      return fn({
        use: {
          base: 'light',
          desktop: 'dark'
        },
        colors: colors,
        theme: {}
      });
    }).toThrow();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZXMvX190ZXN0c19fL3Jlc3BvbnNpdmUudGVzdC50c3giXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJmbiIsInRoZW1lIiwiYnJlYWtwb2ludHMiLCJ0YWJsZXQiLCJkZXNrdG9wIiwiYmlnIiwiY29sb3JzIiwid2hpdGUiLCJibGFjayIsImJlZm9yZUVhY2giLCJsaWdodCIsImRhcmsiLCJwcm9wcyIsIml0IiwiZXhwZWN0IiwidG9CZVVuZGVmaW5lZCIsInN1YmplY3RVbmRlclRlc3QiLCJ1c2UiLCJiYXNlIiwiQ29tcG9uZW50Iiwic3R5bGVkIiwiY29udGFpbmVyIiwiZmlyc3RDaGlsZCIsInRvTWF0Y2hTbmFwc2hvdCIsInRvVGhyb3ciXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQUEsUUFBUSxDQUFDLGNBQUQsRUFBaUIsWUFBTTtBQUM3QixNQUFJQyxFQUFKO0FBQ0EsTUFBTUMsS0FBSyxHQUFHO0FBQ1pDLElBQUFBLFdBQVcsRUFBRTtBQUNYQyxNQUFBQSxNQUFNLEVBQUUsU0FERztBQUVYQyxNQUFBQSxPQUFPLEVBQUUsVUFGRTtBQUdYQyxNQUFBQSxHQUFHLEVBQUU7QUFITTtBQURELEdBQWQ7QUFPQSxNQUFNQyxNQUFNLEdBQUc7QUFDYkMsSUFBQUEsS0FBSyxFQUFFLE1BRE07QUFFYkMsSUFBQUEsS0FBSyxFQUFFO0FBRk0sR0FBZjtBQUtBQyxFQUFBQSxVQUFVLENBQUMsWUFBTTtBQUNmVCxJQUFBQSxFQUFFLEdBQUcsa0JBQVcsS0FBWCxFQUFrQjtBQUNyQlUsTUFBQUEsS0FBSyxFQUFFLGFBRGM7QUFFckJDLE1BQUFBLElBQUksRUFBRSxjQUFBQyxLQUFLO0FBQUEsZ0NBQWNBLEtBQUssQ0FBQ04sTUFBTixDQUFhRSxLQUEzQjtBQUFBO0FBRlUsS0FBbEIsQ0FBTDtBQUlELEdBTFMsQ0FBVjtBQU9BSyxFQUFBQSxFQUFFLENBQUMsc0RBQUQsRUFBeUQsWUFBTTtBQUMvREMsSUFBQUEsTUFBTSxDQUFDZCxFQUFFLENBQUMsRUFBRCxDQUFILENBQU4sQ0FBZWUsYUFBZjtBQUNELEdBRkMsQ0FBRjtBQUlBRixFQUFBQSxFQUFFLENBQUMsMkVBQUQsRUFBOEUsWUFBTTtBQUNwRixRQUFNRyxnQkFBZ0IsR0FBR2hCLEVBQUUsQ0FBQztBQUFDaUIsTUFBQUEsR0FBRyxFQUFFO0FBQUNDLFFBQUFBLElBQUksRUFBRSxPQUFQO0FBQWdCZCxRQUFBQSxPQUFPLEVBQUU7QUFBekIsT0FBTjtBQUF3Q0UsTUFBQUEsTUFBTSxFQUFOQSxNQUF4QztBQUFnREwsTUFBQUEsS0FBSyxFQUFMQTtBQUFoRCxLQUFELENBQTNCO0FBQ0EsUUFBTWtCLFNBQVM7QUFBQTtBQUFBLFFBQUdDLGtCQUFIO0FBQUE7QUFBQSxPQUFjSixnQkFBZCxDQUFmOztBQUZvRixzQkFHaEUsNkJBQVcsZ0NBQUMsU0FBRCxPQUFYLENBSGdFO0FBQUEsUUFHN0VLLFNBSDZFLGVBRzdFQSxTQUg2RTs7QUFJcEZQLElBQUFBLE1BQU0sQ0FBQ08sU0FBUyxDQUFDQyxVQUFYLENBQU4sQ0FBNkJDLGVBQTdCO0FBQ0QsR0FMQyxDQUFGO0FBT0FWLEVBQUFBLEVBQUUsQ0FBQyx3REFBRCxFQUEyRCxZQUFNO0FBQ2pFQyxJQUFBQSxNQUFNLENBQUM7QUFBQSxhQUFNZCxFQUFFLENBQUM7QUFBQ2lCLFFBQUFBLEdBQUcsRUFBRTtBQUFDYixVQUFBQSxPQUFPLEVBQUU7QUFBVixTQUFOO0FBQXlCRSxRQUFBQSxNQUFNLEVBQU5BLE1BQXpCO0FBQWlDTCxRQUFBQSxLQUFLLEVBQUxBO0FBQWpDLE9BQUQsQ0FBUjtBQUFBLEtBQUQsQ0FBTixDQUEwRHVCLE9BQTFEO0FBQ0QsR0FGQyxDQUFGO0FBSUFYLEVBQUFBLEVBQUUsQ0FBQyxpREFBRCxFQUFvRCxZQUFNO0FBQzFEQyxJQUFBQSxNQUFNLENBQUM7QUFBQSxhQUFNZCxFQUFFLENBQUM7QUFBQ2lCLFFBQUFBLEdBQUcsRUFBRTtBQUFDQyxVQUFBQSxJQUFJLEVBQUUsT0FBUDtBQUFnQmQsVUFBQUEsT0FBTyxFQUFFO0FBQXpCLFNBQU47QUFBd0NFLFFBQUFBLE1BQU0sRUFBTkE7QUFBeEMsT0FBRCxDQUFSO0FBQUEsS0FBRCxDQUFOLENBQWtFa0IsT0FBbEU7QUFDRCxHQUZDLENBQUY7QUFJQVgsRUFBQUEsRUFBRSxDQUFDLHFEQUFELEVBQXdELFlBQU07QUFDOURDLElBQUFBLE1BQU0sQ0FBQztBQUFBLGFBQU1kLEVBQUUsQ0FBQztBQUFDaUIsUUFBQUEsR0FBRyxFQUFFO0FBQUNDLFVBQUFBLElBQUksRUFBRSxPQUFQO0FBQWdCZCxVQUFBQSxPQUFPLEVBQUU7QUFBekIsU0FBTjtBQUF3Q0UsUUFBQUEsTUFBTSxFQUFOQSxNQUF4QztBQUFnREwsUUFBQUEsS0FBSyxFQUFFO0FBQXZELE9BQUQsQ0FBUjtBQUFBLEtBQUQsQ0FBTixDQUE2RXVCLE9BQTdFO0FBQ0QsR0FGQyxDQUFGO0FBR0QsQ0EzQ08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3Jlc3BvbnNpdmV9IGZyb20gJy4uJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vLi4vdGhlbWVzL3N0eWxlZCc7XG5pbXBvcnQge2Z1bGxSZW5kZXJ9IGZyb20gJy4uLy4uL2plc3QtZ2xvYmFscyc7XG5cbmRlc2NyaWJlKCdyZXNwb25zaXZlKCknLCAoKSA9PiB7XG4gIGxldCBmbjtcbiAgY29uc3QgdGhlbWUgPSB7XG4gICAgYnJlYWtwb2ludHM6IHtcbiAgICAgIHRhYmxldDogJzM3LjVyZW0nLFxuICAgICAgZGVza3RvcDogJzU2LjI1cmVtJyxcbiAgICAgIGJpZzogJzc1cmVtJyxcbiAgICB9LFxuICB9O1xuICBjb25zdCBjb2xvcnMgPSB7XG4gICAgd2hpdGU6ICcjZmZmJyxcbiAgICBibGFjazogJyMwMDAnLFxuICB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGZuID0gcmVzcG9uc2l2ZSgndXNlJywge1xuICAgICAgbGlnaHQ6ICdjb2xvcjogI2ZmZicsXG4gICAgICBkYXJrOiBwcm9wcyA9PiBgY29sb3I6ICR7cHJvcHMuY29sb3JzLmJsYWNrfWAsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIHVuZGVmaW5lZCBpZiB0aGVyZSBpcyBubyBtYXRjaGluZyBwcm9wJywgKCkgPT4ge1xuICAgIGV4cGVjdChmbih7fSkpLnRvQmVVbmRlZmluZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYmFzZSBzdHlsZXMgcGx1cyBtZWRpYSBxdWVyaWVzIGZvciBlYWNoIGJyZWFrcG9pbnQgcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3ViamVjdFVuZGVyVGVzdCA9IGZuKHt1c2U6IHtiYXNlOiAnbGlnaHQnLCBkZXNrdG9wOiAnZGFyayd9LCBjb2xvcnMsIHRoZW1lfSk7XG4gICAgY29uc3QgQ29tcG9uZW50ID0gc3R5bGVkLmRpdihzdWJqZWN0VW5kZXJUZXN0KTtcbiAgICBjb25zdCB7Y29udGFpbmVyfSA9IGZ1bGxSZW5kZXIoPENvbXBvbmVudCAvPik7XG4gICAgZXhwZWN0KGNvbnRhaW5lci5maXJzdENoaWxkKS50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByYWlzZSBhbiBlcnJvciBpZiBjYWxsZWQgd2l0aG91dCBhIGJhc2UgdmFyaWFudCcsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4gZm4oe3VzZToge2Rlc2t0b3A6ICdkYXJrJ30sIGNvbG9ycywgdGhlbWV9KSkudG9UaHJvdygpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJhaXNlIGFuIGVycm9yIGlmIGNhbGxlZCB3aXRob3V0IGEgdGhlbWUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KCgpID0+IGZuKHt1c2U6IHtiYXNlOiAnbGlnaHQnLCBkZXNrdG9wOiAnZGFyayd9LCBjb2xvcnN9KSkudG9UaHJvdygpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJhaXNlIGFuIGVycm9yIGlmIGNhbGxlZCB3aXRob3V0IGJyZWFrcG9pbnRzJywgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiBmbih7dXNlOiB7YmFzZTogJ2xpZ2h0JywgZGVza3RvcDogJ2RhcmsnfSwgY29sb3JzLCB0aGVtZToge319KSkudG9UaHJvdygpO1xuICB9KTtcbn0pO1xuIl19