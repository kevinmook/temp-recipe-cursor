'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var createComponent = require('reakit-system/createComponent');
var createHook = require('reakit-system/createHook');
var Box = require('../Box/Box.js');
var _rollupPluginBabelHelpers = require('../_rollupPluginBabelHelpers-770e06b1.js');
var React = require('react');
var useForkRef = require('reakit-utils/useForkRef');
var isButton = require('reakit-utils/isButton');
var reakitWarning = require('reakit-warning');
var useLiveRef = require('reakit-utils/useLiveRef');
var tabbable = require('reakit-utils/tabbable');
var hasFocusWithin = require('reakit-utils/hasFocusWithin');

function isNativeTabbable(element) {
  return element.tagName === "BUTTON" || element.tagName === "INPUT" || element.tagName === "SELECT" || element.tagName === "TEXTAREA" || element.tagName === "A" || element.tagName === "AUDIO" || element.tagName === "VIDEO";
} // https://twitter.com/diegohaz/status/1176998102139572225


function isUserAgent(string) {
  if (typeof window === "undefined") return false;
  return window.navigator.userAgent.indexOf(string) !== -1;
}

var isSafariOrFirefoxOnMac = isUserAgent("Mac") && (isUserAgent("Safari") || isUserAgent("Firefox"));
var useTabbable = createHook.createHook({
  name: "Tabbable",
  compose: Box.useBox,
  keys: ["disabled", "focusable"],
  useOptions: function useOptions(options, _ref) {
    var disabled = _ref.disabled;
    return _rollupPluginBabelHelpers._objectSpread2({
      disabled: disabled
    }, options);
  },
  useProps: function useProps(options, _ref2) {
    var htmlRef = _ref2.ref,
        htmlTabIndex = _ref2.tabIndex,
        htmlOnClick = _ref2.onClick,
        htmlOnMouseDown = _ref2.onMouseDown,
        htmlStyle = _ref2.style,
        htmlProps = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(_ref2, ["ref", "tabIndex", "onClick", "onMouseDown", "style"]);

    var ref = React.useRef(null);
    var onClickRef = useLiveRef.useLiveRef(htmlOnClick);
    var onMouseDownRef = useLiveRef.useLiveRef(htmlOnMouseDown);
    var trulyDisabled = options.disabled && !options.focusable;

    var _React$useState = React.useState(true),
        nativeTabbable = _React$useState[0],
        setNativeTabbable = _React$useState[1];

    var tabIndex = nativeTabbable ? htmlTabIndex : htmlTabIndex || 0;
    var style = options.disabled ? _rollupPluginBabelHelpers._objectSpread2({
      pointerEvents: "none"
    }, htmlStyle) : htmlStyle;
    React.useEffect(function () {
      var tabbable = ref.current;

      if (!tabbable) {
        process.env.NODE_ENV !== "production" ? reakitWarning.warning(true, "Can't determine if the element is a native tabbable element because `ref` wasn't passed to the component.", "See https://reakit.io/docs/tabbable") : void 0;
        return;
      }

      if (!isNativeTabbable(tabbable)) {
        setNativeTabbable(false);
      }
    }, []);
    var onClick = React.useCallback(function (event) {
      var _onClickRef$current;

      if (options.disabled) {
        event.stopPropagation();
        event.preventDefault();
        return;
      }

      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);
    }, [options.disabled]);
    var onMouseDown = React.useCallback(function (event) {
      var _onMouseDownRef$curre;

      if (options.disabled) {
        event.stopPropagation();
        event.preventDefault();
        return;
      }

      (_onMouseDownRef$curre = onMouseDownRef.current) === null || _onMouseDownRef$curre === void 0 ? void 0 : _onMouseDownRef$curre.call(onMouseDownRef, event);
      if (event.defaultPrevented) return;
      var self = event.currentTarget;
      var target = event.target;

      if (isSafariOrFirefoxOnMac && isButton.isButton(self) && self.contains(target)) {
        event.preventDefault();
        var isFocusControl = tabbable.isFocusable(target) || target.tagName === "LABEL";

        if (!hasFocusWithin.hasFocusWithin(self) || self === target || !isFocusControl) {
          self.focus();
        }
      }
    }, [options.disabled]);
    return _rollupPluginBabelHelpers._objectSpread2({
      ref: useForkRef.useForkRef(ref, htmlRef),
      style: style,
      tabIndex: !trulyDisabled ? tabIndex : undefined,
      disabled: trulyDisabled && nativeTabbable ? true : undefined,
      "aria-disabled": options.disabled ? true : undefined,
      onClick: onClick,
      onMouseDown: onMouseDown
    }, htmlProps);
  }
});
var Tabbable = createComponent.createComponent({
  as: "div",
  useHook: useTabbable
});

exports.Tabbable = Tabbable;
exports.useTabbable = useTabbable;
