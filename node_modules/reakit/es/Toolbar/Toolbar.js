import { createComponent } from 'reakit-system/createComponent';
import { createHook } from 'reakit-system/createHook';
import '../Box/Box.js';
import { a as _objectSpread2 } from '../_rollupPluginBabelHelpers-959e870d.js';
import 'react';
import 'reakit-utils/useForkRef';
import 'reakit-utils/isButton';
import { useWarning } from 'reakit-warning';
import 'reakit-utils/useLiveRef';
import 'reakit-utils/tabbable';
import 'reakit-utils/hasFocusWithin';
import '../Tabbable/Tabbable.js';
import 'reakit-utils/useSealedState';
import { useCreateElement } from 'reakit-system/useCreateElement';
import 'reakit-utils/createOnKeyDown';
import 'reakit-utils/getDocument';
import 'reakit-utils/fireEvent';
import 'reakit-utils/fireKeyboardEvent';
import 'reakit-utils/isSelfTarget';
import 'reakit-utils/applyState';
import '../Id/IdProvider.js';
import '../Id/IdState.js';
import '../CompositeState-de01a7f3.js';
import 'reakit-utils/getActiveElement';
import { unstable_useComposite } from '../Composite/Composite.js';
import { useToolbarState } from './ToolbarState.js';

var useToolbar = createHook({
  name: "Toolbar",
  compose: unstable_useComposite,
  useState: useToolbarState,
  useProps: function useProps(options, htmlProps) {
    return _objectSpread2({
      role: "toolbar",
      "aria-orientation": options.orientation
    }, htmlProps);
  }
});
var Toolbar = createComponent({
  as: "div",
  useHook: useToolbar,
  useCreateElement: function useCreateElement$1(type, props, children) {
    process.env.NODE_ENV !== "production" ? useWarning(!props["aria-label"] && !props["aria-labelledby"], "You should provide either `aria-label` or `aria-labelledby` props.", "See https://reakit.io/docs/toolbar") : void 0;
    return useCreateElement(type, props, children);
  }
});

export { Toolbar, useToolbar };
