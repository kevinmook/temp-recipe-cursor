import { createComponent } from 'reakit-system/createComponent';
import { createHook } from 'reakit-system/createHook';
import '../Box/Box.js';
import '../_rollupPluginBabelHelpers-959e870d.js';
import 'react';
import 'reakit-utils/useForkRef';
import 'reakit-utils/isButton';
import { warning } from 'reakit-warning';
import 'reakit-utils/useLiveRef';
import 'reakit-utils/tabbable';
import 'reakit-utils/hasFocusWithin';
import '../Tabbable/Tabbable.js';
import '../Clickable/Clickable.js';
import '../Button/Button.js';
import 'reakit-utils/useSealedState';
import 'reakit-utils/isSelfTarget';
import '../Id/IdProvider.js';
import '../Id/IdState.js';
import 'reakit-utils/useIsomorphicEffect';
import '../Disclosure/DisclosureState.js';
import { useDisclosureContent } from '../Disclosure/DisclosureContent.js';
import '../Disclosure/Disclosure.js';
import { useHiddenState } from './HiddenState.js';

var useHidden = createHook({
  name: "Hidden",
  compose: useDisclosureContent,
  useState: useHiddenState,
  useProps: function useProps(_, htmlProps) {
    process.env.NODE_ENV !== "production" ? warning(true, "`Hidden` has been renamed to `DisclosureContent`. Using `<Hidden />` will no longer work in future versions.", "See https://reakit.io/docs/disclosure") : void 0;
    return htmlProps;
  }
});
var Hidden = createComponent({
  as: "div",
  useHook: useHidden
});

export { Hidden, useHidden };
